<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>http://www.yinwang.org/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Tue, 22 Nov 2016 16:38:54 +0800</lastBuildDate>
<item>
<title>希拉里的“邮件门”丑闻是怎么回事</title>
<link>http://yinwang.org/blog-cn/2016/11/20/hillary-emailgate</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;希拉里的“邮件门”丑闻是怎么回事&lt;/h2&gt;
                            &lt;p&gt;大家都听说过希拉里的“邮件门”丑闻，然而很少有人真的理解那是怎么回事。“邮件门”这个名字很有误导性。不知道细节的人，还以为不过是自己搭了个 email 服务器，被黑客偷了一些 email。就算这 email 里面有国家机密，也不至于让她失去当选的机会吧？然而看了国会的&lt;a href=&quot;https://www.youtube.com/watch?v=6ZokHXwBzUQ&quot;&gt;调查视频&lt;/a&gt;和&lt;a href=&quot;https://benghazi.house.gov/NewInfo&quot;&gt;报告&lt;/a&gt;之后你就会发现，事情其实比泄露国家机密还要可怕一万倍。&lt;/p&gt;

&lt;p&gt;问题的关键其实不在于国家机密，而在于这个不为人知的神秘服务器里面有什么内容。这故事要从一次恐怖袭击讲起……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/benghazi-attack.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

&lt;p&gt;2012 年 9 月 11 日，美国驻利比亚第二大城市本加西（Benghazi）的领事馆，遭到恐怖分子&lt;a href=&quot;https://en.wikipedia.org/wiki/2012_Benghazi_attack&quot;&gt;袭击&lt;/a&gt;。70 多名恐怖分子使用 AK-47，机关枪，手榴弹，火箭筒，迫击炮等武器，对领事馆发动了长达几个小时的攻击。领事馆当时只有包括美国大使在内的几个官员和 5 名卫兵，增援部队&lt;a href=&quot;https://www.youtube.com/watch?v=zWKJegf5pYc&quot;&gt;迟迟没有到达&lt;/a&gt;，最后导致美国大使在内的 4 名官员死亡。其中美国大使是由于恐怖分子用柴油焚烧领事馆，躲在地道里窒息而死。这是自 1979 年以来，第一次有美国大使在国外被杀害。&lt;/p&gt;

&lt;p&gt;领事馆属于希拉里的国务院管辖。在此之前的几个月，附近的局势日渐危险，恐怖袭击不断，很多其他国家的领事馆都已经撤离那个地区。就要临近 9 月 11 号了，一个可怕的日子，美国大使反复地请求增加安全措施，向希拉里发送了超过 600 份请求，却没有得到安全措施的改进和更多的卫兵，所以希拉里对此负有直接的责任。然而这件事请，却远远不是失职那么简单……&lt;/p&gt;

&lt;p&gt;从 2014 年开始，国会对这次恐怖袭击进行了为期两年，耗资 700 万美元的全面调查。令人匪夷所思的是，在国会听证会上，希拉里谎话连篇，被多名国会代表当场揭穿。希拉里对自己的严重失职，她手下人跟恐怖分子见面等重大疑点，一问三不知，说话牛头不对马嘴，自相矛盾。(&lt;a href=&quot;https://www.youtube.com/watch?v=5KTDvFxok9A&quot;&gt;视频&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;另外调查人员发现，希拉里藏着一个“私密邮件服务器”，是自己请人安装配置的。她的很多 email 不是通过政府给她的，有监控备案的邮箱发送，而是通过这个神秘的服务器，在此之前政府完全不知道它的存在。美国政府本来提供给她非常安全的 email 服务，为什么非得自己弄一个？希拉里说那是为了处理自己的私人邮件，为了“方便”。然而检察官们分析后发现，她这个服务器发送的，不只是私人的东西。而且这年头还有谁会自己搭建 email 服务器的？自己搭建 email 服务器，显然更加麻烦。在政府的服务器上另外开一个账号来处理个人邮件，或者用 Gmail 之类不就可以了？所以希拉里搭建这个私人服务器，多半是因为有不可告人的秘密。因为通过这个服务器来收发邮件，司法部门就无法监听到她写了什么。&lt;/p&gt;

&lt;p&gt;然而最可疑的事情是，当收到传票的时候，希拉里迅速地销毁了私密服务器上的三万多封 email。然而可惜的是，在她销毁这些 email 之前，已经有黑客偷走了它们，并且把其中一部分公布在了 WikiLeaks 上面。WikiLeaks 是一个专门曝光政府丑闻的网站。调查人员分析这些被泄露的 email 后发现，她跟一个叫 Sidney Blumenthal 的政府外面的人有着非常密切的通信。这个人是关于“利比亚/本加西”这个关键字，跟希拉里通信最多的人。当被问到跟这人的关系时，希拉里结结巴巴，自相矛盾。Blumenthal 曾经试图加入奥巴马政府，但是由于没有通过背景审查而被拒绝。Blumenthal 在给希拉里的 email 里面，说了奥巴马，国防部长和其它政府要员的坏话。而从政府人员的密电里，发现有人用“恶毒”这个形容词来描述 Blumenthal，这也许就是为什么政府没有雇佣他。Blumenthal 在一份 email 里面请求希拉里帮助他在利比亚做“生意”，并且跟她讨论关于利比亚“情报”，甚至武装干预利比亚的话题。希拉里每一次转发他的 email 里面的内容，总是把他的名字删掉再转发，这样别人就不知道是谁说的。更加诡异的是，在希拉里销毁她的 email 的时候，Blumenthal 也同时销毁了自己的 email…… (&lt;a href=&quot;https://youtu.be/o_uO0xsudes?t=309&quot;&gt;视频&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;这些被销毁的 email，希拉里不是用普通的“删除”按钮删掉的，而是用的一种专业的“数据擦除软件”，叫做 &lt;a href=&quot;https://www.bleachbit.org&quot;&gt;Bleach Bit&lt;/a&gt;。被 Bleach Bit 抹掉的数据，是不可能恢复的，号称“上帝都看不见”。希拉里为什么需要用这么专业的软件来销毁个人 email？她自称里面也就是一些瑜伽课，别人的婚礼邀请之类的信息。当希拉里被当众问到这件事的时候，她支支吾吾的说：“什么？抹掉？就像用一块布还是什么东西？(Like with a cloth or something?) 我可没听说过什么 Bleach Bit……” (&lt;a href=&quot;https://www.youtube.com/watch?v=9Rha6Wamfp0&quot;&gt;视频&lt;/a&gt;)  由于这件事情，Bleach Bit 大红大紫，已经开始用希拉里的照片在自己网站上做&lt;a href=&quot;https://www.bleachbit.org/cloth-or-something&quot;&gt;广告&lt;/a&gt; :)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.bleachbit.org/cloth-or-something&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/hillary-bleach-bit.jpg&quot; width=&quot;300&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这就是为什么这个 email 丑闻，如此的引人注目。如果仅仅是不正确地处理国家机密，是不可能导致这么严重的调查的，也不可能影响希拉里的总统选举。邮件门之所以很严重，不是因为她泄露了国家机密，而在于这个服务器的秘密存在，和她在收到传票时匆忙销毁 email 这个可疑行为。这些被她销毁的 email 显然是非常重要的证据，它们可能含有这次恐怖袭击的内幕。国会明确要求她拿出所有的通信包括 email，而她居然销毁了它们，这看起来就是在掩盖真相。&lt;/p&gt;

&lt;p&gt;一个心里没有鬼的人在被司法部门调查的时候，肯定会轻松地交出这些 email 给检察官看，然而希拉里急忙把它们给抹掉了，而且用了非常专业不可恢复的做法，也就是说她非常的不想让人看见那些 email 里面有什么，这非常的可疑。再加上希拉里手下人在袭击发生前的几小时，去跟基地组织的恐怖分子碰面，讨论“安全戒备问题”。你没听错，是跟恐怖分子讨论安全问题！！！她却在听证会上支支吾吾，说不知道有这件事，甚至说不清楚自己手下有哪些人，所以她可能跟恐怖分子有瓜葛。(&lt;a href=&quot;https://youtu.be/5KTDvFxok9A?t=490&quot;&gt;视频&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;反腐败专家，这次调查的首席检察官 Trey Gowdy 在接受采访时指出，国家机密不是关键，其他人都可以去调查那个事情。他关心的其实是希拉里对于 email 的诡异做法。另外你想过没有，一般恐怖袭击都是在人群集中的地方放炸弹或者扫射，目的是杀死很多人。然而这次的不一样，70 多个恐怖分子袭击了好多个小时，很显然他们有一个目标，他们想要某一个人死。很多人认为，所有这些现象加在一起显示，希拉里有勾结恐怖分子，谋杀美国大使的叛国罪嫌疑，而这些 email 里面，可能包含了这次阴谋的细节。所以希拉里非常迅速的销毁掉它们，这样就可以掩盖真相。(&lt;a href=&quot;https://www.youtube.com/watch?v=FxhnL23xcDg&quot;&gt;视频&lt;/a&gt;) 这已经不是希拉里第一次收到传票时销毁证据，同样的事情也在她的其它丑闻里出现过。(&lt;a href=&quot;https://www.youtube.com/watch?v=a-xjiXfJ58Q&quot;&gt;视频&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;这件事情的细节，都已经在网上了，详情请参考这些视频和报告：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6ZokHXwBzUQ&quot;&gt;国会听证会完整视频&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;希拉里撒谎被国会代表当场揭穿的片段。(&lt;a href=&quot;https://www.youtube.com/watch?v=5KTDvFxok9A&quot;&gt;片段1&lt;/a&gt;) (&lt;a href=&quot;https://www.youtube.com/watch?v=dCdJIiBPJeg&quot;&gt;片段2&lt;/a&gt;) (&lt;a href=&quot;https://www.youtube.com/watch?v=o_uO0xsudes&quot;&gt;片段3&lt;/a&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=FxhnL23xcDg&quot;&gt;首席检察官 Trey Gowdy 谈希拉里的叛国罪 email 丑闻&lt;/a&gt;。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;美国国会发布的&lt;a href=&quot;https://benghazi.house.gov/NewInfo&quot;&gt;官方调查报告&lt;/a&gt;，指出奥巴马政府包括希拉里在内，全部都玩忽职守，而且对公众撒谎，掩盖真相。增援部队迟迟没有到达，原因是他们根本没有朝本加西出发……&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在大选失败之后，希拉里称是因为 FBI 在选举前两天，提出要重新调查这个 email 事件，所以才输给了 Trump，并不是那样的。一个人是否犯了罪，是否撒了谎，不是根据 FBI 是否调查他来决定的。一个人是否有罪，是根据事实，是根据他实际做了什么来决定的。亲眼在视频里看见希拉里谎话连篇，销毁证据的群众，都已经知道这丑闻的可怕性。而且不能排除 FBI 头目也是腐败分子，或者受到希拉里威胁的可能性。所以无论最后 FBI 的结论如何，人们都不会再相信希拉里。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">hillary-emailgate</guid>
<pubDate>Sun, 20 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>对希拉里 Twitter 的分析</title>
<link>http://yinwang.org/blog-cn/2016/11/18/hillary-twitter</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;对希拉里 Twitter 的分析&lt;/h2&gt;
                            &lt;p&gt;犯下这么多的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/17/all-about-hillary&quot;&gt;丑闻和罪行&lt;/a&gt;，很多人都知道，所以希拉里要成为美国总统，本来几乎是不可能的。希拉里看到了这一点，所以她使出了最后的招数。她利用自己是女人这一特点，开始煽动广大不知情的女性：“女同胞们，你们有力量阻止 Trump！他是一个种族主义者，性别歧视者，偏执狂。我们不能让他做总统，否则灾难就在眼前！”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/hillary-trump.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;利用女性对自己的盲从心理和价值等同感，煽动她们的恐惧心理，借此拉到这些无知女性的选票。是的，她成功了，我身边的很多女生确实很支持她，从来没参加过选举的妹纸们，响应号召一拥而上，去注册投票了，投了希拉里的票，甚至有些还参加了抗议 Trump 的游行。可惜就算这样也难以挽回。失败之后，希拉里在她的 Twitter 上说：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/hillary-glass-ceiling.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;“我们还没有粉碎那最高最硬的玻璃屋顶。但是总有一天，有一个人会粉碎它。”&lt;/p&gt;

&lt;p&gt;这是非常有煽动性的语言，所谓最高最硬的屋顶，就是登上总统宝座。她是在说，现在还没有任何一个女人当上过美国总统，但是总有一天会的。在这里希拉里用了“我们”（we）这个词，让女性对她产生等同感。好像这不是她一个人在竞选总统，而是所有女性在一起竞选总统一样。其实根本就不是这么回事。希拉里只是为了自己的利益，大公司，大银行的利益而参加选举，她并不代表广大女性。就算她当选了，也不可能给广大女性的生活带来任何的帮助，找不到工作照样找不到。&lt;/p&gt;

&lt;p&gt;“没有粉碎最高最硬的玻璃屋顶”，这似乎在说女性长期以来有劣势，因为她是女人，所以人们才没让她当选，就像被“玻璃屋顶”盖住了一样。显然不是那样的。人民不选她，不是因为她是女人，而是因为她不是好人。我也希望美国能有一个女总统啊，非常想。我还希望中国成为母系社会。我希望全世界大部分国家都被女人统治，国防部长都应该是女的，这样世界会更加和平和幸福。然而，希拉里不是好的人选。许多其他女性都可以胜任这些工作，就是希拉里不可以，因为她不具有女性的优点。&lt;/p&gt;

&lt;p&gt;另外，“美国第一任女总统”，这种说法有任何的意义吗？美国迫切需要的，只是有一个好人做总统，不管 TA 是男的还是女的，黑的还是白的！就像毛主席说的，不管黄毛还是黑猫，抓住耗子就是好猫。&lt;/p&gt;

&lt;p&gt;另外，我发现希拉里的 Twitter 还有一个特点，那就是满篇都是各种“正面”的，“励志”的，有“诗意”，很押韵的语言。俗话说就是“鸡汤”：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/hillary-twitter.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;看这两条，像不像好莱坞电影里的煽情片段 :P 实际上，希拉里选举失败后的演讲(&lt;a href=&quot;https://youtu.be/khK9fIgoNjQ?t=878&quot;&gt;视频&lt;/a&gt;)里，她基本就是把这些 Tweet 一条条的看着字幕念出来（而且念得很吃力），满口的“自由”啊，“奋斗”啊，“包容”啊，“坚持”啊，“信念”啊…… 跟新闻联播似的。从她的眼神里，我看不到真诚：她嘴里说的，不是她心里想的。&lt;/p&gt;

&lt;p&gt;对于很多人，这种“正面”，“励志”的话，满篇的歌颂爱啊，真理啊，很容易让涉世不深的人认为这个人内心是美好的，进而对她产生好感。然而对于经历过很多事情的人来说，满篇的这种励志句子，是伪君子的显著特征，你得对这人提高警惕了！这种励志的语言，很容易就可以从书上抄来，或者你绞尽脑汁想一会，总能编出来。它不包含任何实质的，独立的思想，所以非常可能是居心叵测的人用来吊人心的鱼钩。&lt;/p&gt;

&lt;p&gt;中国也有一些名人，很喜欢这种语言，每每出来就是教导年轻人的口气，要有诚信啊，要做好人啊，…… 空话连篇。确实这样很容易招来千万的粉丝，然而有经验的人一看，就知道这是怎么回事了。&lt;/p&gt;

&lt;p&gt;关于这种正面思维的现象，你可以参考我的另外一篇文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/05/22/positive-thinking&quot;&gt;正面思维的误区&lt;/a&gt;』，它其实是美国很普遍的一种有害的思维方式。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">hillary-twitter</guid>
<pubDate>Fri, 18 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>希拉里的真实面目</title>
<link>http://yinwang.org/blog-cn/2016/11/17/all-about-hillary</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;希拉里的真实面目&lt;/h2&gt;
                            &lt;p&gt;很多人都不知道，他们的偶像希拉里，其实是世界上最腐败，最可怕，最危险的政客之一，犯下各种各样的严重罪行，多次被法庭审讯。她是美国历史上第一个被送上刑事法庭审问的第一夫人，她的丑闻真是比黑手党大哥还要多。在这次大选之前，她就应该已经在监狱里了，根本就不应该可以参加竞选。&lt;/p&gt;

&lt;p&gt;下面这些 YouTube 视频，揭露了希拉里的真实面目。它们在大选之前早就出现了，本来每个人在投票之前都应该看看这些负面视频（当然也应该看看 Trump 的）。可惜很多人都没有看，或者视而不见。我以前也没看过这些东西，当我发现它们的时候，我毛骨悚然……&lt;/p&gt;

&lt;p&gt;下面就是其中我觉得最可怕的几个视频：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;自成为第一夫人以来，希拉里撒谎，犯罪，丑闻的详细列表。看看你数得清不？可怕的事情是，其中包括收取贿赂，利用克林顿的总统职权&lt;a href=&quot;https://youtu.be/a-xjiXfJ58Q?t=1208&quot;&gt;赦免多名恐怖分子和大毒枭&lt;/a&gt;，销毁证据，等等…… (&lt;a href=&quot;https://www.youtube.com/watch?v=a-xjiXfJ58Q&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;卧底记者偷拍内幕：希拉里竞选团队出钱雇佣精神病人，去 Trump 演讲场所挑衅，故意引起暴力冲突，施加陷害，策划游行暴乱，目的就是把 Trump 搞臭。 (&lt;a href=&quot;https://www.youtube.com/watch?v=5IuJGHuIkzY&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;希拉里支持者暴力挑衅和攻击 Trump 支持者，制造暴乱，甚至袭击警察。 (&lt;a href=&quot;https://www.youtube.com/watch?v=vY-ewgX4oIU&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Email 丑闻。这个丑闻非常的严重，请参考这篇单独的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/20/hillary-emailgate&quot;&gt;文章&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;前两个视频由于主流媒体的封锁，可能很多人还没有看过。如果你对希拉里印象很好或者一般，看了可能会震惊的。不要随便说这是“阴谋论”，这些证据，加上自己的亲自研究，一些历史事实，和希拉里的直接言论，你就会发现这是真的。为了冲破美国媒体的封锁，请在你的朋友圈之类社交网络转帖这些视频的链接。但请不要转载我这篇文章。&lt;/p&gt;

&lt;p&gt;现在的美国，因为克林顿，希拉里，小布什，奥巴马这样的人，早已不再是自由民主的国家，它是一个腐败瘫痪的机器，它是被流氓和罪犯统治的国家。用一个好听点的词，这叫做“官僚资本主义”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Crony_capitalism&quot;&gt;crony capitalism&lt;/a&gt;），也就是腐败的官员和奸商勾结，通过不正当手段（比如贿赂）谋取暴利，让广大民众和小商业者受害的社会。好像在哪里听说过呢？中国的历史教科书告诉我们，中国在解放前就是官僚资本主义，民不聊生。现在美国终于沦落到了同样的地步，病入膏肓，接近崩溃。&lt;/p&gt;

&lt;p&gt;这些沉睡的人们，还生活在“美国梦”的幻觉里面，仍然以为美国是民主的国家。就像 Matrix 里面的人一样，你的理念，你相信的“事实”，只不过是媒体制造的幻觉。这些被叫做“事实”的信息，从各种感官进入人的头脑，被不加判断的接受。以至于看见了真正的事实都故意不相信，继续活在梦里。就像 Matrix 里面的躯体一样，被当成这台巨大机器的电池，榨干之后就被无情的倒掉。醒来面对现实是痛苦的，但未来会是美好的，真正美好的。&lt;/p&gt;

&lt;p&gt;希望有些人看了这些视频之后能醒过来。你们不应该为希拉里的失败而悲伤甚至愤怒，反而应该感到万分的幸运。因为希拉里是一个非常危险的罪犯，她一旦成为美国总统，不仅对于美国，而且对于全世界都是一种致命的威胁。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">all-about-hillary</guid>
<pubDate>Thu, 17 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>媒体是如何妖魔化 Trump 的</title>
<link>http://yinwang.org/blog-cn/2016/11/16/media-distortion</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;媒体是如何妖魔化 Trump 的&lt;/h2&gt;
                            &lt;h3&gt;“Trump 是种族主义者”&lt;/h3&gt;

&lt;p&gt;在 San Bernardino 枪击屠杀（14 人死亡，22 人重伤）的惨案发生之后，Trump 说(&lt;a href=&quot;https://youtu.be/37zvOZ17eSE?t=165&quot;&gt;视频&lt;/a&gt;)：“我们必须停止让穆斯林进入美国，直到我们国家的官员们能搞清楚这到底是怎么一回事！” 搞清楚这是怎么一回事，是指为什么会有人以前从来没有迹象，忽然间变成了恐怖分子开始杀人。他的意思是这个时候进入美国的穆斯林，有一些可能是 ISIS 操纵的恐怖分子（Trump 叫他们伊斯兰极端主义分子），所以必须暂时停止让穆斯林进入美国(&lt;a href=&quot;https://youtu.be/bXZI1VwWFAI?t=32&quot;&gt;视频&lt;/a&gt;)。确实，这次事件跟穆斯林的宗教很有关系。信伊斯兰教的人，有某种可能性会被 ISIS 恐怖分子利用，使这些人极端化，进而演变成为恐怖分子。这种人从表面上根本看不出来，非常具有隐蔽性，这就像一种潜伏的病毒。Trump 建议暂时停止让穆斯林入境，就像在伊波拉病毒泛滥的时候，从西非进入美国的人，都需要进行隔离检查，才能进入。当然，绝大部分穆斯林都是好人，然而被极端化的可能性，是很实在的危险。&lt;/p&gt;

&lt;p&gt;所以 Trump 当时只是在说那个危险情况下暂时的措施。为了保护人民，包括美国境内善良的穆斯林民众，说这样的话这有什么问题吗？我们确实应该搞清楚，穆斯林在什么样的情况下可能被极端化，否则可能出现更大的问题。他根本没有说永久不准穆斯林进入美国，结果各大媒体把后半句“直到我们搞清楚这是怎么回事”剪掉，去掉时间限制成为永久性的断言，借此歪曲 Trump 的原话，扣个帽子让他成为穆斯林的敌人。还有的媒体把“停止让穆斯林进入美国”，故意改成了“把穆斯林赶出美国”，这意思就完全变了。这就造成了很多人嘴里流传的，Trump 会把其它种族赶出美国这一谣言。然后奥巴马，希拉里这帮伪君子，就出来批判 Trump，说穆斯林的好话，装好人…… 还没看明白吗？&lt;/p&gt;

&lt;p&gt;Trump 在提到非法移民的时候说：“当墨西哥把它的人送到美国的时候（指非法跑过来的那些），他们没有把最好的送过来。他们送过来的是有各种毛病的人。他们吸毒，他们犯罪，他们是强奸犯……”  （&lt;a href=&quot;https://youtu.be/37zvOZ17eSE?t=10&quot;&gt;视频证据&lt;/a&gt;） 结果媒体就把前面半截话剪掉，然后说：“看呀，Trump 把墨西哥人叫做强奸犯！” 你加上完整的句子，就知道他只是在说非法流窜到美国来的那些个墨西哥人，墨西哥的败类，而不是所有的墨西哥人！Trump 喜欢墨西哥人，但他只喜欢好的墨西哥人。看看前半句吧：“他们没有把最好的送过来。” 最好的…… 这说明他知道有很多好的墨西哥人！Trump 不喜欢坏人，不管他是哪国的坏人，这有什么值得非议的吗？&lt;/p&gt;

&lt;h3&gt;“Trump 性别歧视”&lt;/h3&gt;

&lt;p&gt;关于性别歧视，其实也是媒体的歪曲。Trump 曾经&lt;a href=&quot;https://youtu.be/oP5VhfQ9Qv8?t=6&quot;&gt;骂过一个很没有职业道德的新闻记者&lt;/a&gt;，名字叫  Rosie O’Donnell。碰巧呢，这记者是个女人。这人真的很不好，Trump 骂她并不是因为她是女人，而是因为她真的很讨厌，没有职业素养，是我也会骂她。这是以前的事情了，现在 Trump 竞选，这段历史就被另外一些记者拿出来说事。&lt;/p&gt;

&lt;p&gt;现在我们来分析一下，Trump 是怎样落入别有用心的记者设下的圈套（&lt;a href=&quot;https://youtu.be/-zGpcbWqGE0?t=804&quot;&gt;视频&lt;/a&gt;）的。有记者问他：“你把你不喜欢的女人叫做肥猪，请问这个怎么解释？” 提出这样的问题，是很奇怪的：为什么要加上个“女”字？为什么不说“你不喜欢的人”，而一定要跟“女人”挂钩？这是因为，记者故意想把 Trump 跟“性别歧视”挂钩，所以这个问题本身是一个圈套，千方百计要往这个“女”字上靠。Trump 对这种伎俩貌似没有很好的准备，他说：“我只骂了 Rosie 而已。” 要是他当时回答：“我骂她不是因为她是女人，而是因为她是一个没有职业道德的记者。” 就不会有这种问题。&lt;/p&gt;

&lt;p&gt;关于这整个故事，Trump 为什么要骂 Rosie，请参考这篇&lt;a href=&quot;http://cj.sina.com.cn/article/detail/2949462582/98422&quot;&gt;文章&lt;/a&gt;（查询“第二个故事：一个女人”）。看了之后你也许会发现，Trump 这个人的本质，跟大家的谣言正好相反，他关心和爱护女性。&lt;/p&gt;

&lt;h3&gt;“Trump 是变态”&lt;/h3&gt;

&lt;p&gt;还有个视频，是关于 Trump 曾经对他女儿 Ivanka 的身材的言论，被人歪曲之后，想把 Trump 包装成一个乱伦的变态：“Trump 痴迷于他女儿的身材，竟然想要上她！”  这种谣言到处传播(&lt;a href=&quot;https://www.youtube.com/watch?v=xkvG3g7hEJE&quot;&gt;视频&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;现在我们来看看当时完整的&lt;a href=&quot;https://youtu.be/xkvG3g7hEJE?t=70&quot;&gt;视频内容&lt;/a&gt;，Trump 其实没说 sex 这个词，他只是开玩笑说“约会”（date）。约会和做爱，差别很大好不好？你再仔细看上下文，就会发现这根本就是句玩笑话，只是用来变相赞美女儿的美丽。&lt;/p&gt;

&lt;p&gt;在这个类似『康熙来了』的娱乐性质的节目里，主持人为了活跃气氛，提出这样一个让人有点尴尬的“假设”问题：“如果 Playboy 把你的女儿 Ivanka 放在封面上，你会怎么办？”&lt;/p&gt;

&lt;p&gt;Trump：“那我会失望…… 不过也许取决于那杂志里面的内容是什么。”&lt;/p&gt;

&lt;p&gt;主持人：“假设杂志里面是她的裸照呢？”&lt;/p&gt;

&lt;p&gt;Trump：“我不相信 Ivanka 会做那样的事情，虽然她的身材确实很好…… 我曾经说过，要是 Ivanka 不是我女儿，我也许会约她 :)”&lt;/p&gt;

&lt;p&gt;看清楚了吗？一个父亲，为女儿的美丽而自豪，说出这样的话来，这有任何的问题吗？实际上这样一句话，很有可能是当着女儿的面，对自己的妻子或者朋友说的玩笑话，目的是赞美自己的女儿：“看哪，我女儿多美！如果她不是我女儿，我可能会约她呢！” 如果你知道环球小姐（Miss Universe）选美就是 Trump 主办的，那你就会明白他身边&lt;a href=&quot;https://www.youtube.com/watch?v=-zGpcbWqGE0&amp;amp;feature=youtu.be&amp;amp;t=610&quot;&gt;美女如云&lt;/a&gt;，根本不稀罕。赞美女性其实是很自然的天性，显示出男人的风度和魅力。&lt;/p&gt;

&lt;p&gt;如果我有一个漂亮的妻子和女儿，我自己都有可能说出这样的话来。这完全就是一种欣赏，一种赞美，却被媒体肆意的歪曲和强调。再说了，看到 Ivanka 那样的女人而没有一点想法的男人，还算是男人吗？其它男人可以想，父亲就不可以想了，这是什么道理？父亲也是男人。只要能约束住自己没有行动，就一点问题都没有。在欧洲国家要是有人这样说，真一点问题都没有。本来是人之常情，美国的道德君子还真是多，保守又封建。说人家想，其实他们自己都在想。哎，苦命的 Trump……&lt;/p&gt;

&lt;h3&gt;美国媒体才是变态&lt;/h3&gt;

&lt;p&gt;看看 Trump 是如何解释媒体的这一做法的(&lt;a href=&quot;https://youtu.be/37zvOZ17eSE?t=302&quot;&gt;视频&lt;/a&gt;)：“他们剪出半句话，他们剪出1/4句话，他们把这些粘在一起，然后就说那是我的意思。这是一种常见的媒体歪曲的做法。” 确实跟我的观察一模一样。&lt;/p&gt;

&lt;p&gt;我对美国的这些主要媒体非常的失望，他们完全不尊重事实，肆意歪曲，根本不配做新闻人，实际上他们根本就是变态。我看完了号称 Trump 最愚蠢，最性别歧视的几段视频：&lt;a href=&quot;https://www.youtube.com/watch?v=-zGpcbWqGE0&quot;&gt;视频1&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=37zvOZ17eSE&quot;&gt;视频2&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=oP5VhfQ9Qv8&quot;&gt;视频3&lt;/a&gt;，竟然发现他的做法其实完全没有问题。这些视频反而让我对 Trump 产生了好感，我觉得他是一个真实的人。&lt;/p&gt;

&lt;p&gt;有人总结了一个跟希拉里竞选团队有勾结的媒体和记者列表，差不多是这个样子：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.wnd.com/2016/11/meet-leftist-prof-who-wrote-hit-list-of-fake-news-sites&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/corrupted-journalists.jpg&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">media-distortion</guid>
<pubDate>Wed, 16 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Trump 为什么会取胜</title>
<link>http://yinwang.org/blog-cn/2016/11/14/why-trump</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Trump 为什么会取胜&lt;/h2&gt;
                            &lt;p&gt;加州和纽约那些因为 Trump 上台而去抗议游行的人，都应该想一想这个问题：既然 Trump 被媒体搞得那么臭，希拉里一副好人形象，为什么 Trump 还会胜出？难道选票数有假吗？难道大部分美国人都是傻子，流氓或者变态吗？当然不是的！人民的眼睛是雪亮的，就像之前&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/13/hillary-supporter&quot;&gt;文章&lt;/a&gt;提到的那位卡车司机。大部分的美国人像他一样，是淳朴善良勤劳有教养的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/truck-driver.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;人民被各种政客骗了又骗，生活每况愈下，所以他们已经不再相信任何政客了，更不要说一个有那么多绯闻的政客。这时候来了一个 Trump，大声道出了人民需要解决的切身问题，痛骂那些伤害他们的人，所以他们很容易就选择了他。&lt;/p&gt;

&lt;p&gt;如果你还不理解，那我们来做一个简单的类比和推理：你现在要在两个人里选择一个，跟你一起开车去很远的地方旅行。这两个人你都不了解，甚至都没见过面，但是其中一个在你的朋友圈子里名声很差，大家都说他是傻逼流氓，而另一个人大家都说他是好人。那你会选择谁呢？当然是大家都说好的那一个对不对？然而这次美国大选的结局却不是这样，这是为什么呢？&lt;/p&gt;

&lt;p&gt;如果希拉里真是一个好人，关心人民疾苦，而 Trump 被媒体报道得那么差，而且没有任何政治经验，如果所有人都完全不了解这两个人，只是靠媒体的报道来投票，那投票给希拉里的肯定是压倒性的，对吧？Trump 只应该得到不到 5% 的票，对吧？然而这次很奇怪，说明虽然媒体一边倒，Trump 却胜利了。这说明人民不只是靠媒体的好恶来决定选谁的，他们靠的是自己的亲身接触和理解，他们直接看这个人说了什么，做了什么，他是否能解决自己切身的问题。他们甚至会从他的眼神和语气，感觉到这个人是否真诚。他们会做各种背景调查和分析。媒体真是把 Trump 说成了一个大粪坑，可他还是赢了，这说明希拉里的实际表现真的非常非常非常差，超越了所有媒体对 Trump 的负面报道加在一起。大部分的美国人民是不喜欢希拉里的，他们已经完全不相信她，不管媒体如何报道。为什么媒体会完全倒向希拉里一边呢？这只能说明媒体是被希拉里控制的。就是这么简单。&lt;/p&gt;

&lt;p&gt;如果你还不理解 Trump 怎么会获胜，那你可能应该问问自己，自己是不是身处某种特殊的地方，这地方相对富裕，或者周围的人心理都不大像普通老百姓，或者脑子都有点问题，以为自己是有钱人暴发户，可以骑在别人头上，或者认为自己是技术天才，可以造出机器来代替很多人的工作，所以你只需要关心全球变暖，绿色食品，垃圾回收，大麻合法化，同性恋婚姻，变性人该上哪个厕所之类的无病生吟？或者这些人就是不痛不痒，根本不关心，所以只临时看看媒体报道，连别人演讲都没看，就投出选票。对的，硅谷和纽约，就是这样的地方 :)&lt;/p&gt;

&lt;p&gt;有几个我身边的人，在美国生活几十年了，本来早就有投票权，可是以前从来没投过票，觉得不关自己的事。这次听到希拉里在呼唤：“女同胞们，你们有力量阻止 Trump！他是一个种族主义者，性别歧视者，偏执狂！我们不能让他做总统，否则灾难就在眼前！” 所以不问青红皂白，也没看人家 Trump 到底说了什么，也没看希拉里的绯闻，更不可能知道维基解密这样的东西。平生第一次注册投票，就这样稀里糊涂投给了希拉里。&lt;/p&gt;

&lt;p&gt;还有另外一些人，完全不明白什么是民主，什么才是健康的社会制度。今天我吃完午饭去外面散步，后面有两个西装革履领导模样的陌生人，郑重其事的在聊选举的事。还隔着几步路呢，嗓门大得让我以为在我耳边说话，说给我听似的，不得不忍受了好长一段路。其中一个人滔滔不绝地说：“…… 选举总统的时候，公司应该被作为一个人对待，它们也应该有投票权。大小公司都没有投票权，是我们选举制度很大的一个缺陷，所以才会出现这次的不幸结局。我们准备提议……” 提议公司要有总统投票权！那公司也给每个雇员投票权，我们一起来选举 CEO 好不好？公司要是有了选举总统的权利，那人民还怎么活，这不是要完全进入奴隶社会吗！我当时嘴都张大了。加州居然有人会有这么愚蠢的想法，他们举行抗议示威，放火打砸，也就不足为怪了。美国要是出现纳粹党，那一定首先产生在加州。这些人就像卓别林在&lt;a href=&quot;https://www.youtube.com/watch?v=w8HdOHrc3OQ&quot;&gt;『大独裁者』最后的演讲&lt;/a&gt;里说的那样：想得太多，感觉太少，机器一样的人，机器一样的心……&lt;/p&gt;

&lt;p&gt;然而大部分其他地方的美国人并不像我们这么幸运，他们是真的出现了生存问题，这是我们身边的人很多没有想象到的。为什么他们会出现生存问题？因为美国的社会制度，整个系统都是有毛病的。社会福利非常差，医疗系统完全就是妖怪，看个感冒都要往死里宰！房价，油价和生活开销疯涨，利率又下调到几乎没有。失业率达到了可怕的程度，超过 20%，也就是五个人里面就有一个没工作的，政府却谎报说只有 5.6%。跟中国大跃进年代的情况类似，号称亩产十万斤，结果其实饿殍遍地。再加上我们这些硅谷技术呆子们造出来的自动化工具，各种 Amazon 之类的电商，各种手机 app 服务，Uber 之类，抢走了很多人的饭碗。实体书店商店濒临倒闭，出租车没生意…… 各大技术公司在内部提供免费三餐，把旁边餐馆都搞垮了，附近地区成为死气沉沉，鸟不下蛋的地方。然后还不回报社会，各种避税，钻法律空子压低工资，把工作转移到海外，在本国大量裁员，为的是赚更多的暴利。公司和亿万富翁总能想法避税，几乎不交税，中产阶级挣点血汗钱，倒交税超过 30%。政府拿着上万亿的血汗税钱去打仗（希拉里对伊拉克战争投了赞成票），血本无回，造成成千上万的伤残士兵，然后叫穷说没钱发福利和养老金。你说为什么美国老有人发疯，买自动步枪来在大街上扫射然后自杀？活不下去了嘛，找一群人一起死了有个伴！&lt;/p&gt;

&lt;p&gt;最近还整出 ObamaCare 这样的害人东西，花费 50 亿美元(!)做了个 bug 无数的网站。我认识一个做过那网站的程序员，他说被请去之后几个月在那里闲着，根本就没叫他做事，倒是拿着不菲的工资，住着高档酒店，每天 70 刀饭钱，外加每月 1000 多刀拿去租跑车。他也怪可怜的，就这一份工作轻松点，可是实在太轻松了！用这网站的人呢，本来不怎么生病的，被迫花不少钱买了医保，结果 deductible 太高，等于没买…… 我在 Sourcegraph 的时候买的就是 ObamaCare。真的，网站 bug 无数！有些按钮点了莫名其妙根本没反应，好不容易填好的内容，提交失败无数次，到后来点了按钮就求上帝保佑不要再出错，每次失败还得重填，让你急的想把电脑砸了！！！！！这就是 50 亿美元做出来的网站。那个医疗保险我从来没用过，每个月却花费超过 400 刀。有次走在路上被一条贱狗抓了一爪，我担心有狂犬病，只好找了个破烂的“urgent care”地方，自己花钱让护士给打了个破伤风针就走人。正式的医院和诊所根本不敢去，去了非得黑宰你几百刀不可，而这保险必须要你花费几千刀之后才生效！就像 Trump 说的，&lt;a href=&quot;https://www.youtube.com/watch?v=OCabT_O0YSM&amp;amp;t=1203&quot;&gt;你必须被拖拉机给撞了，才能用 ObamaCare！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;遇到了如此严重的问题，你说人民会怎样？就像你生了疑难病症，要动很大的手术。你选择医生时，会只看网站上的好评数吗？你不仅要看别人的评语，肯定还得亲自去跟他谈，你还得看他的眼神和语气，感觉一下他会不会骗你，看看他对自己的技术有没有信心。你还得看他以前的成功案例，甚至打电话去问那些人现在感觉如何…… 这样货比三家之后，还要想它一两个月，然后才能决定。出现了生存问题的人就是这样，他们会非常小心的研究之后，亲眼看看那个人的临场表现，进行各种背景调查，然后才做出选择。媒体说这人怎么样，他们只是作为参考而已。&lt;/p&gt;

&lt;p&gt;Trump 早在 35 年前就看见了美国的这些问题，真是看不下去了，想解决它，这是真真切切用摄像机记录下来的（&lt;a href=&quot;https://www.youtube.com/watch?v=OCabT_O0YSM&quot;&gt;视频&lt;/a&gt;）。他要想当总统，犯不着在 35 年前就开始给你演戏吧？从 1980 年开始，每次有人问他想不想当美国总统，他总是说：“我不想。但我相信有其他人可以做这工作，美国有很多有才能的人……” 有一次提问者笑道：“你是嫌做总统工资不够高吧？:)”  Trump 早就知道美国有严重的问题，然而却一直在等其他人去解决它，等了 35 年！可惜直到 2015 年，他等的那个人始终没有出现，倒是出现一连串的战争贩子……&lt;/p&gt;

&lt;p&gt;他已经不再相信会有其他人会真的去解决美国的问题，所以才决定出山，参加竞选。这跟那些从哈佛耶鲁之类的“青年政治学院”毕业的职业政客，是完全不同的态度。这些人一毕业就在政界混迹，拉帮结派，处心积虑，不择手段争夺高位，为的就是谋取不可告人的利益。政客的演讲都是一种表演，跟差劲的演员没什么区别。然而从 Trump 的各种演讲，你看得出来那是真心的。当他说“Make America great again！” 就像马丁路德金在说“I have a dream！” 还有许多受到过他帮助的人，他们的&lt;a href=&quot;http://cj.sina.com.cn/article/detail/2949462582/98422&quot;&gt;亲身故事&lt;/a&gt;，有着非常强大的说服力。这就是为什么虽然 Trump 有时候嘴那么“臭”，大部分的美国人民还是选择了他。忠言逆耳，就是这个道理。&lt;/p&gt;

&lt;p&gt;Trump 的胜利，显示出了民主的力量。美国的历届大选闹剧，让我都不怎么相信民主了。可是它在危机的关头，还真的起了作用……&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">why-trump</guid>
<pubDate>Mon, 14 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>与希拉里支持者的对话</title>
<link>http://yinwang.org/blog-cn/2016/11/13/hillary-supporter</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;与希拉里支持者的对话&lt;/h2&gt;
                            &lt;p&gt;加州可谓是希拉里和民主党的天下，大选时希拉里支持率高达 62%。民主党在加州尽做恶心事，什么 AA 法案啊，厕所法案啊…… 希拉里被曝那么严重的绯闻，加州人还对她执迷不悟，真是让我匪夷所思。现在我来记录一下我跟一些希拉里支持者的对话。这些人基本上是美籍华裔女性，在美国念的高中和本科。她们的信息来源，主要是美国各大媒体，以及微信朋友圈之类。大部分人从来没有上 YouTube 直接看过各个竞选人完整的言论，没有亲自做过调查，光靠道听途说和媒体宣传，就做出投票选择。&lt;/p&gt;

&lt;h3&gt;对话一&lt;/h3&gt;

&lt;p&gt;有个女生找工作，非常艰难才找到。找到之后，公司居然钻法律空子，只给了她两年的 contractor 职位。这样就可以压低工资，而且可以不给她办医保。本来法律不允许这么长时间的 contractor 职位，两年本来只能给“永久职位”，必须要有医疗保险和其它福利。这属于损害雇员利益的行为，然而这公司找了一个专门雇佣 contractor 的中介公司，把她挂靠在那个地方。这样由于美国法律的漏洞，没有人管得着。由于臭名昭著的 ObamaCare 的强制规定，虽然她身体健康不易生病，却不可以不买医保，否则年底退税的时候要罚款。由于公司不给买医保，所以只好每个月自己掏钱买。这是很大的一笔开销，而且 ObamaCare 由于 deductible 非常高，所以买了等于没有买。&lt;/p&gt;

&lt;p&gt;这是一个实力雄厚的美国大公司，名字就不提了，盈利非常好，可是居然还这样抠门乱整。大选时，这妹纸投了希拉里的票，并且动情的在朋友圈宣扬，和朋友们吃着有民主党徽标的蛋糕，说：“我们选择了她！” 仿佛这选举就是男人和女人的斗争，所以必须支持女人似的。可惜最后 Trump 胜利了，于是悲伤欲绝，说 Trump 会把我们都赶出美国的，怎么办！我跟她说，你被美国社会整的这么惨，怎么还去选希拉里？她代表的就是这种邪恶的大公司，大银行，剥削阶级的利益，而且她是一个战争贩子。她上台了，你们以后找工作肯定越来越困难，很难活下去的。相反，Trump 会对失业问题提出解决方案，他也许真能办成一些事情。她说：“我不可能选 Trump，因为他名声那么差，而且完全没有政治经验。选他的人都是住在美国中部，教育程度低，找不到工作的白人……”&lt;/p&gt;

&lt;p&gt;“找不到工作的白人”…… 她仿佛忘了自己找工作有多难，找到了还被欺负，得不到应有的福利。她其实跟中部找不到工作的白人是一类人，跟我也是一类人，都属于被欺压最严重的中产阶级。这些人本应该团结起来，维护自己的权益。然而由于她在高中和大学受到美国式的洗脑教育，所以相当的“左”，换个不大好听的词，就是有“奴性”。她仿佛认为国家都是为大家好的，公司领导都是有水平，讲道理的，跟领导有矛盾肯定是自己的错，找不到工作都是自己能力不够好，是可耻的事情，不可以抱怨社会，要心存感激…… 被美国教育洗脑过的人，一般都不会觉悟到，找不到工作，很多时候是社会制度不公平造成的，美国社会制度有非常严重的问题。&lt;/p&gt;

&lt;p&gt;世界上的工作大量的被机器取代，根本没有那么多事情给人做，而且很多美国公司为了赚取更多的暴利，把大量工作转移到海外，节省劳力开销。本来每个人应该都有工作，而且每天只需要工作很短的时间，可事实却是很多人失业了，剩下的人继续做长时间的工作。所以是社会制度应该改革，而不是人应该更努力。但“没工作就是可耻”这种思想，在美国如此根深蒂固，你是有理也说不清。她现在暂时有了工作，所以忽然间忘了自己是谁。于是乎，她的话在我的耳朵里就等价于：“只有可耻（找不到工作）的人，才会支持 Trump。”&lt;/p&gt;

&lt;p&gt;生活在社会底层，却打心眼里认为自己是上等人，瞧不起跟她一样的普通民众。总被人欺负，居然还投票给欺负她的人做总统，这是多么可悲的事情。被她歧视的，投票给 Trump 的人是什么样子的呢？给你们看其中一位：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/truck-driver.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;73 岁的卡车司机。曾经投票给奥巴马，投了两次给克林顿，却发现生活越来越困苦。这次当然不投希拉里了，因为这帮人代表着反人民的旧势力。如果这种人再次上台，他们一定会继续榨干人民身上的一切，然后无情的抛弃。我们和这位卡车司机一样，都是一样的命运。各位 IT人士，不要以为自己现在有工作，有不错的收入，就忘了自己是谁。让希拉里上台，这种恶性循环就会继续，同样的事情终究会轮到我们自己！&lt;/p&gt;

&lt;h3&gt;对话二&lt;/h3&gt;

&lt;p&gt;另一个女生，最近老在朋友圈贴美国的暴乱事件，或者歧视华人事件的新闻，一副人心惶惶的气氛。大部分此类新闻来源不明，无法验证其真实性。其中一条新闻说：“由于某些中国人支持 Trump，所以 Trump 获胜之后，敌对 Trump 的人发动暴乱，砸了烧了这些 Trump 支持者的店铺。” 看到这里，我还以为她对希拉里有意见，因为如果真有此事的话，就应该是希拉里的支持者干的，就是一群暴徒嘛。&lt;/p&gt;

&lt;p&gt;可是这妹纸对此的评论，却让人大跌眼镜：“看吧，Trump 还没上台呢，美国就大乱了！他就是下一个希特勒！” 我说：“你想清楚了没有？Trump 的支持者店铺被砸，按逻辑应该是希拉里的支持者恼羞成怒，或者受人指使干的。这种流氓行为，应该说希拉里是下一个希特勒还差不多。怎么可能怪到 Trump 头上？” 结果她说：“不是 Trump 的人砸的难道是你砸的？Trump 支持者就不可以砸 Trump 支持者的店了吗！”&lt;/p&gt;

&lt;p&gt;我无语，无法跟她辩论，因为她不遵循理性和逻辑，被希拉里的各种媒体宣传完全的洗脑了。这就像在说，中国人砸了日本车，肯定是日本车的错一样 :P “Trump 是下一个希特勒”，这种信息在网络上到处传播，就可能进入更多类似人的头脑。这些人喜欢不经思考和取证，就直接接受别人告诉他的结论。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">hillary-supporter</guid>
<pubDate>Sun, 13 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>美国的新总统</title>
<link>http://yinwang.org/blog-cn/2016/11/09/trump</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;美国的新总统&lt;/h2&gt;
                            &lt;p&gt;一觉醒来，发现 Trump 已经当选成为美国的下一任总统。很多人都很吃惊，然而这却是我意料之中的事情。其实在大选一开头的时候，我就猜到很可能是 Trump，而且他也许是个不错的总统。作为一个外国人，我不是特别关心美国政治，然而打心眼里，我一直比较希望 Trump 取胜。为什么呢？原因很简单：直觉。&lt;/p&gt;

&lt;p&gt;凭直觉我就看出来，Trump 嘴里说的就是他心里想的，而不是按其他人给他写的稿子念的。没有煽情，没有说教。很明显，他不是政客出身，不是哈佛耶鲁毕业，不怎么会撒谎。他不缺钱不缺地位不缺女人，所以不会被各种贪得无厌的财团操纵。一开头我就觉得，这家伙是真想做一番事情的，而他的目的，是为了社会变得更好，人民更加幸福。&lt;/p&gt;

&lt;p&gt;美国总统这破工作，很多人都不想做，送给我都不要。成天明争暗斗的，说不定哪天就被暗杀了。可就有那么一个人，过着国王一样的奢华生活，住着宫殿一样的房子，被&lt;a href=&quot;https://www.youtube.com/watch?v=4JxYuRHMW5o&quot;&gt;超级名模&lt;/a&gt;和&lt;a href=&quot;https://youtu.be/-zGpcbWqGE0?t=610&quot;&gt;选美小姐&lt;/a&gt;们围绕，他却忽然想要来收拾美国这烂摊子，住进监狱一样戒备森严的白房子。这是什么样的精神？这是对现状实在看不下去了，忍无可忍，只好&lt;a href=&quot;https://www.youtube.com/watch?v=OCabT_O0YSM&quot;&gt;挺身而出&lt;/a&gt;的精神 :P&lt;/p&gt;

&lt;p&gt;很多人不喜欢他，可我看了他几段视频之后，就打心眼里欣赏这人。因为他说的就是他想的，率真可爱！在叙利亚难民问题，欧洲恐怖事件，San Bernardino 枪击大屠杀出现的时候，他的反应跟奥巴马希拉里之类的伪君子，是完全不一样的。他知道如何正确地保护本国人民，从来不试图表现得“政治正确”，不怕得罪人。&lt;/p&gt;

&lt;p&gt;可惜讨厌他，歧视他，奚落他的人太多了，甚至有人说要在万圣节打扮成 Trump 的模样，…… 所以我在同事朋友面前，都不敢明显表现出对 Trump 的赞同，以至于他们以为我跟他们一样讨厌 Trump，这是一个多么可悲的世界。我不明白这些人为什么会讨厌 Trump。他们讨厌他，仿佛只是因为其他人讨厌他，所以就被传染了，自己也说不清楚原因。这就是所谓“无缘无故的恨”吧。&lt;/p&gt;

&lt;p&gt;然而，大部分美国人民终究还是厌倦了各种能说会道，挂着羊头卖狗肉的政客…… 我在看着你，奥巴马。你那名义上帮助人，其实害了人的“医疗改革计划”，甚至想让叙利亚难民进入美国而不经过严格身份审查。政客（politician）最在行的事情是什么？是说谎，是两面三刀，拉拢关系。政客都是被各种利益财团操纵，为他们的利益服务，让人民受苦的傀儡而已。&lt;/p&gt;

&lt;p&gt;希拉里，当然一看就是政客，他们全家都是政客。政客的本质，不会因为性别而有所不同。很多人因为希拉里是女的而选她，希望会有所不同，别做梦了。这种人只“信仰”那些可以让他赢得选举的东西，所以总是见风使舵。奥巴马是美国第一个黑人总统，他做了什么好事吗？他根本就不配做总统。第一个女总统，那又能怎样。看人要看他的本质，而不是性别，种族，年龄一类肤浅的表面特征。&lt;/p&gt;

&lt;p&gt;如果你想了解希拉里的本质，请参考&lt;a href=&quot;https://view.inews.qq.com/a/20160725A015E000&quot;&gt;泄露出来的民主党机密 email&lt;/a&gt;。据我亲自上 WikiLeaks 搜索，发现这些 email 全都存在并且内容属实。希拉里团队为了抹黑 Trump，制造虚假广告，在社交媒体散步负面谣言抹黑 Trump，操纵 NBC 和华盛顿邮报等媒体，而且对同为民主党的 Sanders 猛下黑手。Sanders 和 Trump 都维护人民权益，而希拉里代表的是黑暗的压迫阶级。当然，她的幕后指使者们不能让 Sanders 和 Trump 上台。&lt;/p&gt;

&lt;p&gt;奥巴马毕业于哈佛，希拉里毕业于耶鲁。哈佛耶鲁这样的大学，还有一些类似 Wellesley 的“精英学校”，就是职业撒谎者的摇篮。培养出来的就是特别会说，嘴上一套，互相勾结的傀儡政客。这些学校的所谓“教育”，也就是美国沦落到今天的地步的重要原因。美国的政界，大学和公司，充满了各种各样，能说会道的政客，全靠嘴皮子干活。什么口号能让自己升官，就喊什么口号。很多中国人还在继续膜拜这些“世界一流大学”，做梦都想把孩子送去这种学校。醒醒吧！&lt;/p&gt;

&lt;p&gt;我不能说我是 Trump 的支持者，但随着对他了解的增加，我越来越觉得我们是同类。他看明白了美国存在的严重问题，而且他想到了解决的方案。我觉得他很可能就是美国命运的转折点，至少是转折的开始。也许美国就是不可救药的国家，但这总比放任它不管好。选希拉里一定是错的，她跟奥巴马和其他政客不会有什么不同。他们只会空喊口号，拉拢各方面的选票，最后什么事都不会做，甚至让事情变得更糟。&lt;/p&gt;

&lt;p&gt;很多人讨厌 Trump 都是听了其他人歪曲的言论，不假思索就断定他是坏人。Trump 的敌人，是那些为富不仁，贪得无厌，危害社会的人。这些人为了维护他们不应有的暴利，当然要花费巨额的资金，操纵各种媒体来歪曲和污蔑 Trump，把美国大选搞成一出闹剧。所以你就在网上看到有人断章取义，说 Trump 是个疯子，Trump 是种族主义者，Trump 性别歧视…… 但你根本不知道他具体是怎么说的，他是在什么样的情况下说的。如果你仔细翻看民主党的 email，会发现这些很多都是他们一手抹黑的。&lt;/p&gt;

&lt;p&gt;我看了一些他有争议的言论，包括那些关于穆斯林问题的，回去找到上下文，连起来发现他说的其实一点都没错。具体的分析，请参考我的另一篇&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/16/media-distortion&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所以为了全面的了解一个人的为人，我建议你们直接看看他说了什么，而不要听别人的传言。我建议大家看一下这个&lt;a href=&quot;https://www.youtube.com/watch?v=OCabT_O0YSM&quot;&gt;视频&lt;/a&gt;和&lt;a href=&quot;http://cj.sina.com.cn/article/detail/2949462582/98422&quot;&gt;文章&lt;/a&gt;。看完之后也许你会发现，Trump 是真正关爱社会的人，他想解决美国的社会问题，已经想了 35 年，才走出竞选总统这一步。35年，也就是他的半个人生了。他不像其它政客出身的候选人，有着各种不可告人的动机和幕后操纵者。&lt;/p&gt;

&lt;p&gt;在这个风和日丽的日子，美国迎来了第一个不是政客的总统，一线希望。Trump，收拾美国这烂摊子任重而道远，面对强大的反人民势力，肯定有很多阻力和艰险。希望你不要辜负大家的希望，让美国人民过上幸福的日子！多保重！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">trump</guid>
<pubDate>Wed, 09 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>C 编译器优化过程中的 Bug</title>
<link>http://yinwang.org/blog-cn/2016/10/12/compiler-bug</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;C 编译器优化过程中的 Bug&lt;/h2&gt;
                            &lt;p&gt;一个朋友向我指出一个最近他们发现的 GCC 编译器优化过程（加上 -O3 选项）里的 bug，导致他们的产品出现非常诡异的行为。这使我想起以前见过的一个 GCC bug。当时很多人死活认为那种做法是正确的，跟他们说不清楚。简言之，这种有问题的优化，喜欢利用 C 语言的“未定义行为”（undefined behavior）进行推断，最后得到奇怪的结果。&lt;/p&gt;

&lt;p&gt;这类优化过程的推理方式都很类似，他们使用一种看似严密而巧妙的推理，例如：“现在有一个整数 &lt;code&gt;x&lt;/code&gt;，我们不知道它是多少。但 &lt;code&gt;x&lt;/code&gt; 出现在一个条件语句里面，如果 &lt;code&gt;x &amp;gt; 1&lt;/code&gt;，那么程序会进入未定义行为，所以我们可以断定 &lt;code&gt;x&lt;/code&gt; 的值必然小于或者等于 1，所以现在我们利用 &lt;code&gt;x ≤ 1&lt;/code&gt; 这个事实来对相关代码进行优化……”&lt;/p&gt;

&lt;p&gt;看似合理，然而它却是不正确的，你能看出来这样的推理错在何处吗？我一时想不起来之前具体的例子了（如果你知道的话告诉我）。上网搜了一下相关话题，发现这篇 Chris Lattner (LLVM 和 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;Swift 语言&lt;/a&gt; 的设计者) 写于 2011 年的&lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;文章&lt;/a&gt;。文中指出，编译器利用 C 语言的“未定义行为”进行优化，是合理的，对于性能是很重要的，并且举出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check(int *P) {
  int dead = *P;
  if (P == 0)
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这例子跟我之前看到的 GCC bug 不大一样，但大致是类似的推理方式：这个函数依次经过这样两个优化步骤（RNCE 和 DCE），之后得出“等价”的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE(int *P) {
  int dead = *P;
  if (false)  // P 在上一行被访问，所以这里 P 不可能是 null
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE_and_DCE(int *P) {
  //int dead = *P;    // 死代码消除
  //if (false)        // 死代码
  //  return;         // 死代码
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的推理方式是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先，因为在 &lt;code&gt;int dead = *P&lt;/code&gt; 里面，指针 &lt;code&gt;P&lt;/code&gt; 的地址被访问，如果程序顺利通过了这一行而没有出现未定义行为（比如当掉），那么之后 &lt;code&gt;P&lt;/code&gt; 就不可能是 null，所以我们可以把 &lt;code&gt;P == 0&lt;/code&gt; 优化为 &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;因为条件是 &lt;code&gt;false&lt;/code&gt;，所以整个 if 语句都是死代码，被删掉。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dead&lt;/code&gt; 变量赋值之后，没有被任何其它代码使用，所以对 &lt;code&gt;dead&lt;/code&gt; 的赋值是死代码，可以消去。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;最后函数就只剩下一行代码 &lt;code&gt;*P = 4&lt;/code&gt;。然而经我分析，发现这个优化转换是根本错误的做法（unsound 的变换），而不只是像他说的“存在安全隐患”。现在我来考考你，你知道这为什么是错的吗？值得庆幸的是，现在如果你把这代码输入到 Clang，就算加上 -O3 选项，它也不会给你进行这个优化。这也许说明 Lattner 的这个想法后来已经被 LLVM 团队抛弃。&lt;/p&gt;

&lt;p&gt;我写这篇文章的目的其实是想告诉你，不要盲目的相信编译器的作者们做出的变换都是正确的，无论它看起来多么的合理，只要打开优化之后你的程序出现奇葩的行为，你就不能排除编译器进行了错误优化的可能性。Lattner 指出这样的优化完全符合 C 语言的标准，这说明就算你符合国际标准，也有可能其实是错的。有时候，你是得相信自己的直觉……&lt;/p&gt;

&lt;p&gt;（文中提出的两个问题，欢迎来信讨论，或者在两星期之后等待答案。）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">compiler-bug</guid>
<pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>对 Rust 语言的分析</title>
<link>http://yinwang.org/blog-cn/2016/09/18/rust</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;对 Rust 语言的分析&lt;/h2&gt;
                            &lt;p&gt;Rust 是一门最近比较热的语言，有很多人问过我对 Rust 的看法。由于我本人是一个语言专家，实现过几乎所有的语言特性，所以我不认为任何一种语言是新的。任何“新语言”对我来说，不过是把早已存在的语言特性（或者毛病），挑一些出来放在一起。所以一般情况下我都不会去评论别人设计的语言，甚至懒得看一眼，除非它历史悠久（比如像 C 或者 C++），或者它在工作中惹恼了我（像 Go 和 JavaScript 那样）。这就是为什么这些人问我 Rust 的问题，我一般都没有回复，或者一笔带过。&lt;/p&gt;

&lt;p&gt;不过最近有点闲，我想既然有人这么热衷于这种新语言，那我还是稍微凑下热闹，顺便分享一下我对某些常见的设计思路的看法。所以这篇文章虽然是在评论 Rust 的设计，它却不只是针对 Rust。它是针对某些语言特性，而不只是针对某一种语言。&lt;/p&gt;

&lt;p&gt;由于我这人性格很难闭门造车，所以现在我只是把这篇文章的开头发布出来，边写边更新。所以你要明白，这只是一个开端，我会按自己理解的进度对这篇文章进行更新。你看了之后，可以隔一段时间再回来看新的内容。如果有特别疑惑的问题，也可以发信来问，我会汇总之后把看法发布在这里。&lt;/p&gt;

&lt;h3&gt;变量声明语法&lt;/h3&gt;

&lt;p&gt;Rust 的&lt;a href=&quot;https://doc.rust-lang.org/book/variable-bindings.html&quot;&gt;变量声明&lt;/a&gt;跟 Scala 和 Swift 的很像。你用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的构造来声明一个新的变量。大部分时候 Rust 可以推导出变量的类型，所以你不一定需要写明它的类型。如果你真的要指明变量类型，需要这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x: i32 = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我看来这是丑陋的语法。本来语义是把变量 x 绑定到值 8，可是 x 和 8 之间却隔着一个“i32”，看起来像是把 8 赋值给了 i32……&lt;/p&gt;

&lt;p&gt;变量缺省都是不可变的，也就是不可赋值。你必须用一种特殊的构造&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来声明可变变量。这跟 Swift/Scala 的 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;var&lt;/code&gt; 的区别是一样的，只是形式不大一样。&lt;/p&gt;

&lt;h3&gt;变量可以重复绑定&lt;/h3&gt;

&lt;p&gt;Rust 的变量定义有一个比其它语言更奇怪的地方，它可以让你在同一个作用域里面“重复绑定”同一个名字，甚至可以把它绑定到另外一个类型：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x: i32 = 1;
x = 7;
let x = x; // 这两个 x 是两个不同的变量

let y = 4;
// 30 lines of code ...
let y = &quot;I can also be bound to text!&quot;;
// 30 lines of code ...
println!(&quot;y is {}&quot;, y);      // 定义在第二个 let y 的地方
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Yin 语言最初的设计里面，我也是允许这样的重复绑定的。第一个 y 和 第二个 y 是两个不同的变量，只不过它们碰巧叫同一个名字而已。你甚至可以在同一行出现两个 x，而它们其实是不同的变量！这难道不是一个很酷，很灵活，其他语言都没有的设计吗？后来我发现，虽然这实现起来没什么难度，可是这样做不但没有带来更大的方便性，反而可能引起程序的混淆不清。在同一个作用域里面，给两个不同的变量起同一个名字，这有什么用处呢？自找麻烦而已。&lt;/p&gt;

&lt;p&gt;比如上面的例子，在下面我们看到一个对变量 &lt;code&gt;y&lt;/code&gt; 的引用，它是在哪里定义的呢？你需要在头脑中对程序进行“数据流分析”，才能找到它定义的位置。从上面读起，我们看到 &lt;code&gt;let y = 4&lt;/code&gt;，然而这不一定是正确的定义，因为 &lt;code&gt;y&lt;/code&gt; 可以被重新绑定，所以我们必须继续往下看。30 行代码之后，我们看到了第二个对 &lt;code&gt;y&lt;/code&gt; 的绑定，可是我们仍然不能确定。继续往下扫，30行代码之后我们到了引用 &lt;code&gt;y&lt;/code&gt; 的地方，没有再看到其它对 &lt;code&gt;y&lt;/code&gt; 的绑定，所以我们才能确信第二个 let 是 &lt;code&gt;y&lt;/code&gt; 的定义位置，它是一个字符串。&lt;/p&gt;

&lt;p&gt;这难道不是很费事吗？更糟的是，这种人工扫描不是一次性的工作，每次看到这个变量，你都要疑惑一下它是什么东西，因为它可以被重新绑定，你必须重新确定一下它的定义。如果语言不允许在同一个作用域里面重复绑定同一个名字，你就根本不需要担心这个事情了。你只需要在作用域里面找到唯一的那个 &lt;code&gt;let y = ...&lt;/code&gt;，那就是它的定义。&lt;/p&gt;

&lt;p&gt;也许你会说，只有当有人滥用这个特性的时候，才会导致问题。然而语言设计的问题往往就在于，一旦你允许某种奇葩的用法，就一定会有人自作聪明去用。因为你无法确信别人是否会那样做，所以你随时都得提高警惕，而不能放松下心情来。&lt;/p&gt;

&lt;h3&gt;类型推导&lt;/h3&gt;

&lt;p&gt;另外一个很多人误解的地方是类型推导。在 Rust 和 C# 之类的语言里面，你不需要像 Java 那样写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;int x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样显式的指出变量的类型，而是可以让编译器把类型推导出来。比如你写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;  // x 的类型推导为 i32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译器的类型推导就可以知道 &lt;code&gt;x&lt;/code&gt; 的类型是 i32，而不需要你把“i32”写在那里。这似乎是一个很方便的东西。然而看过很多 C# 代码之后你发现，这看似方便，却让程序变得不好读。在看 C# 代码的时候，我经常看到一堆的变量定义，每一个的前面都是 var。我没法一眼就看出它们表示什么，是整数，bool，还是字符串，还是某个用户定义的类？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;var correct = ...;
var id = ...;
var slot = ...;
var user = ...;
var passwd = ...;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我需要把鼠标移到变量上面，让 Visual Studio 显示出它推导出来的类型，可是鼠标移开之后，我可能又忘了它是什么。有时候发现看同一片代码，都需要反复的做这件事，鼠标移来移去的。而且要是没有 Visual Studio，用其它编辑器，或者在 github 上看代码或者 code review 的时候，你就得不到这种信息了。很多 C# 程序员为了避免这个问题，开始用很长的变量名，把类型的名字加在变量名字里面去，这样一来反而更复杂了，却没有想到直接把类型写出来。所以这种形式的类型推导，看似先进或者方便，其实还不如直接在声明处写下变量的类型，就像 Java 那样。&lt;/p&gt;

&lt;p&gt;所以，虽然 Rust 在变量声明上似乎有更灵活的设计，然而我觉得 C 和 Java 之类的语言那样看似死板的方式其实更好。我建议不要使用 Rust 变量的重复绑定，避免使用类型推导，尽量明确的写出类型，以方便读者。如果你真的在乎代码的质量，就会发现大部分时候你的代码的读者是你自己，而不是别人，因为你需要反复的阅读和提炼你的代码。&lt;/p&gt;

&lt;h3&gt;动作的“返回值”&lt;/h3&gt;

&lt;p&gt;Rust 的文档说它是一种“&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#expressions-vs-statements&quot;&gt;大部分基于表达式&lt;/a&gt;”的语言，并且给出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut y = 5;
let x = (y = 6);  // x has the value `()`, not `6`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;奇怪的是，这里变量 &lt;code&gt;x&lt;/code&gt; 会得到一个值，空的 tuple，&lt;code&gt;()&lt;/code&gt;。这种思路不大对，它是从像 OCaml 那样的语言照搬过来的，而 OCaml 本身就有问题。在 OCaml 里面，如果你使用 &lt;code&gt;print_string&lt;/code&gt;，那你会得到如下的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;print_string &quot;hello world!\n&quot;;;

hello world!
- : unit = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，&lt;code&gt;print_string&lt;/code&gt; 是一个“动作”，它对应过程式语言里面的“statement”。就像 C 语言的 &lt;code&gt;printf&lt;/code&gt;。动作通常只产生“副作用”，而不返回值。在 OCaml 里面，为了“理论的优雅”，动作也会返回一个值，这个值叫做 &lt;code&gt;()&lt;/code&gt;。其实 &lt;code&gt;()&lt;/code&gt; 相当于 C 语言的 void。C 语言里面有 void 类型，然而它却不允许你声明一个 void 类型的变量。比如你写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;int main()
{
  void x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序是没法编译通过的（试一试？）。让人惊讶的是，古老的 C 的做法其实是正确的，这里有比较深入的原因。如果你把一个类型看成是一个集合（比如 int 是机器整数的集合），那么 void 所表示的集合是个空集，它里面是不含有任何元素的。声明一个 void 类型的变量是没有任何意义的，因为它不可能有一个值。如果一个函数返回 void，你是没法把它赋值给一个变量的。&lt;/p&gt;

&lt;p&gt;可是在 Rust 里面，不但动作（比如 &lt;code&gt;y = 6&lt;/code&gt; ）会返回一个值 &lt;code&gt;()&lt;/code&gt;，你居然可以把这个值赋给一个变量。其实这是错误的作法。原因在于 &lt;code&gt;y = 6&lt;/code&gt; 只是一个“动作”，它只是把 6 放进变量 y 里面，这个动作发生了就发生了，它根本不应该返回一个值，它不应该可以出现在 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 的右边。就算你牵强附会说 &lt;code&gt;y = 6&lt;/code&gt; 的返回值是 &lt;code&gt;()&lt;/code&gt;，这个值是没有任何用处的。更不要说使用空的 tuple 来表示这个值，会引起更大的类型混淆，因为 &lt;code&gt;()&lt;/code&gt; 本身有另外的，更有用的含义。&lt;/p&gt;

&lt;p&gt;你根本就不应该可以写 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 这样的代码。只有当你犯错误或者逻辑不清晰的时候，才有可能把 &lt;code&gt;y = 6&lt;/code&gt; 当成一个值来用。Rust 允许你把这种毫无意义的返回值赋给一个变量，这种错误就没有被及时发现，反而能够通过变量传播到另外一个地方去。有时候这种错误会传播挺远，然后导致问题（运行时错误或者类型检查错误），可是当它出问题的时候，你就不大容易找到错误的起源了。&lt;/p&gt;

&lt;p&gt;这是很多语言的通病，特别是像 JavaScript 或者 PHP 之类的语言。它们把毫无意义或者牵强附会的结果（比如 undefined）到处传播，结果使错误很难被发现和追踪。&lt;/p&gt;

&lt;h3&gt;return 语句&lt;/h3&gt;

&lt;p&gt;Rust 的设计者似乎很推崇“面向表达式”的语言，所以在 Rust 里面你不需要直接写“return”这个语句。比如，这个&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#early-returns&quot;&gt;例子&lt;/a&gt;里面，你可以直接这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn add_one(x: i32) -&amp;gt; i32 {
    x + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回函数里的最后一个表达式，而不需要写 return 语句，这是函数式语言共有的特征。然而其实我觉得直接写 return 其实是更好的作法，像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo(x: i32) -&amp;gt; i32 {
    return x + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编程有一个容易引起问题的作法，叫做“不够明确”，总想让编译器自动去处理一些问题，在这里也是一样的问题。如果你隐性的返回函数里最后一个表达式，那么每一次看见这个函数，你都必须去搞清楚最后一个表达式是什么，这并不是每次都那么明显的。比如下面这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    println!(&quot;{}&quot;, add_one(7));
}

fn add_one(x: i32) -&amp;gt; i32 {
  if (x &amp;lt; 5) {
      if (x &amp;lt; 10) {
        // 做很多事...
        x * 2
      } else {
        // 做很多事...
        x + 1
      }
  } else {
    // 做很多事...
    x / 2
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 if 语句里面有嵌套，每个分支又有好些代码，而且 if 语句又是最后一个语句，所以这个嵌套 if 的三个出口的最后一个表达式都是返回值。如果你写了“return”，那么你可以直接看有几个“return”，或者拿编辑器加亮一下，就知道这个函数有几个出口。然而现在没有了“return”这个关键字，你就必须把最后那个 if 语句自己看清楚了，找到每一个分支的“最后表达式”。很多时候这不是那么明显，你总需要找一下，而且这件事在读代码的时候总是反复做。&lt;/p&gt;

&lt;p&gt;所以对于返回值，我的建议是总是明确的写上“return”，就像第二个例子那样。Rust 的文档说这是“poor style”，那不是真的。有一个例外，那就是当函数体里面只有一条语句的时候，那个时候没有任何歧义哪一个是返回表达式。&lt;/p&gt;

&lt;p&gt;这个问题类似于重复绑定变量和类型推导的问题，属于一种“用户体验设计”问题。无论如何，编译器都很容易实现，然而不同样式的代码，对于人类阅读的工作量，是很不一样的。很多时候最省人力的做法并不是那种看来最聪明，最酷，打字量最少的办法，而是写得最明确，让读者省事的办法。人们常说，代码读的时候比写的时候多得多，所以要想语言好用省事，我们应该更加重视读的时候，而不是写的时候。&lt;/p&gt;

&lt;h3&gt;数组的可变性&lt;/h3&gt;

&lt;p&gt;Rust 的数组可变性标记，跟 Swift 犯了一样的错误。Swift 的问题，我已经在之前的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;文章&lt;/a&gt;有详细叙述，所以这里就不多说了。简言之，同一个标记能表示的可变性，要么针对数组指针，要么针对数组元素，应该只能选择其一。而在 Rust 里面，你只有一个地方可以放“mut”进去，所以要么数组指针和元素全部都可变，要么数组指针和元素都不可变。你没有办法制定一个不可变的数组指针，而它指向的数组的元素却是可变的。&lt;/p&gt;

&lt;p&gt;请对比下面两个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let m = [1, 2, 3];      // 指针和元素都不可变
    m[0] = 10;              // 出错
    m = [4, 5, 6];          // 也出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let mut m = [1, 2, 3];  // 指针和元素都可变
    m[0] = 10;              // 不出错
    m = [4, 5, 6];          // 也不出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;内存管理&lt;/h3&gt;

&lt;p&gt;Rust 号称实现了非常先进的内存管理机制，不需要垃圾回收（GC）或者引用计数（RC）就可以“静态”的管理内存的分配和释放。然而仔细思考之后你就会发现，这很可能是不切实际的梦想（或者广告）。内存的分配和释放（如果要及时释放的话），本身是一个动态的过程，无法用静态分析来实现。现在你说可以通过一些特殊的构造，特殊的指针和传值方式，静态的决定内存的回收时间，真的有可能吗？&lt;/p&gt;

&lt;p&gt;实际上在 IU 的时候，我有一个类似的梦。我曾经向我的教授们（Friedman，Dybvig）提出过 N 多种不需 GC 和 RC 就能静态管理内存的办法，结果每一次都被他们给我的小例子给打败了，以至于我很难相信有任何人可以想到比 GC 和 RC 更好的方法。&lt;/p&gt;

&lt;p&gt;Rust 那些炫酷的 move semantics, borrowing, lifetime 之类的概念加在一起，不但让语言变得复杂不堪，我感觉并不能从根本上解决内存管理问题。很多人在 blog 里面为这些概念热情洋溢地做宣传，显得自己很懂一样，拿一些玩具代码来演示，可是从没看到任何人说清楚这些东西为什么可以从根本上解决问题，能用到复杂一点的代码里面去。所以我觉得这些东西有“皇帝的新装”之嫌。&lt;/p&gt;

&lt;p&gt;连 Rust 自己的&lt;a href=&quot;https://doc.rust-lang.org/book/ownership.html#meta&quot;&gt;文档&lt;/a&gt;都说，你可能需要“fight with the borrow checker”。为了通过这些检查，你必须用很怪异的方式来写程序，随着问题复杂度的增加，就要求有更怪异的写法。如果用了 lifetime，很简单一个代码看起来就会是这种样子。真够烦的，我感觉我的眼睛都没法 parse 这段代码了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo&amp;lt;&#39;a, &#39;b&amp;gt;(x: &amp;amp;&#39;a str, y: &amp;amp;&#39;b str) -&amp;gt; &amp;amp;&#39;a str {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上一次我看 Rust 文档的时候，没发现有 lifetime 这概念。文档对此的介绍非常粗略，仔细看了也不知道他们在说些什么，更不要说相信这办法真的管用了。对不起，我根本不想去理解这些尖括号里的 &lt;code&gt;&#39;a&lt;/code&gt; 和 &lt;code&gt;&#39;b&lt;/code&gt; 是什么，除非你先向我证明这些东西真的能解决内存管理的问题。实际上这个 lifetime 我感觉像是跨过程静态分析时产生的一些标记，要知道静态分析是无法解决内存管理的问题的，我猜想这种 lifetime 在有递归函数的情况下就会遇到麻烦。&lt;/p&gt;

&lt;p&gt;实际上我最开头看 Rust 的时候，它号称只用 move semantics 和好几种不同的指针，就可以解决内存管理的问题。可是一旦有了那几种不同的指针，就已经复杂不堪了，比 C 语言还要麻烦，而且显然不能解决问题。Lifetime 恐怕是后来发现有新的问题解决不了才加进去的，可是我不知道他们这次是不是又少考虑了某些情况。&lt;/p&gt;

&lt;p&gt;Rust 的设计者显然受了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_logic&quot;&gt;Linear Logic&lt;/a&gt; 一类看似很酷的逻辑的启发和熏陶，想用类似的方式奇迹般的解决内存和资源的回收问题。然而研究过一阵子 Linear Logic 之后我发现，这个逻辑自己都没有解决任何问题，只不过给对象的引用方式施加了一些无端的限制，这样使得对象的引用计数是一个固定的值（1）。内存管理当然容易了，可是这样导致有很多程序你没法表达。&lt;/p&gt;

&lt;p&gt;开头让你感觉很有意思，似乎能解决一些小问题。到后来遇到大一点的实际问题的时候，你就发现需要引入越来越复杂的概念，使用越来越奇葩的写法，才能达到目的，而且你总是会在将来某个时候发现它没法解决的问题。因为这个问题很可能从根本上是无法解决的，所以每当遇到有超越现有能力的事情，你就得增加新的“绕过方法”（workaround）。缝缝补补，破败不堪。最后你发现，除了垃圾回收（GC）和引用计数（RC），内存管理还是没有其它更好更简单的办法。&lt;/p&gt;

&lt;p&gt;当然我的意见也许不是完全准确，可我真是没有时间去琢磨这么多乱七八糟，不知道管不管用的概念（特别是 lifetime），更不要说真的用它来构建大型的系统程序了。有用来理解这些概念，把程序改成奇葩样子的时间，我可能已经用 C 语言写出很好的手动内存管理代码了。如果你真的看进去理解了，发现这些东西可以用的话，告诉我一声！不过你必须说明原因，不要只告诉我“皇帝是穿了衣服的” :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;本来想写一个更详细的评价的，可是到了这个地方，我感觉已经失去兴趣了，困就一个字啊…… Rust 比 C 语言复杂太多，我很难想象用这样的语言来构造大型的操作系统。而构造系统程序，是 Rust 设计的初衷。说真的，写操作系统那样的程序，C 语言真的不算讨厌。用户空间的程序，Java，C# 和 Swift 完全可以胜任。所以我觉得 Rust 的市场空间恐怕非常狭小……&lt;/p&gt;

&lt;p&gt;（如果你喜欢这些内容，请付费5美元或者30人民币，谢谢！）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">rust</guid>
<pubDate>Sun, 18 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>支付宝的身份验证问题</title>
<link>http://yinwang.org/blog-cn/2016/09/16/alipay</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;支付宝的身份验证问题&lt;/h2&gt;
                            &lt;p&gt;我看到有人继续在向我之前的支付宝账号付费。其实现在的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费二维码&lt;/a&gt;已经改成了我父亲的账号，原因是因为支付宝的身份验证问题。&lt;/p&gt;

&lt;p&gt;我的支付宝账号是在国内的时候开通的，支付宝收到的博文付费，都是准备转给家人的。开始收费之后，向家人的账号转了一些钱。支付宝似乎有很严格的防盗验证，我开头不熟悉怕出问题，所以做了几个试验，把钱分成好几次转。最后一次的时候，发现支付宝说需要验证我的身份，还打开手机的相机，要做“人脸验证”。让我左边转一点，右边转一点…… 我的身份证是15年前办的了，当然现在不像了！最后验证没有通过，于是支付功能就被锁定了，再也无法向家人转账。解锁的方法只有联系客服，可是客服电话打了老半天，根本没人接……&lt;/p&gt;

&lt;p&gt;由于这个原因，我不能再用我自己的支付宝账号收费。开通新的账号又需要银行卡验证，而我的国内手机和U盾都丢了…… 国内的银行系统就是这么麻烦。&lt;/p&gt;

&lt;p&gt;所以没办法，只好把我父亲的支付宝二维码放了上去。请大家以后不要再向我的账号付费，直接转账给我父亲就可以了。谢谢！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">alipay</guid>
<pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>测试的道理</title>
<link>http://yinwang.org/blog-cn/2016/09/14/tests</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;测试的道理&lt;/h2&gt;
                            &lt;p&gt;在长期的程序语言研究和实际工作中，我摸索出了一些关于测试的道理。然而在我工作过的每一个公司，我发现绝大多数人都不明白这些道理，很多团队集体性的采用错误的做法而不自知。很多人把测试当成一种主义和教条，进行过度的测试，不必要的测试，不可靠的测试，并且把这些错误的做法传授给新手，造成恶性循环。本来目的是提高代码质量，结果不但没能达到目的，反而降低了代码质量，增大了工作量，大幅度延缓工程进度。&lt;/p&gt;

&lt;p&gt;我也写测试，但我的测试方式比“测试教条主义者”们的方式聪明很多。在我心目中，代码本身的地位大大的高于测试。我不忽视测试，但我不会本末倒置，过分强调测试，我并不推崇测试驱动开发（TDD）。我知道该测试什么，不该测试什么，什么时候该写测试，什么时候不该写，什么时候应该推迟测试，什么时候完全不需要测试。因为这个原因，再加上高强的编程能力，我多次完成别人认为在短时间不可能完成的任务，并且制造出质量非常高的代码。&lt;/p&gt;

&lt;h3&gt;测试的道理&lt;/h3&gt;

&lt;p&gt;现在我就把这些自己领悟到的关于测试的道理总结一下，其中有一些是鲜为人知或者被误解的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要以为你处处显示出“重视代码质量”的态度，就能提高代码质量。总有些人，以为自己知道“单元测试”（unit test），“集成测试”（integration test）这样的名词，就很懂编程，就可以教育其他人。可惜，光有态度和口号是不解决问题的，你还必须有实战的技巧，深入的见解和智慧，必须切实地知道应该怎么做。代码的质量不会因为你重视它就得到提升，也不会因为你采取了措施（比如测试，静态分析）就一定会得到改善。你必须知道什么时候该写测试，什么时候不该写测试，需要写测试的时候，要写什么样的测试。其实，提高代码质量唯一可行的手段不是写测试，而是反复的提炼自己的思维，写简单清晰的代码。如果你想真的提高代码质量，我的文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;』是一个不错的出发点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;真正的编程高手不会被测试捆住手脚。是的，你身边那个你认为“不很在乎测试”的家伙，也许是个比你更好的程序员。我喜欢把编程比喻成开赛车，而测试就是放在路边用来防撞的轮胎护栏……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-a66eb34628e32634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;护栏有时候是很有用，可以救命的，然而一个合格的车手，绝对不会一心想着有护栏保护，测试在编程活动中的地位也应该就是这样。优秀的车手会很快看见优雅而简单的路径，恰到好处地掌握速度和时机，直奔终点而去。护栏只是放在最危险的地段，让你出了意外不要死得太惨。护栏并不能让你成为好的车手，不能让你取得冠军。绝大多数时候，你的安全只有靠自己的技术，而不是护栏，你永远有办法可以撞死自己。测试的作用也是一样，即使有了很多的测试，代码的安全仍然只掌握在你的手里。你永远可以制造出新的 bug，而没有测试可以检测到它……&lt;/p&gt;

&lt;p&gt;通常情况下，一个合格的车手是根本碰不到这些护栏的，他们心里想的是更高的目标：快点到达终点。相比之下，一个不合格的车手，他经常撞到赛道外面去，所以在他的心里，护栏有着至高无上的地位，所以他总是跟别人宣扬护栏的重要性。他开车的时候为了防止犯错，要在他经过的路径两边密密麻麻摆上护栏，甚至把护栏摆到赛道中间，以确保自己的转弯幅度正确。他在护栏之间跌跌撞撞，最后只能算是勉强到达终点。鼓吹测试驱动开发的人，就是这种三流车手，这种人写再多的测试也不可能倒腾出可靠的代码来。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在程序和算法定型之前，不要写测试。TDD 的教条者喜欢跟你说，在写程序之前就应该先写测试。为什么写代码之前要写测试呢？这只是一种教条。这些人其实没有用自己的脑子思考过这个问题，而只是人云亦云，觉得这样“很酷”，符合潮流，或者以为这样做了别人就会认为自己是高手。实际上在程序框架完成，算法定型之前，你都不需要写测试。如果你想知道代码是否正确，用人工方式运行代码，看看结果足以。&lt;/p&gt;

&lt;p&gt;如果你发现编程初期需要保证的性质纷繁复杂，如此之多，不写测试你就没信心的话，那你还是想办法先提高下基本的编程技术吧：多做练习，简化代码，让代码更加模块化，看看我的『编程的智慧』或者『SICP』一类的东西。写测试并不能提高你的水平，正好相反，过早的写测试会捆住你的手脚，让你无法自由的修改代码和算法。如果你不能很快的修改代码，不能用直觉感觉到它的变化和结构，而是因为测试而处处卡顿，你的头脑里就不能产生所谓“&lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology&quot;&gt;flow&lt;/a&gt;)”，就不能写出优雅的代码来，结果到最后你什么也没学会。只有在程序不再需要大幅度的改动之后，才是逐渐加入测试的时候。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要为了写测试而改变本来清晰的编程方式。很多人为了满足“覆盖”（coverage）的要求，为了可以测试到某些模块，或者为了使用 mock，而把本来简单清晰地代码改成更加复杂而混淆的形式，甚至采用大量 reflection。这样一来其实降低了代码的质量。本来很简单的代码，一眼看去就知道是否正确，可是现在你一眼看过去，到处都是为了方便测试而加进去的各种转接插头，再也无法感觉到代码。这些用来辅助测试的代码，阻碍了你对代码进行直觉思维，而如果你不能把代码的逻辑完全映射在头脑里（进而产生直觉），你是很难写出真正可靠的代码的。&lt;/p&gt;

&lt;p&gt;有些 C# 程序员，为了测试而加入大量的 interface 和 reflection，因为这样可以在测试的时候很方便的把一片代码替换成 mock。结果你就发现这程序里每个类都有一个配套的 interface，还需要写另外一个 mock 类，去实现这个 interface。这样一来，不但代码变得复杂难以理解，而且还损失了 Visual Studio 的协助功能：你不再能按一个键（F12）就直接跳转到方法的定义，而需要先跳到对应的 interface 方法，然后再找到正确的实现。所以你不再能够在代码里面快速的跳转浏览。这种方便性的损失，会大幅度降低头脑产生整体理解的机会。而且为了 mock，每一个构造函数调用都得换成一个含有 reflection 的构造，使得编译器的静态类型检查无法确保类型正确，增加运行时出错的可能性，出错信息还难以理解，得不偿失的后果。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要测试“实现细节”，因为那等同于把代码写两遍。测试应该只描述程序需要满足的“基本性质”（比如 sqrt(4) 应该等于 2），而不是去描述“实现细节”（比如具体的开平方算法的步骤）。有些人的测试过于详细，甚至把代码的每个实现步骤都兢兢业业的进行测试：第一步必须做A，第二步必须做B，第三步必须做C…… 还有些人喜欢给 UI 写测试，他们的测试里经常这样写：如果你浏览到这个页面，那么你应该在标题栏看见这行字……&lt;/p&gt;

&lt;p&gt;仔细想一下就会发现，这种作法本质上不过是把代码（或者UI）写了两遍而已。本来代码里面明白写着：先做A，再做B，再做C。UI 描述文件里面明白写着：标题栏里面是这些内容。你有什么必要在测试里把它们全都再检查一遍呢？这根本没有增加任何可靠性：你在代码里会犯错，你把同样的逻辑换种形式再写一遍，难道就不会错了吗？&lt;/p&gt;

&lt;p&gt;这就像某些脑子秀逗的人，他出门时总是担心门没锁好，关门之后要推推拉拉好几次，确认门是锁上了的。还没走几步，他仍然在怀疑门没锁好，又走回去推推拉拉好几次，却始终不能放心 :P 这种做法非但不能保证代码的正确，反而给修改代码制造了障碍。理所当然，你把同一段代码写了两遍，每当要修改代码，你就得修改两次！这样的测试就像紧箍咒一样，把代码压得密不透风。每一次修改代码，都会导致很多测试失败，以至于这些测试都不得不重写。本质上就是把代码修改了两遍，只不过更加痛苦一些。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并不是每修复一个 bug 都需要写测试。很多公司都流传一个常见的教条，就是认为每修复一个 bug，都需要为它写测试，用于确保这个 bug 不再发生。甚至有人要求你这样修复一个 bug：先写一个测试，重现这个 bug，然后修复它，确保测试通过。这种思维其实是一种生搬硬套的教条主义，它会严重的减慢工程的进度，而代码的质量却不会得到提高。写测试之前，你应该仔细的思考一个问题：这个 bug 有多大可能会在同一个地方再次发生？很多低级错误一旦被看出来之后，它就不大可能在同一个地方再次出现。在这种情况下，你只需手工验证一下 bug 消失了就可以。&lt;/p&gt;

&lt;p&gt;为不可能再出现的 bug 大费周折，写 reproducer，构造各种数据结构去验证它，保证它下次不会再出现，其实是多此一举。同样的低级错误就算再出现，也很可能不在同一个地方。写测试不但不能保证它不再发生，而且浪费你很多时间。这测试在每次 build 的时候都会消耗时间，每次编译都因为这些测试多花几分钟，累积起来之后，你就发现工程进度明显减慢。只有当发现已有的测试没有抓住程序必须满足的重要性质时，你才应该写新的测试。你不应该是为这个 bug 而写测试，而是为代码的性质而写测试。这个测试的内容不应该只是防止这个 bug 再次发生，而是要确保 bug 所反映出来的，之前缺失的“性质”得到保证。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免使用 mock，特别是多层的 mock。很多人写测试都喜欢用很多 mock，堆积很多层，以为只有这样才能测试到路径比较深的模块。其实这样不但非常繁琐费事，而且多层的 mock 往往不能产生足够多样化的输入，不能覆盖各种边界情况。如果你发现测试需要进行多层的 mock，那你应该考虑一下，也许你需要的不是 mock，而是改写代码，让它更加模块化。如果你的代码足够模块化，你不应该需要多层的 mock 来测试它。你只需要为每一个模块准备一些输入（包括边界情况），确保它们的输出符合要求。然后你把这些模块像管道一样连接起来，形成一个更大的模块，测试它也符合输入输出要求，以此类推。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要过分重视“测试自动化”，人工测试也是测试。写测试，这个词往往隐含了“自动运行”的含义，也就是假设了要不经人工操作，完全自动的测试。打一个命令，它过一会就会告诉你哪些地方有问题。然而，人们往往忽略了“人工测试”。他们没有意识到，人工去试验，去观察，也是一种测试。所以你就发现这样的情况，由于自动测试在很多时候非常难以构造（比如，如果你要测试一段复杂的交互式GUI代码的响应），很多人花了很多时间，利用各种测试框架和工具，甚至遥控 WEB 浏览器去做一些自动操作，花太多时间却发现各种不可靠，没法测到很多东西。&lt;/p&gt;

&lt;p&gt;其实换一个思路，他们只需要花几分钟的时间，就可以用人工的方式观察到很多深入的问题。过分的重视测试自动化的原因，往往在于一个不切实际的假设，他们假设错误会频繁的再次发生，所以自动化了可以省下人的力气。但是其实，一旦一个 bug 被修好，它反复出现的机会不会很大的。过分的要求测试自动化，不但延缓了工程进度，让程序员恼火，效率低下，而且失去了人工测试的精确性。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免写太长，太耗时的测试。很多人写测试，叽里呱啦很长一串，到后来再看的时候，他已经不记得自己当时想测什么了。有些人本来用很小的输入就可以测试到需要的性质，他却总喜欢给一个很大的输入，下意识的以为这样更加靠谱，结果这测试每次都会消耗大量的 build 时间，而其实达到的效果跟很小的输入没有任何区别。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个测试只测试一个方面，避免重复测试。有些人一个测试测很多内容，结果每次那个测试失败，都搞不清楚到底是哪个部件出了问题。有些人为了“放心”，喜欢在多个测试里面“附带”测某些他认为相关的部件，结果每次那个部件出问题，就发现好多个测试失败。如果一个测试只测一个方面，不重复测同一个部件，那么你就可以很快的根据失败的测试，发现出问题的部件和位置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免通过比较字符串来进行测试。很多人写测试的时候，喜欢通过打印出一些东西，然后使用字符串比较的方式来决定输出是否符合要求。一个常见的做法是把输出打印成格式化的 JSON，然后对比两个文本。甚至有人 JSON 都不用，直接就比较 printf 输出的结果。这种测试是非常脆弱的。因为字符串输出的格式往往会发生微小的变化，比如有人在里面加了一个空格之类的。把这种字符串作为标准输出，进行字符串比较，很容易因为微小的改动而使大量测试失败，导致很多的测试需要做不必要的修改。正确的做法，应该是进行结构化的比较，如果你要把标准结果存成 JSON，那么你应该先 parse 出 JSON 所表示的对象，然后再进行结构化的对比。PySonar2 的测试就是这样的做法，所以相当的稳定。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“测试能帮助后来人”的误区。每当指出测试教条主义的错误，就会有人出来说：“测试不是为了你自己，而是为了你走了以后，以后进来的人不犯错误。” 首先，这种人根本没有看清楚我在说什么，因为我从来没有反对过合理的测试。其次，这种“测试能帮助后来人”，其实是没有经过实践检验，站不住脚的说法。如果你的代码写得很乱，就算你测试再多，后来人也无法理解，反倒被莫名其妙的测试失败给弄得更糊涂，不知道是自己错了还是测试错了。我已经说过了，测试不能完全保证代码不被改错，实际上它们防止代码被改错的作用是非常弱的。无论如何，后来人都必须理解原来的代码的逻辑，知道它在做什么，否则他们不可能做出正确的修改，就算你有再严密的测试也一样。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;   举一个亲身的例子。我在 Google 做出 PySonar 之后，最后一个测试都没写。第二次我回到 Google，我的上司 Steve Yegge 对我说：“你走了之后，我改了一些你的代码，真是太清晰，太好把握了，修改你的代码是一种快乐！” 这说明什么问题呢？我并不是说你可以不写测试，但这个例子说明，测试对于后来人的作用，并不是你有些人想象的那么大。创造清晰的代码才是解决这个问题的关键。&lt;/p&gt;

&lt;p&gt;   这种怕人突然走了，代码无法维护的想法，导致了一些人对测试过分的重视，但测试却不能解决这种问题。相反，如果测试太繁琐，做不必要的测试，反而容易让员工不满，容易走人，去加入在这方面更加有见地的公司。有些公司以为有了测试，就可以随便打发人走，这种想法是大错特错的。你需要明白的一个事情是，代码永远是属于写出它的那个人的，就算有测试也一样。如果核心人物真的走了，就算你有再多的测试也没用的，所以解决的方法就是把他们留住！一个有远见的公司总是通过其他的手段解决这个问题，比如优待和尊重员工，创造良好的氛围，使得他们没那么快想走。另外，公司必须注意知识的传承，防止某些代码只有一个人理解。&lt;/p&gt;

&lt;h3&gt;案例分析&lt;/h3&gt;

&lt;p&gt;有人会疑问，我凭什么可以给别人讲这些经验，我自己为此有什么成功的案例呢？所以现在来讲讲我做过的几个东西，以及我亲眼目睹的测试教条主义者们的失败案例。&lt;/p&gt;

&lt;h4&gt;Google&lt;/h4&gt;

&lt;p&gt;很多人可能听说过我在 &lt;a href=&quot;http://www.yinwang.org/blog-%EF%BC%8Ccn/2014/12/31/google-story&quot;&gt;Google&lt;/a&gt; 做的 PySonar。当时 Google 的队友们战战兢兢，说这么高难复杂的东西要从头做起，几乎是不可能的。特别是某位队友，一开头就吵着要我写测试，一直吵到最后，烦死我了。他们为什么这么担心呢？因为对 Python 做类型推导是非常高难度的代码，需要相当复杂的数据结构和算法，需要精通 Python 的语义实现。&lt;/p&gt;

&lt;p&gt;作为一个训练有素的专家，我没有在乎他们的咋呼，没有信他们的教条。我按照自己的方式组织代码，进行精密的思考，设计和推理，最终在三个月之内做出了非常优雅，正确，高性能，而又容易维护的代码。PySonar 到现在仍然是世界上最先进的 Python 类型推导和索引系统，被多家公司采用，用于处理数以百万计的 Python 代码。，&lt;/p&gt;

&lt;p&gt;如果我当时按照 Google 队友的要求，采用已有的开源代码，或者过早的写了测试，别说无法在三个月的实习时间之内完成这个东西，就算折腾好几年也没有可能。&lt;/p&gt;

&lt;h4&gt;Shape Security&lt;/h4&gt;

&lt;p&gt;这种思维方式最近的成功实例，是给 Shape Security 做的一个先进的 JavaScript 混淆器（obfuscator）和对集群（cluster）管理系统的改进。不要小看了这个 JS 混淆器，它的混淆能力要比 uglify 之类的开源工具强很多，也快很多。它不但包含了 uglify 的变量换名等基本功能，而且含有专门针对人类和编译器的复杂化，使得没人能看出一点线索这个程序到底要干什么，让最先进的 JS 编译器也无法把它简化。&lt;/p&gt;

&lt;p&gt;其实这个混淆器也是一种编译器，只不过它把 JavaScript 翻译成不可读的形式。在这个项目中，由于失之毫厘就可以差之千里，我采用了从 Chez Scheme 编译器学过来的，非常严密的测试方法。对每一个编译器的步骤（pass），我都给它设计一些正好可以测到这个步骤的输入代码（比如，具有函数定义的，for循环，try-catch的，等等）。Pass 输出的代码，经过 JavaScript 解释器执行，把结果跟原来程序的执行结果对比。每一个测试程序，经过每一个 pass，输出的中间结果都跟标准结果进行对比，如果错了就表明那个 pass 有问题，出错的小程序会指出大概是哪一个部分出了问题。遵循小巧，不冗余，不重复的原则，我总共只写了40多个非常小的 JavaScript 程序。由于这些测试涵盖了 JavaScript 的所有构造而且几乎不重复，它们能够准确的定位到错误的改动。最后，这个 JS 混淆器能够正确的转换像 AngularJS 那么大的项目，确保语义的正确，让人完全无法读懂，而且能有效地防止被优化器（比如 Closure Compiler）简化掉。&lt;/p&gt;

&lt;p&gt;相比之下，过度鼓吹测试和可靠性的人，并没能制造出这么高质量的混淆器。其实在我进入团队之前，里面的两三位高手已经做了一个混淆器，项目延续了好多个月。这片代码一直没能发布给客户用，因为它的换名部件总是会在某些情况下输出错误的代码，修改了好多次仍然会出错。不是100%的正确，这对于程序语言的转换器来说，是不可接受的。换名只是我的混淆器里的一个步骤，它还包含大概十个类似的步骤，可以把代码进行各种转换。&lt;/p&gt;

&lt;p&gt;在实现换名器的时候，队友们让我直接拿他们以前写的换名代码过来，把 bug 修好就可以。然而看了代码之后，我发现这代码没法修，因为它采用了错误的思路，缝缝补补也不可能达到100%的正确，而且明显效率低下，所以我决定自己重写一个。由于轻车熟路，我只花了一下午的时间，就完成了一个正确的换名器，它完全符合 JavaScript 的语义，各种奇葩的作用域规则，而且结构非常简单。说白了，这个换名器也是一种&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot;&gt;解释器&lt;/a&gt;。对解释器的深刻理解，让我可以很容易的写出任何语言的换名器。&lt;/p&gt;

&lt;p&gt;不幸的是，历史再次重演了 ;) 队友们听说我花一下午重写了一个换名器，非常紧张，咋呼地跟我说：“你知道我们的换名器是花了多少个月的时间做出来的吗？你知道我们写了多少测试来保证它的正确性吗？你现在一下午做出来一个新的，你如何能保证它的正确！” 我不知道他们怎么好意思说出这样的话来，因为事实是，他们花了这么多个月，耗费这么多人力，写了这么多的测试，做出来的换名器却仍然有 bug，没法用。当我把我写的测试和几个大点的 open source 项目（AngularJS, Backbone 等）放进他们的换名器之后，就发现有些地方出问题了，而所有的测试和 open source 项目通过我的换名器，却得到完全正确的代码。另外经过性能测试，我的换名器速度要快四倍的样子。所以就像 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2014/02/18/dijkstra-interview&quot;&gt;Dijkstra&lt;/a&gt; 所说：“最优雅的程序往往也是最高效的。”&lt;/p&gt;

&lt;p&gt;结束这个项目之后，我换了一个团队（cluster团队），这个团队的人要好很多，低调而且幽默。Shape Security 的产品（Shape Shifter）里面包含一个高可靠（HA）集群管理系统，它可以通过网络，选举 leader，构建一个高容错的并行处理集群。这个集群管理系统一直以来都是公司里很复杂，却是可靠性要求最高的一个部件，一旦出问题就可能有灾难性的后果。确实，它当时可靠性非常高，从来没出过问题。但由于历史原因，它的代码过度复杂而缺乏模块化，以至于很难扩展来应付新的客户需求。我进入这个新团队的任务，就是对它进行大规模的简化，模块化和扩展，让它满足新的需求。&lt;/p&gt;

&lt;p&gt;在这个项目中，由于代码的改动幅度很大，在同事和部门领导的理解，信任和支持下，我们决定直接抛弃已有的测试，完全靠严格而及时的 code review，逻辑推理，推敲讨论，手工试验来保证代码的正确。在我修改代码的同时，一位更熟悉已有代码的队友一直通过 git 默默监视着我的每一次改动，根据他自己的经验来判断我的改动是否偏离了原来的语义，及时与我交流和讨论。由于这种灵活而严格的方式，工程不到两个月就完成了。改进后的代码不但更加模块化，更可扩展，适应了新的需求，而且仍然非常可靠。假设部门领导是“测试教条主义者”，不允许抛弃已有的测试，这样的项目是绝对不可能如期完成的。然而在当今世界遇到这样领导的机会，恐怕十个人里面不到一个吧。&lt;/p&gt;

&lt;h4&gt;Coverity&lt;/h4&gt;

&lt;p&gt;最后，我举一个由于测试方式不当而非常失败的案例，那就是 Coverity 的 Java 静态分析产品。我承认 Coverity 的 C 和 C++ 分析器也许是非常好的，然而 Java 的分析器，很难说。当我进入 Coverity 的时候，同事们已经忍受了整整一年的管理层的威逼和高压，超时过劳工作，写出了基本的新产品和很多的测试。可是由于技术债太多，再多的测试也没能保证产品的可靠性。&lt;/p&gt;

&lt;p&gt;我的任务就是利用我深入的 PL 知识，不停的修补前人留下来的各种蹊跷 bug。有些 bug 需要运行20多分钟之后才出现，一次还看不出是怎么回事，所以修起来非常耗时。有时候我只好趴在电脑前面养神，时不时的睁眼看看结果。Coverity 是如此的在乎测试，他们要求每修复一个 bug 你就必须写出新的测试。测试必须能够如实的重现 bug 的现象，修复之后测试必须能够通过。这看似一个很在乎代码质量的做法，然而它不但没能保证产品的稳定可靠，而且大幅度的减慢了工程进度，并且造成员工的疲惫和不满。&lt;/p&gt;

&lt;p&gt;有一次他们分配给我一个 bug：在分析一个中型项目的时候，分析器似乎进入了死循环，好几个小时都不能完成。因为 Coverity 的全局静态分析，其实就是某种图遍历算法。当这个图里面有回路的时候，你就必须小心，如果不问青红皂白就递归进去，就可能进入死循环。避免死循环的办法很简单，你构造一个图节点的集合（Set），然后把它传递到函数里面作为参数。 每当访问一个节点，你先检查这个节点是否已经在这个集合里，如果在你就直接返回，否则你就把这个节点加入到集合里，然后递归处理这个节点的子节点。它的 C++ 代码大概就像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void traverse(Node node, Set&amp;lt;Node&amp;gt; &amp;amp;visited)
{
  if (visited.contains(node)) {
    return;
  } else {
    visited.add(node);
    process_node(node, visited);   // 里面会递归调用 traverse
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看代码之后我发现，代码其实没有进入“死循环”，而是进入了指数复杂度的计算，所以很久都不能完成。这是因为写这函数的人不小心，或者没有理解 C++ 的函数参数缺省是传值（做拷贝）而不是传引用，所以他忘了打那个“&amp;amp;”，所以函数被递归调用的时候不是传递原来的集合，而是做了一个拷贝。每一次递归调用&lt;code&gt;traverse&lt;/code&gt;，visited 都得到一个新的拷贝，所以返回之后，visited 的值就恢复到之前的状态，就像 node 被自动 remove 了一样。所以这个函数仍然会在某种情况下再次访问这个节点。这样的代码不会进入死循环，然而在某种特殊的图结构下，这会造成指数级的时间复杂度（请想一下这是什么样的一种图）。&lt;/p&gt;

&lt;p&gt;本来很明显的一个图论算法问题，加一个“&amp;amp;”就修好了，手工试验也发现问题消失了。然而 Coverity 的测试教条主义者们（包括写出这 bug 的那人自己），吵着闹着，严肃命令我必须写出测试，构造出可以造成这种后果的数据结构，确保这个 bug 不会再重新出现。&lt;/p&gt;

&lt;p&gt;为一个我根本不会犯的错误写测试，而且它不可能再次发生，这不是很搞笑吗？就算你写了测试，也不能保证同样的事情不再发生。如果你不小心漏掉“&amp;amp;”，下次同样的问题还会发生，并且发生在另外的地方，而你却没有给那块代码写测试，所以给这个 bug 写测试，并不能防止同样的问题再次发生。这就像一个技术不过关的赛车手，他在别人不大可能撞车的地方撞了车，然后就要求赛场在那个地方装上轮胎护栏。可是下一次，这个车手又会在另一个其他人都不会撞车地方撞车……&lt;/p&gt;

&lt;p&gt;稍微有点图论常识，熟悉 C++ 基本概念的人，都不会犯这种错误。防止这种问题，只有靠个人的技术和经验，而不能靠测试。防止它再次发生的最好办法，恐怕是开个会把这个问题讲清楚，让大家理解，下次不要再犯。所以给这个 bug 写测试，完全是多此一举。跟队友们讲解了这个原理，他们听了之后，仿佛什么都没有听到一样，仍然强硬的要求：“可是你还是得写这个测试，因为这是我们的规定！你知道要是出了 bug，送一个销售工程师去客户那里，要花多少钱吗……” 无语了。&lt;/p&gt;

&lt;p&gt;Coverity 的 Java 分析，就是经常因为这种测试教条主义，使得项目进展及其痛苦和缓慢，却仍然 bug 百出。Coverity 的其他的问题，还包括我上面指出的，写重复的测试，一个测试测太多东西，使用字符串比较来做测试，等等。你恐怕很难想象，一个制造旨在提高代码质量的产品的公司，自己代码的质量是这样维护的 :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;由于绝大多数人对测试的误解如此之深，测试教条主义的流毒如此之广，导致许许多多优秀的程序员沉沦在繁琐的测试驱动开发中，无法舒展自己的长处。为了大家有一个轻松，顺利又可靠的工作环境，我希望大家多多转发这篇文章，改变这个行业的陋习。我希望大家在工程中理性的对待测试，而不是盲目的写测试，只有这样才能更好更快的完成项目。&lt;/p&gt;

&lt;p&gt;（由于这篇文章包含了我很多年的经验和深入的见解，希望你觉得有收获的话为此付费。建议价格是5美元，或者30人民币。【&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费方式&lt;/a&gt;】）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tests</guid>
<pubDate>Wed, 14 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Tesla autopilot 引起致命车祸</title>
<link>http://yinwang.org/blog-cn/2016/07/10/tesla-autopilot-fatal-crash</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Tesla autopilot 引起致命车祸&lt;/h2&gt;
                            &lt;p&gt;好一段时间没关心 Tesla 了，今天才发现他们的 autopilot 终于引起了&lt;a href=&quot;http://www.pbs.org/newshour/rundown/deadly-tesla-crash-exposes-confusion-over-automated-driving&quot;&gt;致命的车祸&lt;/a&gt;。这场 Model S 撞上18轮大卡车的车祸，发生于5月7号，距今已经两个月了。 Tesla 把这事隐瞒了两个月之久，直到现在美国国家公路交通安全管理局（NHTSA）开始调查此事，才迫不得已公之于众。由于 Tesla 没有及时向政府监管部门报告事实，政府正在考虑对 Tesla 公司采取法律行动。&lt;/p&gt;

&lt;p&gt;本来都懒得再提 Tesla 这公司的名字，但是由于 Tesla 对于这起车祸态度极不端正，不但隐瞒事实，而且继续找各种借口为 autopilot 开脱罪名，让这玩具级别的技术继续危害无辜开车人的安全，很多人（包括新闻机构）对此的分析很多都抓不住关键，所以我不得不再出来说几句。&lt;/p&gt;

&lt;p&gt;死者名叫 &lt;a href=&quot;http://www.legacy.com/obituaries/ohio/obituary.aspx?pid=179994314&quot;&gt;Joshua Brown&lt;/a&gt;，40岁，曾作为炸弹专家，服役美国海军11年之久。退役以后成立了自己的技术公司，近段时间热衷于 Tesla 的电动车技术，还建立了一个 YouTube 频道，用于演示自己的 Tesla 车子。所以可以说，Joshua 对 Tesla 的 autopilot 使用方法已经很熟悉了。然而这不幸的事件，恰恰就发生在这个专家用户和热心人身上。&lt;/p&gt;

&lt;p&gt;Tesla 方面称，那天 Joshua 行驶在佛罗里达州一条中间有隔离带的公路上，符合规定的启用了 autopilot。行车途中，前方有一辆18轮卡车左转，由于卡车车厢是白色的，后面的天空也是白色，所以 autopilot 没发现这个卡车，没有进行刹车，最后 Model S 撞上卡车，车主身亡。白色卡车衬托在白色天空上，所以 autopilot 就把卡车当成空气，这是个什么情况……&lt;/p&gt;

&lt;p&gt;先不说这技术有什么问题，出了这种事情，Tesla 对此&lt;a href=&quot;https://www.teslamotors.com/en_GB/blog/tragic-loss&quot;&gt;反应&lt;/a&gt;让人非常的失望。不但没有基本的自我检查，反而各种狡辩，把责任全都推到用户身上。首先，他们从统计的角度，说明 Tesla 车引起死亡的比例，比其它车子小很多。然后旁敲侧击地想说明，就算是那人自己开车，也不能避免这种车祸。最后他们再三的强调，autopilot 的说明书已经声明，功能还不成熟，如果看到要出事而没有及时接管，你们自己负责！&lt;/p&gt;

&lt;p&gt;这些都是 Tesla 老一套的诡辩方法。首先，Tesla 的死亡比例比其它车要小，并不能掩盖 autopilot 存在严重问题的事实。死亡比例小可能跟 Tesla 的技术没有很大关系，Tesla 是新公司，车都很新所以不容易出机械故障，而且买 Tesla 的都是有钱人，受过良好的教育，懂技术，所以一般不会乱开。那这种死亡比例，跟老牌子的车比是不公平的。其他牌子的车总数比 Tesla 多太多了，很多车子都十几二十年老掉牙，开车的各种人都有，酒鬼也有，老汉也有，罪犯也有，当然事故比例就上去了。如果你只看其它牌子最近几年的新车和豪华车，死亡比例拿来算一下，就很小。&lt;/p&gt;

&lt;p&gt;如果你光看 autopilot 导航的总里程数，事故比例恐怕就上去了，因为很多 Tesla 用户可能没有启用 autopilot，或者用的很少。Autopilot 不是第一次引起车祸了，之前我的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/01/10/tesla-autopilot&quot;&gt;另一篇文章&lt;/a&gt;已经提到，由于它的视觉技术不成熟，引发了许多险些发生车祸的情况，而且最近引起了好多次真正的车祸。要知道微小的比例落在一个人头上，就等于100%的不幸。等你因为 autopilot 而受害，才会发现 Tesla 摆出来的那些统计数字，对你其实毫无意义。也许，它确实造福了全人类，可惜死伤的人是你或者你的家人，而且那是因为 autopilot 极其弱智的判断错误…… 你会因为统计数字很安全而饶了 Tesla 吗？&lt;/p&gt;

&lt;p&gt;另外 Tesla 喜欢旁敲侧击的指出 autopilot 的驾驶能力高于人类，而事实并不是那样。你怎么能证明人开车不能避免这车祸？Tesla 说：“驾驶员和 autopilot 都没有看到卡车。” 你们怎么知道驾驶员没有看见卡车？那可是18轮的大卡车！说白色的侧面车厢映在白色的天空，所以人看不见它，这不是搞笑吗。&lt;/p&gt;

&lt;p&gt;一个东西是白色的，不等于它是看不见的，一个不透明的东西会挡住后面的景物，这一点人是很清楚的。白色的物体也会有反光，纹理会跟天空不一样，人可以通过这种反光感知它的存在。卡车不止有白色的侧面，还有黑色的轮子，车头上有烟囱，车窗，油箱，…… 各种其它颜色的附件。为了让其他人在夜间能看到车厢的大小，大卡车必须在车厢的八个角上都安装红色的警示灯，这些灯在白天不亮的时候也看得见的。就算天空是白色，人也是不可能看不见它，把卡车当成空气的。所以我猜真实情况是，驾驶员发现 autopilot 判断错误，想接管过来，但已经来不及了。要知道这个反应时间也许不到一秒！人死了，当然死无对证。&lt;/p&gt;

&lt;p&gt;从多次的事故现象中，我分析出这样一个规律，虽然 Tesla 声称 Model S 上装备了雷达和声呐，但是 autopilot 的操作却似乎仅靠摄像头的“像素”，通过神经网络进行图像分析，所以它才会连18轮大卡车这么巨型的东西都没有发现，在路上看到个树影还以为是障碍物…… 这些都是人根本不会犯的奇葩错误。我请大家不要对自动驾驶技术过于乐观，急于求成。机器视觉在某些地方是很有用的技术，然而它要能被用于自动驾车，还有非常长的路要走。&lt;/p&gt;

&lt;p&gt;Tesla 确实警告过人们，说这个技术还不成熟，你必须把手一直放在方向盘上，准备随时接管，然而这并不能免除 Tesla 的责任。首先，Tesla 根本就不应该把不成熟的技术发布出来，而且大肆宣传，搞得大家以为它很先进很可靠似的，争相试用。其次，说明书上的警告，在法律上也许是没有效力的。你要求别人随时接管，那么你必须在可能判断错误的时候给出警示，而且给人足够的响应时间，才能算是合理。&lt;/p&gt;

&lt;p&gt;Autopilot 的设计是有严重问题的。它操纵着车子，却不给人解释自己看见了什么，准备进行什么操作，在道路情况超越了自己能力的时候，也不给人提示，以至于人根本不知道它出了问题，不能及时接管。要知道，车在直走的时候，autopilot 是否判断正确，人往往是看不出来的。一辆没有 autopilot（只有普通  cruise  control）的车子，跟一辆启用了  autopilot 的车子，在匀速直线运动的时候，人是无法察觉出任何区别的。可是人知道 autopilot 会自动刹车，而普通的  cruise  control 不能，所以人就会期望有 autopilot 的车子会刹车。等你发现它一声不吭，前面有障碍物却没有刹车，才会知道它有判断错误，可是那个时候就已经晚了。&lt;/p&gt;

&lt;p&gt;所以在这种情况下，Tesla 虽然事先有“免责声明”，把责任全都推在用户头上，在法庭上其实仍然可以败诉，因为他们对用户提出的要求是不切实际的，没有人能够在上述 autopilot 判断错误情况下及时的接管过来。我建议这起车祸死者的家属把 Tesla 告上法庭，要求巨额赔偿。我也建议所有 Tesla 的车主，为了对自己和他人的生命负责，请关闭 autopilot 这个功能！Tesla 根本就不懂如何设计自动驾驶系统，技术不过硬，设计有缺陷，基本就是个玩具。生命很宝贵，用自己的生命来给所谓的“新技术”做试验品，是不值得的。&lt;/p&gt;

&lt;p&gt;珍爱生命，远离 autopilot！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tesla-autopilot-fatal-crash</guid>
<pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Google Maps的设计问题</title>
<link>http://yinwang.org/blog-cn/2016/07/05/google-maps</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Google Maps的设计问题&lt;/h2&gt;
                            &lt;p&gt;我开车的时候喜欢用 Google Maps 导航。虽然我对 Google 这公司挺有意见，然而 Google Maps 确实是好东西。比较过其他几个导航软件（Waze，Scout Maps）之后，我发现 Google Maps 在大部分时候还是表现最好的一个。&lt;/p&gt;

&lt;p&gt;然而这并不等于它的设计是没有问题的。Google Maps 时不时的会改变设计，有些地方改进了，另外一些地方却可能被改得还不如以前。我已经不止一次的向 Google Maps team 提出反馈意见。&lt;/p&gt;

&lt;p&gt;现在我就把最近烦扰我的一个问题讲一下。我已经通过 app 给 Google Maps team 发送了 feedback，但我希望这种设计问题引起足够的重视，所以也在这里说一下。&lt;/p&gt;

&lt;p&gt;这个最近发现的问题是，Google Maps 显示的公路号码字体太小。它把州际公路（interstate）之类的公路号码，显示成路牌上的样式。比如下面的这个 Interstate 880，被显示成带有弧形花边，红蓝底色的路牌样式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-d0dfc31379ac5331.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这看似美观，平时在手机上看貌似没什么问题，然而在开车的时候你就会发现，里面的号码很难看清楚。其原因是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把带有这个花边的路牌嵌入到导航提示里面之后，由于整个路牌的高度和旁边字体的高度一样，公路号码“880”的字体，比旁边的字小了很多（请比较“880”和“North”的大小）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开车的时候，手机架在机座上，离眼睛有一定距离，而且由于车速很快，你只有不超过一秒钟的安全时间可以去瞄手机。所以我经常发现瞄一眼是根本没法看清楚这个花边里面的号码（880）的，你得盯着手机看好一会儿。有时候我把头凑近手机，都很不容易看清楚。这对于开车的人是一个不小的干扰，可能会引起交通事故。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;湾区的很多高速公路号码只差一个数字，比如 280，380，680，880…… 这么小的字体，很容易看不清楚这号码到底是哪一个！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;实际上你观察一下真正的路牌，就会发现公路号码的字体，跟旁边文字的比例，并不是像 Google Maps 上那个样子。请观察下图中的路牌，号码“280”和“101”的字体，和旁边的文字“SOUTH”，“TO”，“NORTH”，“San Francisco”其实是一样大，甚至更大一些。加上 INTERSTATE 的盾形花边，这个标志的尺寸比旁边的文字要大很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-43f9258afbc7373a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;所以 Google Maps 一片好心，想把公路号码做得很“形象”和“直观”，做得像路牌的样子，结果比例不对，帮了倒忙。对此我提出的建议是：&lt;/p&gt;

&lt;p&gt;方式1：不要把公路号码显示为路牌的样式，直接使用像“I-440”这样的文本来显示路名。很少有人会在乎公路号码的样式是否美观，他们只在意是否能清楚地看到号码，所以这可能是最好的选择。很多其他导航软件和专用 GPS 设备（比如 Waze，Garmin）都是直接采用文本显示公路号码。&lt;/p&gt;

&lt;p&gt;方式2：保留路牌样式，但是需要把路牌的尺寸增加到真正的路牌字体比例，也就是说让路牌里的号码跟旁边的字体大小一样。这个方式放到 Google Maps 的导航提示里面，恐怕会让导航提示的宽度变大，占用更多屏幕空间，所以虽然也许可行，但可能不如第一种方式。&lt;/p&gt;

&lt;h3&gt;其它一些问题&lt;/h3&gt;

&lt;p&gt;当然，字体大小并不是我发现的 Google Maps 唯一的问题。它还有其他一些小问题，有一些我已经向 Google Maps 的 team 提供了反馈，已经修复，还有一些仍然存在。现在我把这些小问题指出来，其中一些相当的讨厌：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[已修复] Google Maps 曾经在一段时间采用这样一种设计：当它通过对交通信息进行分析，得知有另一条时间更短的路线，它会弹出一个窗口，询问用户是否要选择这条更快的路（Yes/No?）。这个窗口有十几秒的延时，到时间之后如果你没有按屏幕，窗口会自动消失，并且自动选择新的路线。&lt;/p&gt;

&lt;p&gt;缺省选择新的路线，是一个很不合理的设计。在开车的时候，你必须集中注意力在路上，几乎没有时间去相应弹出的窗口。而且这个窗口字体和按钮都很小，开车人可能根本没时间去读里面的内容，即使读了也不容易按中正确的按钮。到时间没有动作，导航系统自动切换到新的路线，而不是保留用户最初的选择。未经允许改变用户的路线选择，可以说是一个反人类的设计。&lt;/p&gt;

&lt;p&gt;我及时向 Google Maps 团队提供了强烈的反馈，这个问题已经改变。现在缺省的选择是保留原来的路线。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[还存在] Google Maps 有时候会忽然重新计算并且改变原来的路线。改变的原因也许是因为开车人没有按原路线走，然而这有可能不是开车人的意愿。举一个例子，从南湾地区去三藩市方向，有两条高速公路可以走：280 和 101。白天我一般会选择 280，因为 280 车不多，而且风景优美一些。我会在 Google Maps 界面选择 280 的路线。&lt;/p&gt;

&lt;p&gt;然而当我开出停车场，在第一个路口由于 GPS 的方向还未适应过来，我有可能转错方向。这个时候 Google Maps 会根据我的方向重新计算路线，这时候它很有可能自动把整个路线换成走 101，而不再是 280。由于最初的方向错误而换掉整体要走的高速公路，是非常不合理的。你以为它会按你原来的选择走 280，结果最后发现它把你带到了 101 的入口……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">google-maps</guid>
<pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>养生节目带来的危害</title>
<link>http://yinwang.org/blog-cn/2016/06/28/yangsheng</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;养生节目带来的危害&lt;/h2&gt;
                            &lt;p&gt;国内总是流行各种各样的“养生节目”，深受中老年人的欢迎。比如我爸妈，有时无聊了，就会转发给我一些养生节目，比如这个：『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』。这节目说，有人得了过敏性鼻炎，喷嚏鼻涕不断，严重脱发，头都半秃了，虚弱无力，性能力衰退…… 最后专家得出结论，是因为他每天早上喝一杯凉水导致的！&lt;/p&gt;

&lt;p&gt;据我观察，这些养生节目里面的理论，基本可以归为两种：好的和新的。可惜好的理论都不新，新的理论都不好。&lt;/p&gt;

&lt;h3&gt;好的理论&lt;/h3&gt;

&lt;p&gt;第一类理论，就是把人们早已熟悉的，久经考验的常识，比如早晚要刷牙之类的，拿来包装成“新理论”。这些理论当然错不到哪里去，然而却是每个人从小都已熟知的。现在挂着“专家”头衔的人出来一宣传，这些斯通见惯的常识，忽然间被老人家们当成了最新的研究成果。&lt;/p&gt;

&lt;p&gt;我遇到的这种例子挺多的。有时候父母给我发个信息，说你要注意这个那个习惯啊，不然会得什么什么样的病…… 这本来就是我从小就已经知道并且照办的事情，而且我还记得当年这东西就是我爸妈教给我的。现在让这帮“养生专家”一忽悠，倒像个新鲜事，又拿出来讲一遍，好像别人不知道一样…… “专家”的威力就是这么强大 :P&lt;/p&gt;

&lt;h3&gt;新的理论&lt;/h3&gt;

&lt;p&gt;第二类理论，就是胡编乱造出一些“新理论”，却没有经过科学实验证实。『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』就属于这一种情况。通常这种理论把问题的原因归结为某一个生活习惯（比如早上喝一杯凉水），而忽略所有其它引起问题的因素。这些理论的问题在于，它们通过臆断，得出错误的“因果关系”。&lt;/p&gt;

&lt;p&gt;据我了解，过敏性鼻炎，脱发等问题，很多都是因为基因遗传，跟人平时的生活习惯几乎没有关系。现在有一个人出现了过敏性鼻炎和脱发，而且碰巧这人早上起来喜欢喝一杯凉水，于是专家就得出一个可笑的结论：一定是喝凉水引起了过敏性鼻炎和脱发。&lt;/p&gt;

&lt;p&gt;养生专家们很喜欢把健康问题跟某些不起眼的习惯挂钩，这样就可以创造一些惊人的理论，却无法验证其真实性。他们可以说，就是因为你这个小小的习惯，导致了如此严重的健康问题。这样一来，他们就可以告诉你吃什么，不吃什么，做什么，不做什么。每过一段时间，这些人都会换一套不同的说法，让你感觉有新东西出来，却没发现这些其实跟之前的说法自相矛盾。老年人记性不好，看不出破绽，有些人为了健康不惜一切，仿佛活着就是为了不停地研究如何才能继续活着…… 这就是这帮养生专家和养生节目得以生存的关键。&lt;/p&gt;

&lt;p&gt;得出喝凉水引起了鼻炎，脱发，身体虚弱这样的结论，且不说它看起来有没有可能，你必须先经过科学实验。你不能只看一个人，因为数据量太小，很可能是偶然巧合，没法建立因果关系。所以实验必须要有两组人进行对照，就是所谓“对照实验”。一组人早上喝一杯凉水，另外一组人不喝。过一段时间，分析这两组人里面出现上述问题的人的比例，如果喝凉水的人大部分出现了问题，而不喝凉水的人大部分没有出现问题，你才有可以得出“喝凉水导致鼻炎和脱发”这样的结论。&lt;/p&gt;

&lt;p&gt;显然，这个节目里的专家并没有经过实验，而是引用（滥用）『黄帝内经』里面的各种阴阳理论。说早上阳气上升，喝一杯凉水把阳气给浇灭了，怎么能不得病哪！这显然是完全不科学，不负责任的说法。实际上这套阴阳理论是如此的模棱两可，跟占星学如出一辙，你可以利用这些说法来解释世界上的几乎任何现象！不管遇到好事还是坏事，同样的一句话，可以同时支持两种完全相反的结果。为什么它可以这样呢？因为这些说法本来模棱两可，所以不同的人从不同的角度去解释它，发现都是说得通的。&lt;/p&gt;

&lt;p&gt;这些养生节目，经常把严重身体问题的起因，归结为某些生活上的小习惯，吃什么，不吃什么之类，很容易让人忽略真正的起因，更加严重的因素，这属于一种误导。中老年人看了这些节目，往往盲目的认为坚持或者改变生活上的一些小习惯，就可以避免或者修正一些严重的身体疾患，结果耽误了真正科学研究出来的补救办法。在这种意义上，养生节目是有危害性的。我建议中老年人少看这种节目，多跟真正的医生了解科学的医疗知识。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">yangsheng</guid>
<pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>欧盟草拟法案，对机器人征税</title>
<link>http://yinwang.org/blog-cn/2016/06/24/robot-tax</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;欧盟草拟法案，对机器人征税&lt;/h2&gt;
                            &lt;p&gt;据路透社报道，欧盟正在草拟一个关于机器人的&lt;a href=&quot;http://www.reuters.com/article/us-europe-robotics-lawmaking-idUSKCN0Z72AY&quot;&gt;法案&lt;/a&gt;。由于机器人以及智能机器的使用，可能带来空前严重的失业问题，这项法案要求所有使用智能机器人的公司，如实向政府汇报由于机器人的使用，而节省下来的人的工资，然后政府据此征收社会安全税，给人发放相应的福利。这个法案跟我的一个想法类似：每当机器人取代一个人的工作，使用机器人的公司就有义务要养活那个人。&lt;/p&gt;

&lt;p&gt;很多机器人公司在抱怨，说这会阻碍机器人行业的发展，然而我觉得这正是欧盟关爱人民的表现。对机器人的使用进行征税，对于社会的安全和幸福是非常有必要的。用机器人代替人的劳动，导致人失业，却不安顿好失业者的生活，属于一种掠夺或者抢劫的行为。这不但会大幅度降低社会幸福感，而且会导致社会安全问题，比如犯罪率上升等等。&lt;/p&gt;

&lt;p&gt;人的权益应该是崇高致上的，所有损害人的切身利益的做法，都应该付出代价，哪怕这会阻碍技术的发展。要记住，技术是为人服务的。如果技术给人和社会带来的不是幸福，而是困苦甚至灾难，那我们就应该理智的延缓甚至取消技术的发展，或者为此征税来维护人的权益。&lt;/p&gt;

&lt;p&gt;世界上聪明人太多了，却缺乏智慧的人。欧盟的这一法案让我看到了希望。我希望世界上所有国家，特别是美国和中国，都意识到这个问题。大部分的社会财富集中在极少数人手中，这样的社会是不会幸福的。就算你钱再多也一样，你只会看到一片荒凉，到处是饥饿而势利的人。你不再会有朋友，只有对你的钱感兴趣的人…… “&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们都应该明白这个道理。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">robot-tax</guid>
<pubDate>Fri, 24 Jun 2016 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
