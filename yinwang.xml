<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>http://www.yinwang.org/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Tue, 22 Aug 2017 00:12:27 +0800</lastBuildDate>
<item>
<title>知乎和 MITBBS</title>
<link>http://www.yinwang.org/blog-cn/2017/08/19/zhihu-mitbbs</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;知乎和 MITBBS&lt;/h2&gt;
                            &lt;p&gt;十多年前，当我离开清华的时候，有媒体报道说：“支持王垠的也就只有国内屌丝，看看海外华人居多的 MITBBS，评价就很不一样。” 后来的很多博文，也经常会上 MITBBS 的“十大头条”。这些都是别人告诉我的，因为我根本不上 MITBBS。&lt;/p&gt;

&lt;p&gt;清华的那一次，也就是我第一次听说 MITBBS。似乎一个很高大上的名字，然而等你真正成为了“海外华人”，注册了 MITBBS 的账号，才发现它不但跟 MIT （麻省理工学院）没有任何关系，而且并不是心理正常的海外华人会出没的地方。我认识的友好的，有水平的人，没有一个上 MITBBS。MITBBS 称自己是海外华人的家园，还不如叫做“心理不正常华人的家园”。&lt;/p&gt;

&lt;p&gt;很多年前，我也算是有过几个 MITBBS 的“马甲”了。出国初期的时候因为人生地不熟，到上面问过一些生活方面的问题，希望了解“海外华人”们的解决方案。在一次次的碰壁之后，我终于醒悟了，MITBBS 上是没法形成正常的讨论的，没法得到任何有价值的信息。为什么呢？因为上 MITBBS 灌水的人，大部分心态都不正常。他们在那上面灌水，目的只是弥补心理的缺失，在这个虚幻的空间中获得存在的价值。换句话说，就是装逼。&lt;/p&gt;

&lt;p&gt;所以你去跟这样一群人交流，能得到什么呢？每一次心存希望，每一次得到的都是失望。因为那些喜欢在网络上装逼的人，在现实生活中找不到人可以鄙视，所以会很喜欢拿你来鄙视 :P 如果你有问题，使用搜索引擎找几篇英文文章出来，效果往往好很多，完全不需要上 BBS 提问或者交流。&lt;/p&gt;

&lt;p&gt;知乎也是类似的。很多年前我受人蛊惑，开始上知乎回答少量问题。立马就有人来信跟我说：“哎呀，知乎这种民科待的地方，你怎么也去了？” 后来我发现他说的确实如此。知乎上出名的人，在现实中一般都有严重的问题，他们想要在那个虚幻的空间制造自己的知名度。不知情的小白们以为从他们那里学到了东西，然而内行一看就知道完全不够水准。这就是为什么我后来删除了我所有的答案，因为这些信息出现在知乎上，玷污了它们的价值。&lt;/p&gt;

&lt;p&gt;最近忽然有人问我是不是开了“知乎专栏”，说有很多人关注，我有点摸不着头脑。其实那个“王垠的专栏”是很多年前，知乎网站人员联系我，鼓动我开的。当时我说不感兴趣，但他们说先给我开着，也许以后我会想用。我也没再过问那件事，所以专栏就一直留在那里了，我都忘记了它的存在。没想到几年以后才有人发现它，误以为我最近开了专栏。那显然是不可能的，由于知乎的愚昧性质，我不可能为这样的网站提供任何信息。&lt;/p&gt;

&lt;p&gt;最近又有人鼓吹我上知乎，但我看了一阵子上面最新的问题之后，发现它们对我没有任何意义。知乎鼓励人们去免费回答问题，然而上面的问题都是水准很低，或者心态不大正常的。比如：“刚毕业就月薪过万是怎么样一种感受？” “拥有一个身材很好的女朋友是怎样一种感受？” “如何评价 XXX？” 这些问题看起来像是“知识”吗？只不过是为了让这些压抑的人有一个装逼或者发泄的机会而已。上知乎回答问题，其实是在贬低自己的价值。&lt;/p&gt;

&lt;p&gt;所以呢，MITBBS 和知乎在我心目中，处于被完全忽略的地位。那上面的人无论怎么装逼，无论怎么黑我，对我没有任何作用，因为我并不把它们当成“人”来对待。&lt;/p&gt;

&lt;p&gt;但有一个严重的问题，我想在这里谈一下。有些人因为看我的博客而联系我，经过一些对话，我觉得其中少数人还值得交流，所以回国之后在条件合适的情况下，接见了他们其中几个人。然而不久，我就发现知乎上有人谈论我“面基”的事情，原来其中某些人不知是何种目的，在知乎上透露了跟我见面的事情。虽然我看到的信息都是正面的，然而这种事情属于个人隐私，不应该在知乎这样的地方谈论，成为心理变态者们的话题。另外，我对“面基”或者“见面会”这种网络词汇有严重的反感。一旦出现，这种人会被立即删除和封锁。&lt;/p&gt;

&lt;p&gt;在我的要求之下，相关人员删除了此类问题并且表示歉意。但由于这个问题的出现，我决定进一步的加强对人员的鉴别。本来在初步的对话中我就会排除掉大部分的人，我很少会面见直接给我发信的人，但今后我面见的人还必须通过背景审查：他们不可以在知乎和 MITBBS 一类的地方有较高的活跃程度。否则这说明他们级别太低，或者有严重的心理问题。我将来要成立的公司，也会利用知乎上的信息对面试者进行背景调查。还得感谢知乎这个吹牛大王们聚集地方，提供了大量的信息让我可以窥探到很多人的内心世界，在很早的时候就过滤掉不合格的人 :)&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/08/19/zhihu-mitbbs</guid>
<pubDate>Sat, 19 Aug 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>微博</title>
<link>http://www.yinwang.org/blog-cn/2017/08/16/weibo</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;微博&lt;/h2&gt;
                            &lt;p&gt;由于之前受到网络暴民的困扰，所以一直不想开放评论。其实大部分人都理解我说的话，或者愿意提出一些善意的建议，但网络上总有很多一知半解和愚昧的人，喜欢进行一些谩骂和侮辱。因为这些人的活动而关闭绝大部分好心人的交互，是不值得的，它会使得那些传播谬论的人更加肆无忌惮。&lt;/p&gt;

&lt;p&gt;所以经过考虑之后，我决定通过微博开放对我文章的评论和讨论活动。我重新开了一个&lt;a href=&quot;http://weibo.com/u/6347862377&quot;&gt;微博账号&lt;/a&gt;，欢迎大家关注。新的博文发布之后将在微博发布更新，并且欢迎讨论。之前一次重开微博，很多人向我抱怨说本来不再用微博的，不得不又开了账号重新开始用。我对这些人的支持表示感谢。&lt;/p&gt;

&lt;p&gt;微博只是一个工具，上面很多是吹牛扯淡煽风点火的人，但上面也可以有实实在在的人。因为它的普及性，我还是愿意利用它来分享一些想法的。吹牛扯淡的伪君子们有几千万粉丝，天天被他们念经洗脑。我为什么不可以有几千万的粉丝，传播靠谱一点的信息呢？所以我鼓励大家关注我的微博，并且推荐给你的朋友们，特别是那些非技术领域的容易被迷惑的人。&lt;/p&gt;

&lt;p&gt;由于我很少关注评论，私信可能也不能一一回复。如果看到网络暴民的无理辱骂和骚扰，还请各位出手维持秩序。&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/08/16/weibo</guid>
<pubDate>Wed, 16 Aug 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>旅行的智慧</title>
<link>http://www.yinwang.org/blog-cn/2017/08/14/travel-wisdom</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;旅行的智慧&lt;/h2&gt;
                            &lt;p&gt;每一次旅行都是一场修行。通过每一次旅行，我都会总结出一些简化生活，让它变得更舒适的方法。有了『编程的智慧』和『生活的智慧』，我现在在机场发呆，观察到自己和其他人的一些旅行用品和方式，所以想试试写个『旅行的智慧』。当然有一些绝密的技巧我不方便公开，但还是有很多可以分享的东西，也许可以帮助人们。&lt;/p&gt;

&lt;h3 id=&quot;不用硬壳旅行箱&quot;&gt;不用硬壳旅行箱&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/hard-case.jpg&quot; width=&quot;240&quot;&gt;&lt;/p&gt;

&lt;p&gt;这次回国发现硬壳的旅行箱非常流行，似乎占了绝大多数。有些甚至是金属外壳加铆钉材料，就像电影里的那种炸弹箱。下面有四个轮子，开口是从一半的位置而不是最上面。我很纳闷为什么大家用这种箱子。&lt;/p&gt;

&lt;p&gt;首先，旅行的时候其实没有什么值钱的物品，需要那么硬的箱子来保护的。大不了把一些东西夹在衣服下面，就差不多起到保护的作用了，撞一下根本伤不到它们。如果你真有很贵又脆弱的物品，那么你完全可以拿一个盒子先把它保护起来，然后放进箱子里。&lt;/p&gt;

&lt;p&gt;据我观察，很多这种硬壳箱子新的时候好看，可是一旦被硬物（地板，台阶，火车飞机上的各种设施）划伤，就会留下难看而锋利的划痕或者凹陷。这样碰到自己身上或者其他人都是很不舒服的，摸起来也很不爽。很多硬壳箱子外壳都是光滑的，这样上面粘了灰之后，手一摸灰就到手上了。想一想吧，你需要用手摸着到处是划痕，沾满灰尘的硬壳把它扛起来，放到行李架上……&lt;/p&gt;

&lt;p&gt;所以尽管硬壳箱子如此流行，我也只用软质面料的箱子。软面料箱子的好处是，撞了之后不会留下凹陷，也很难留下划痕，粘了灰之后，灰不会转移到手上。碰在自己身上不会伤到自己，摸起来也舒服。软的面料给人一种舒适的感觉，要知道箱子很多时候是会靠你很近的。而且软面料箱子外侧一般都有放小件物品的小袋子，可以放一些随时可能用的东西在里面。&lt;/p&gt;

&lt;p&gt;硬箱子的开口一般都在一半的地方，貌似更加容易整理物品，但我以前就用过一个在一半位置开口的箱子，发现其实不能达到那个效果。旅行的时候，东西稍微有些规律塞进去就可以了，再买一个卫生用品小包放牙刷一类的物品，就很容易整理了。没必要从一半的地方开口，这样盖上打开的时候都感觉沉重，而且害怕上面的东西掉下来。&lt;/p&gt;

&lt;p&gt;行李箱上的密码锁基本都是废物。三位数字的密码锁，你以为别人需要试1000次才能打开它吗？由于转到正确数字的时候发出的声音不一样，这种密码锁的组合数其实只有30。我可以在半分钟之内打开这种锁。所以买箱子的时候就别拿密码锁当回事了。&lt;/p&gt;

&lt;p&gt;下面有四个轮子还是好的，因为飞机和火车中间的过道都比较窄，横着不容易过去。在过道里把箱子提起来很费力，而且如果被前面的人挡住去路你就得又放下来等……&lt;/p&gt;

&lt;p&gt;所以我的建议呢？使用下面有四个轮子的软面料箱子。&lt;/p&gt;

&lt;h3 id=&quot;带自己的牙刷和拖鞋&quot;&gt;带自己的牙刷和拖鞋&lt;/h3&gt;

&lt;p&gt;不要指望酒店会有你满意的牙刷或者拖鞋。任何酒店提供的拖鞋基本都是一次性的那种，穿上去有一种被黏住的感觉。一两天的话很多人都那样就凑合了，可是要是多几天，还是准备自己的拖鞋为好。&lt;/p&gt;

&lt;p&gt;我从来不用酒店提供的免费牙刷。其实美国的酒店就从来不提供牙刷和牙膏，因为这种用品如果有问题，有可能威胁到人的健康。美国酒店怕出事你告他们，所以就干脆不免费提供这些东西，我觉得这还是有道理的。牙刷这么小的东西，最好自己带着。&lt;/p&gt;

&lt;h3 id=&quot;不带-crocs-塑料鞋出门&quot;&gt;不带 Crocs 塑料鞋出门&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/crocs.png&quot; width=&quot;240&quot;&gt;&lt;/p&gt;

&lt;p&gt;说到拖鞋…… 由于一些历史原因，我喜欢用 Crocs 大头塑料鞋当拖鞋用。旅行的时候也带着它。但是后来我发现 Crocs 的鞋在箱子里很占空间，而且很不实用。&lt;/p&gt;

&lt;p&gt;也许你以为这种塑料鞋在雨天或者海边沙滩上很舒服，那你就错了。原因是因为这种鞋子前面不是完全开口的，一旦有沙子或者小石子进了这鞋就很难出去。所以那些沙子和小石子就会留在鞋子里面折磨你的脚。&lt;/p&gt;

&lt;p&gt;这次出门我又把跟随我多年的 Crocs 鞋放在箱子里，占了一大块地方。当意识到它一直以来的无能之后，我在地摊上买了一双轻巧的草编拖鞋，然后 Crocs 鞋就被我扔在酒店的垃圾桶里面了 :P&lt;/p&gt;

&lt;h3 id=&quot;提前多一点去机场&quot;&gt;提前多一点去机场&lt;/h3&gt;

&lt;p&gt;我发现很多人把去机场的时间算的太精确，比如提前两个小时动身，结果路上遇到堵车，或者到了机场发现安检的队很长，搞得神经紧张跌跌撞撞的。&lt;/p&gt;

&lt;p&gt;我作法是避免买早上的机票，买下午的机票，提前多一点去机场，到了机场还会有一个小时休息时间的样子。因为机场一般有比较好的设施，像咖啡店一类的，所以早点去坐在那里发呆，跟在城里发呆，区别其实不大。&lt;/p&gt;

&lt;p&gt;这样做的好处是你的神经一直处于放松的状态，从容不迫的。&lt;/p&gt;

&lt;h3 id=&quot;避免登机口排队&quot;&gt;避免登机口排队&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/airport-line.jpg&quot; width=&quot;240&quot;&gt;&lt;/p&gt;

&lt;p&gt;我总也不明白，还没有广播叫大家开始登机呢，为什么总有很多人喜欢在登机口排好队，等着上飞机。一架飞机上的人，不管你先上还是后上，都是大家一起起飞，一起着陆。你以为排在前面就可以早点到达目的地吗？据我唯一一次试验，这种队可以排你 40 分钟的样子，那次我觉得自己真是疯了傻了。&lt;/p&gt;

&lt;p&gt;所以聪明人都是坐在登机口旁边座位上或者咖啡店里。等到广播说开始登机了，才慢悠悠的走到登机口。一般说来，因为前面的人要在机舱过道上停下来放行李，所以这个长队要一二十分钟才能上完。你如果听到广播就走过去，就还得站一二十分钟。所以就算听到广播，你仍然可以继续坐着，看到队变得很短了才走过去，就直接可以上飞机了。&lt;/p&gt;

&lt;p&gt;需要注意的一点，有些地方的机场很狭长，所以你最好一开头就找准登机口的位置，坐在附近。免得到时候通知登机了，发现还有十分钟的路要走！&lt;/p&gt;

&lt;h3 id=&quot;别急着下飞机&quot;&gt;别急着下飞机&lt;/h3&gt;

&lt;p&gt;绝大部分人会在飞机停靠之后，立即走出座位，拿下行李，站在那里等着下飞机。其实飞机停稳之后，还是需要几分钟时间，等通道对接好，还有一些不知道什么手续，才会打开舱门的。所以你早早出去了还是只有站在过道里，跟其他人挤在一起。&lt;/p&gt;

&lt;p&gt;所以聪明人都是坐在位置上，看到队伍开始动了，才走出来准备下飞机。一般礼节是机舱后面乘客应该让前面的乘客先下飞机，所以你随时有权利站到过道上，挡住后面的人，取行李，然后下飞机，而不会有妨碍后面乘客的礼貌问题。如果你的行李放在了座位后面的行李架上，前进的队伍让你没法拿到行李，那你可以等所有人都下了再下，也不会迟多少。&lt;/p&gt;

&lt;h3 id=&quot;在路上招出租车&quot;&gt;在路上招出租车&lt;/h3&gt;

&lt;p&gt;我发现很多人爱用滴滴叫车，不管眼前有没有空的出租车，都用滴滴叫“快车”。其实这种完全靠滴滴的做法并不是最好的。&lt;/p&gt;

&lt;p&gt;用滴滴之类的软件叫车，有一种“找人”的开销。司机经常不知道你在哪里，或者知道你在某个路口，却是一个很大的路口，不知道你在哪一个角上。解释老半天终于找到，才能上车，这个过程经常需要好几分钟甚至十分钟以上。&lt;/p&gt;

&lt;p&gt;其实招路边来的出租车要高效准确很多，因为你看到那个车了，你招手，它停下来你就直接坐上去了。就没有了这找人的麻烦事，整个过程只需要几秒钟时间。&lt;/p&gt;

&lt;h3 id=&quot;坐出租车后座&quot;&gt;坐出租车后座&lt;/h3&gt;

&lt;p&gt;我发现国内仍然有人（虽然已经不多了）喜欢坐出租车或者滴滴车的前排座位，坐在司机旁边。这似乎来源于一个古老的意识，认为前排座比后排的更舒服，或者更安全。可能因为很早的时候汽车都不大好，所以前排的座位确实更舒服，而后面的座位可能很颠，容易晕车。所以那种古老的观念，一直流传到现在，即使现在的汽车前后座位已经一样舒服。&lt;/p&gt;

&lt;p&gt;前排座的问题是司机就在你旁边，你必须跟他分享前面的空间。你的一举一动，司机都能看见，包括你手机上发的信息。如果遇到脾气或者态度不好的司机，你会更容易受到他的影响。有些城市的出租车为了保护司机，会在司机座位旁边装一个有机玻璃的隔离板。加上这个板之后，右边的座位就没有多大的地方了，而且由于那个玻璃挡在那里，感觉很不舒服。&lt;/p&gt;

&lt;p&gt;其实出租车最好的座位是后排。不管是一个人还是跟朋友一起，我都会坐后排。如果是两个人一起坐，我们两个都会坐后排，而把前面座位空着。如果是三个人，那么前排不得不坐一个人。&lt;/p&gt;

&lt;p&gt;这里有一个礼节问题。如果是坐朋友开的车，那么他右边的座位必须有一个人陪。因为朋友不是服务人员，所以你不可以让他孤零零的在前面开车，好像你的司机一样。反过来，出租车司机确实就是为你服务的，就像餐厅的服务员，所以你坐后面，把前排座位留空，并不是不礼貌的行为，而是理所应当的。&lt;/p&gt;

&lt;p&gt;（未完待续。。。）&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/08/14/travel-wisdom</guid>
<pubDate>Mon, 14 Aug 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>我为什么爱猫</title>
<link>http://www.yinwang.org/blog-cn/2017/07/21/love-cat</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;我为什么爱猫&lt;/h2&gt;
                            &lt;p&gt;从小就喜欢猫，可惜由于母亲“凡是会拉屎的都不养”的政策，一直都没有机会自己养一只。所以邻居家的猫，对我来说都有一种难以抵抗的诱惑。我还记得小时候住平房，自己学了一声喵叫录到磁带里，然后用最大的音量放出来，结果邻居家的小白猫听见了，窜进我家的纱门，那种欣喜是难以言表的。然而别人家的猫毕竟只能是客人，这个恋猫情结就一直到了自己独立生活的时候，才有了进展。&lt;/p&gt;

&lt;p&gt;很多人对猫有误解，认为相对于狗而言，猫不忠诚，养不家，不认人。甚至认为猫很势利，你有吃的就对你好，没吃的就可以不理你，甚至出走。自己养猫之后，发现这些说法全都是误解。猫不但会认人，而且会思念自己喜欢的人。很多人盲目的认为忠诚是优点，而我觉得狗那种“无条件的忠诚”，其实是虚伪而危险的。狗往往对主人表现得很忠诚，而对其他人就凶神恶煞的。人们都说“狗仗人势”就是这个道理，狗的忠诚里面显露出来的其实是一个字：贱。&lt;/p&gt;

&lt;p&gt;你能体会在监控摄像头里看到一只猫，用各种姿势躺在各种位置，望着家门口，盼着你回家的情形吗？出远门旅游的时候，我都会请宠物保姆或者朋友帮我喂猫，去陪陪它。住父母家的时候，父母也没有少照顾它，喂它好吃的零食。可是他们告诉我，我不在家的时候，它就躲在我的房间里不出来，或者趴在地板上望着门口。它的心里有一个人，它在等他回家。所以等到你回家的时候，它就会热情的欢迎你，偎依在你身旁。&lt;/p&gt;

&lt;p&gt;猫和狗的不同点在于，猫是森林之王老虎的兄弟。相对于狗，猫具有更强的独立生存能力。猫并不觉得自己需要依赖人而活着，所以它们不会刻意去取悦人。就像任何独立的人一样，猫只对那些爱自己，关心自己的人好。所以在某种程度上，猫一旦对人产生了感情，那就是真爱，不会伪装，也没有目的性。人们都喜欢骂势利小人是“哈巴狗”，骂卖国贼是“走狗”，有谁见过用猫的名字来骂人的？&lt;/p&gt;

&lt;p&gt;猫是一种特别有灵性的动物，它们似乎能用直觉感受到人的友好程度，也能感觉到“杀气”。对于陌生人，他们会很快的决定是否对他们友好，或是上前去打招呼，或是赶紧俯身遁逃。一个有趣的事情是，我的猫一般不怕小孩子，它会跟他们保持两米远的距离，但不会逃跑。它会好奇的尾随，观察小孩子，根据他们的表现来决定如何对待他们。所以如果见到陌生的猫，它直接对你友好的话，那你可能确实是可爱的，保持了童心的人。&lt;/p&gt;

&lt;p&gt;猫是认得人的，而且记性非常好。帮我喂过猫的朋友，几个月之后再来的时候，它会直接出来跟他们表示友好，而不需要再经过熟悉的过程。对于特别亲密的人，它甚至能从电话里识别出她的声音，在旁边喵喵的想插话，在视频里抢镜头。我也帮朋友喂过几次猫，所以我知道他的猫后来也认得我了。当你走进朋友的屋子，它那种跟你打招呼的感觉，确切点说就是“朋友”。&lt;/p&gt;

&lt;p&gt;猫有自己的尊严，它们并不认为你是自己的主人。很多养猫的人都把猫叫做“主子”，把自己叫做“猫奴”或者“铲屎工”，就是这个原因。而其实呢，猫只是认为自己跟你是平等的，你不是它的主人，它也不是你的主人。猫的尊严使得它们会跟人保持一定的距离。如果它们不喜欢你靠那么近，或者你嘴里刚吃了东西有臭味，就会用手掌把你撑开。它还会很通情达理，如果它想要到你的另外一边去，它会尽量不踩到你。如果真需要从你身上踩过去，它会选择踩不痛的地方，我也不知道它是怎么学会这些“礼仪”的。&lt;/p&gt;

&lt;p&gt;猫表达爱的方式有很多种，其中一种就是用头来蹭你。几乎每天早上起床之前，它都会到我旁边，倒下来把头放在我的手心里，然后反复的蹭我的手。我很喜欢那毛茸茸的头和脆脆的猫耳朵在手里打转的感觉 :) 很多人不知道如何接近一只猫，过去就想摸它们，结果把猫吓跑了。其实正确的作法是伸出手不动，等它们主动来蹭你。&lt;/p&gt;

&lt;p&gt;猫的思维方式跟人很不一样，你似乎永远猜不到猫喜欢什么。我曾经给它买了很多玩具，各种球，用猫薄荷什么的引诱它去玩，还给它买了好几个不同样式的猫屋。最后我发现，你特地给它买的玩具和猫窝，它偏偏不用。它最喜欢的“玩具”，是破布带子，快递留下来的纸箱子，能发出咔嚓响声的塑料袋，把衣服夹子当成冰球踢。你的眼药水瓶子要是不藏好的话，每次要用都会发现在地上，然后你才发现它平时就是把它当球踢的…… 他最喜欢的“猫窝”，是我用来装衣服的筐子。猫薄荷可能让它 high 个一两次，但后来我发现它其实对这种“毒品”有反感情绪。兴奋过后似乎有一种内疚犯错的感觉，再给他就开始回避了，所以后来我就不再给它猫薄荷。它很喜欢睡在毛巾上面，所以我在沙发上放了一条毛巾，它大部分时间就睡在上面，而不会把其他地方都睡得是毛。&lt;/p&gt;

&lt;p&gt;有些人不知道，猫不可以吃人吃的东西，因为人的食物里面含有太多的盐，会对猫的身体产生有害的影响。我的猫上饭桌偷过两三次吃剩的食物，烤鸡腿之类的，被拖到地上去了。我并没有惩罚它，可是之后它就再也没有碰过饭桌上的食物。每次我吃东西，它就在旁边看我吃，但对食物一点都不感兴趣。开头会小心地把鼻子凑过来过来闻一闻，后来干脆闻都不闻了。我知道它心里在想什么：“你们人类口味可真奇怪，一看就知道不好吃 zzz ” 所以后来我就完全不担心吃剩的食物放在饭桌上了。&lt;/p&gt;

&lt;p&gt;还有一种误解是以为猫喜欢牛奶或者鱼，因为动画片里的猫都在喝牛奶，还有的会钓鱼。其实猫是不能喝牛奶的，因为它们的胃没法消化牛奶。大部分的猫也不喜欢吃鱼。很简单的道理，猫是非常怕水的动物，地上有点湿它都不会去踩，你说它怎么抓水里的鱼？如果在自然条件下它们不会抓鱼，那它们大概也不会喜欢吃鱼。这跟鲨鱼不喜欢吃人的道理是一样的。我的猫就很不喜欢吃鱼，如果你买了鱼肉做的猫粮或者鱼肉罐头，它是不会吃的，就算饿慌了吃了一点，也会呕吐或者拉肚子。它最喜欢吃鸡，而且很喜欢看电视里放鸟的视频。如果它看到屋外有鸟，它还会“喳喳”地学鸟叫。那是一种让人惊奇的现象。&lt;/p&gt;

&lt;p&gt;我在国内看到有些“猫主题咖啡店”，店里有很多猫跑来跑去的，顾客们喜欢拿自己的饮料和蛋糕去喂那些猫，其实是很不好的做法。如果猫吃饱了猫粮，是不会想要人的食物的，所以我觉得这些咖啡店应该是在故意克扣猫的食物，让他们处于饥饿的状态，目的是为了让它们去吃顾客的食物，让不知情的顾客认为这些猫很好客。里面的猫看起来都不大健康，甚至可能有严重的疾病。他们在长期争夺顾客食物的竞争中，逐渐失去了自己的尊严，失去了文静的性格，甚至变得粗鲁，直接跳到你身上就赖在那里不下去了。真正爱猫的人是不会光顾那种咖啡店的。&lt;/p&gt;

&lt;p&gt;猫是非常爱干净的动物，它会在猫砂盆里大小便，然后把它盖起来没有味道。猫一天中的时间，很大部分都在梳洗自己，它会把自己舔得干干净净，一点都不臭，亲近的时候会闻到一种淡淡的体香。两年以来我从来不需要给它洗澡，却一直那么干净。干净到那种我亲吻它之后有帮它舔毛的冲动…… 朋友听了对我说：“你可别真的帮它舔毛啊！不然人家还得重新舔一遍，因为嫌弃你的口水不干净 :) ” 那么猫怎么清洁自己头上的毛呢？显然舌头是舔不到的。它会把口水弄到前掌上，然后用手掌洗脸，洗头发……&lt;/p&gt;

&lt;p&gt;我不仅爱猫，尊敬猫，我还从它们身上学到很多做人的道理。学它们不卑不亢，独立有尊严的性格，学它们明察秋毫，敏锐的直觉，学它们自在舒服，干净安逸的生活方式。亲爱的小莫奈，我就要去北京了。我知道你会想我的，我也会想你的，我会尽快回来跟你团聚。&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/07/21/love-cat</guid>
<pubDate>Fri, 21 Jul 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>生活的智慧</title>
<link>http://www.yinwang.org/blog-cn/2017/07/08/living-philosophy</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;生活的智慧&lt;/h2&gt;
                            &lt;p&gt;我曾经写过一篇文章，叫『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;』。再加上我总写一些技术性的文章，不认识我的人可能还以为我是个技术狂人，只知道谈论技术，不会生活。其实跟我接触紧密的人都知道，我是一个很会生活的人。&lt;/p&gt;

&lt;p&gt;确实，我花了很多心思来研究各种物品，它们的用法和组织方式。我用一种理性而智慧的方式对待生活中的方方面面，我的“生活智慧”并不亚于我的“编程智慧”。实际上这两种智慧的起源是相同的，它们都来自于一个人的内心，来自于他的本性。&lt;/p&gt;

&lt;p&gt;一个生活邋里邋遢，不会收拾和安排，匆匆忙忙，不会花钱的人，他写出来的代码大概也差不多蹩脚。反之，如果一个人生活里很有条理，他编程的时候肯定也无法原谅自己写出混乱复杂的代码。这种人还有一个特点，他们能把钱花在最恰当的地方，而不是一味的省钱，给自己造成不方便。&lt;/p&gt;

&lt;p&gt;实际上如果你开始琢磨生活里的智慧，就会发现很多编程的算法，几乎可以直接对应到生活里面。反之亦然，生活里的琐碎智慧，也可以启发编程的想法。&lt;/p&gt;

&lt;h3 id=&quot;整理房间&quot;&gt;整理房间&lt;/h3&gt;

&lt;p&gt;说到算法在生活里的应用，我首先想到的就是整理房间。你如何组织和摆放房间里的各种物品，使得它们美观温馨，不占太多地方，可以方便的拿到，用完之后又可以方便的放回去？你可能想不到，物品的管理，跟一种常见的编程概念有关系，那就是&lt;a href=&quot;http://baike.baidu.com/link?url=OIDztUHe2Igu6hS7ThUuHTc10QcVyEXQ1ED7qlRukBw7K8iZHjtSHt0RRjXA24hXIm2DKvMgtmdg6FrQiqy8Vrd4XaSy11_aRNP1vfQkzNfHWWIcbO_HNjDkYwNLo_khKwHyw-CEVtAT7ny21mmHOK&quot;&gt;哈夫曼编码&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;整理房间这看似简单的问题，耗费了很多人一辈子的时间还没琢磨清楚。很多人的房子虽然还算干净，东西却是任意摆放的，缺乏规律和组织，而且他们舍不得花钱买恰当的工具，于是他们就遇到这些问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;东西要用的时候就找不到了。&lt;/li&gt;
  &lt;li&gt;很多东西摆在蹩脚的地方，你每次用它都得先挪开另外一些东西。用完放回去又得再次挪开那些东西。&lt;/li&gt;
  &lt;li&gt;家里东西太多，空间不够摆放了，却全都舍不得扔。&lt;/li&gt;
  &lt;li&gt;家里的储物空间其实挺多，柜子抽屉很多，却由于没有合理的组织，所以放不下很多东西。&lt;/li&gt;
  &lt;li&gt;有些物品由于大小和形状特殊，不知道放在哪里好，放在哪里似乎都别扭。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多人每天都遇到这样的问题，却因为是“生活中的小事”，一直没有认真思考过，甚至认为自己是大忙人，赚大钱的，所以不屑于解决这种问题。而我则不一样，每当遇到这种问题，我都会像解决编程问题一样，认真而理性的思考，所以很多时候我会想出很合理的解决方案。&lt;/p&gt;

&lt;p&gt;对于物品的管理，我有一种通用的“智慧”，类似于哈夫曼编码。在哈夫曼编码里面，最常用的字符用最短的编码来表示，不常用的字符用长一点的编码来表示。这种概念应用到生活里面，那就是把最常用的物品摆在最容易拿到的地方，把不常用的物品摆在不大容易拿到的地方。&lt;/p&gt;

&lt;p&gt;举个例子，牙刷牙膏是每天都用的，所以我就把它们直接摆在浴室的案台上面。浴盐不是每天都用，我就把它放在下面的柜子里。越是不常用的东西，它在柜子里的位置也越靠里面。&lt;/p&gt;

&lt;h3 id=&quot;购置物品抛弃物品&quot;&gt;购置物品，抛弃物品&lt;/h3&gt;

&lt;p&gt;我发现那种家里东西太多，似乎没有空间存放的人，他们并没有仔细的思考过自己“需要”什么。他们舍不得扔掉旧的东西，即使自己永远也不会再用它们。他们会跟自己说：“这些东西当年可是花了多少多少钱买来的呀。舍不得扔！” 或者说：“虽然这个东西不值钱，可是勤俭节约是我们的光荣传统，积少成多。这也扔那也扔，买房子的钱从哪里来呀！”&lt;/p&gt;

&lt;p&gt;从编程和设计的角度来看这种人，这种人就是没有明白所谓“极简主义”，而且他们并没有对物品的价值做过理性的计算和分析，就盲目的崇尚所谓“节约”。&lt;/p&gt;

&lt;p&gt;做技术和设计的人也许都看过乔布斯设计房间的故事，还有那副标志性的照片。乔布斯坐在房间中间，旁边只有一盏灯，其它什么东西都没有…… 你也许没有想到，每一次搬家到遥远的地方，我也是这样开始生活的。我会从自己的物品里面挑选出自己最想留下来的，而把其它的都送人，卖掉或者扔掉。&lt;/p&gt;

&lt;p&gt;到了新的住处，我会购置一盏灯，一张气垫床，这样让我晚上看得见，在一个星期之内有睡的地方。然后，我会很快去商店挑选一张非常舒服的床，不惜血本把它买下来。床垫，床单，枕头之类的贴身物品，直接关系到人的休息和健康，所以对于它们我会很舍得花钱。你也许不知道，不同质量的这些东西，感觉真的相差很多。&lt;/p&gt;

&lt;p&gt;然后我会开始细心思考自己需要其它什么东西。我不会到商场里看到什么就买，每购置一件新的用品，我都会问自己这个问题：“我需要这个物品吗？它是否跟已有的物品的功能有冲突？它比起同样功能的物品有什么优势吗？它质量更好，更方便，更美观，更温馨？它会不会带来什么麻烦？会不会占用太多空间？它带来的价值相对于这些弊端，值得吗？”&lt;/p&gt;

&lt;p&gt;我会权衡所有这些需求。如果我还没有类似功能的物品，那么我会上网搜索类似作用的东西，看看有没有更好的，然后根据自己的判断力和其他人的评价，从中挑选一个最好的。我经常使用美国商店和 Amazon 的无条件退货功能。对同样功能的物品，我有时候会买好几个不同的过来，经过几天的试用，留下其中最好的一个，把其它的都退了。有时候有的东西过了退货期或者退不掉了，就送人或者扔掉。&lt;/p&gt;

&lt;p&gt;这样看上去似乎很残酷，很浪费，然而一旦我选好了一个物品，我以后就会一直记得它，我会记得我当初为什么选择了它，我会记得其它相似的产品有什么缺点。下一次再买类似的东西，我就会利用这些积累的智慧，只跟以前没见过的物品比较，而不会重复同样的过程。这样就不会给商家造成过多麻烦和过多的浪费。&lt;/p&gt;

&lt;p&gt;由于这种极简主义的方法，我的房子里很少有多余的物品。&lt;/p&gt;

&lt;h3 id=&quot;什么是浪费&quot;&gt;什么是浪费&lt;/h3&gt;

&lt;p&gt;很多人盲目的反对“浪费”，认为我们应该勤俭节约，扔了本来还可以用，或者可以吃的东西就是浪费。所以这种人买了东西，总是会一直把它们留着，自己做了菜或者在饭店点了菜，总是要把它吃完。他们没有理性的意识到，使用不好的劣质的产品，让自己的身体或者心理受损，吃过多食物损害自己的身体，影响自己的睡眠，那才是真正的浪费。&lt;/p&gt;

&lt;p&gt;使用高质量的，安全的产品，扔掉不好的产品，不吃过多的食物，表面上浪费了钱，实际上却是节约了钱。很多人，特别是老一辈的中国人，远远地低估了自己身体和健康的价值。年轻一点的时候拼命地省钱，克扣自己的身体。由于舍不得扔掉旧东西换新的，给自己的生活造成各种不方便，不愉快。&lt;/p&gt;

&lt;p&gt;年纪大一点的时候，发现身体有点不好了，很多地方开始出问题，又因为想省钱而不去找好的医生，因为省钱而不使用最好的医疗产品和设备，所以问题不能在早期得到防治。到后来，问题就越来越严重，最后到了不可收拾的地步。最后，他们把以前“节省”下来所有的钱都赔进去了，甚至还要多几倍，却还是难以很好的保全自己的身体……&lt;/p&gt;

&lt;p&gt;所以关于浪费这个事，我觉得每个人都应该做一些理性的分析，把账算清楚。你现在花掉几千块钱解决好生活上的一个问题，也许会在将来帮你节省几十万也说不定。有些人几毛钱都斤斤计较，你计较个几十年，总共加起来能节省多少？&lt;/p&gt;

&lt;p&gt;有些人几块钱一大卷的专用垃圾袋都舍不得买，用超市购物留下来的袋子装垃圾。这种袋子经常是拎东西的时候被物品穿了孔的，所以他们就发现厨房的垃圾漏出来，臭气熏天，难以打扫干净。理解到这个道理，我从来就不用超市的购物袋来装垃圾。专用的垃圾袋很靠谱不会漏，价格微乎其微，我省那点钱干什么？&lt;/p&gt;

&lt;p&gt;理性一点的人都会“优化”节约这件事，这就是算法的思想。我的技巧是优先在贵的东西上面节约，而在不那么贵的东西上面就放松一些。比如我在车子上花几天工夫研究，买一个好用又不贵，不容易出毛病的，一下子比别人多省下来几万块钱。然后我就可以在贴身用品上面多花钱，买最安全最舒服的。我就可以不吝惜钱去找好的医生，用最先进的医疗设施，保持身体的最佳状态。虽然为此花了好几千，但比起买车省下来的几万，只是一个零头而已。&lt;/p&gt;

&lt;p&gt;相比之下，我认识一些人开着保时捷，自己家里的用品质量和安排方式却档次很低，该有的东西没有，自己的孩子病了还舍不得钱看医生。省下几乎所有其它开支去买保时捷，我也是醉了 :P&lt;/p&gt;

&lt;h3 id=&quot;价格和价值&quot;&gt;价格和价值&lt;/h3&gt;

&lt;p&gt;还有一项智慧，那就是物品的好坏很多时候不是价钱决定的。很多人以为最贵的东西一定是最好的，那是因为他们根本不会识货，所以就让价格来帮他们选择。经过许许多多的比较，我发现好的商品往往都不是最贵的，当然也不排除它们确实就是最贵的。&lt;/p&gt;

&lt;p&gt;举一个例子，很多人都以为 Beats 的耳机是最好的，因为它卖的很贵。可是经过研究网上的评价，自己的试听，我发现这种流行的大牌子，其实都不咋滴。实际上 Beats 耳机的音色属于最差的之一，声音特别模糊特别钝，重音太重，以至于你没法听清楚音乐的旋律。&lt;/p&gt;

&lt;p&gt;后来我发现，有一种耳机叫做“专业录音棚监听耳机”。这种耳机由于要给专业录音师使用，所以很重视对音乐原封不动的还原，而不是盲目的加强低音，让你感觉很有节奏感。于是我发现了 Audio-Technica ATH-M50，还有 AKG K-712。这两款耳机价格都不是特别贵，音质却跟 Beats 最贵的型号都天上地下，舒适程度也好很多。后来我发现凡是识货的人，几乎人手一个 ATH-M50！&lt;/p&gt;

&lt;p&gt;另外 Beats 的蓝牙音箱也不怎么好。其实有个叫 Symphonized 的牌子，出产一种木制的&lt;a href=&quot;https://www.amazon.com/Symphonized-NXT-Walnut-Bluetooth-Compatible/dp/B00OVG190E&quot;&gt;蓝牙音箱&lt;/a&gt;。虽然价格只是 Beats 蓝牙音箱的零头，音质和最大音量都要比 Beats 高许多，还比 Beats 的音箱小巧。&lt;/p&gt;

&lt;h3 id=&quot;需求和品质&quot;&gt;需求和品质&lt;/h3&gt;

&lt;p&gt;之前说到我买了两个音质超级好的耳机，然而后来从“需求”的角度出发，我发现自己其实是不需要这种头戴耳机的。一来它们比较大，不方便携带，二来它们罩在耳朵上，还是容易引起耳朵感觉热。&lt;/p&gt;

&lt;p&gt;我需要那么高的音质吗？其实有些耳塞的音质已经能满足我的需求，小巧又不会闷着耳朵。所以虽然我花了几百美元买了两个大耳机，平时在办公室用得最多的，却是一个叫 &lt;a href=&quot;https://www.amazon.com/Symphonized-Earbuds-Noise-isolating-Headphones-Luminescent/dp/B01D3QZB6U&quot;&gt;Symphonized&lt;/a&gt; 牌子的便宜耳塞。ATH-M50 放在办公桌上，只用过一两次。后来这两个大耳机就被我送人了 :P&lt;/p&gt;

&lt;p&gt;这个 Symphonized 牌子的耳塞，在同等价格的耳塞里面不但音质最好，而且它放在耳朵里面的感觉，它的信号线的材质，都是感觉最舒服的。&lt;/p&gt;

&lt;p&gt;这个故事告诉我，每个人的需求都不一样，你必须从自己的需求出发，而不能盲目的追求某种最好的品质，比如音质。耳机对于我的价值，不但在于音质，还在于它是否便于携带，耳朵是否舒适。在这么多方面权衡之后，我发现自己其实可以稍微降低对音质的“发烧”追求。&lt;/p&gt;

&lt;h3 id=&quot;价格不贵的好产品的例子&quot;&gt;价格不贵的好产品的例子&lt;/h3&gt;

&lt;p&gt;同样的原理，我发现了好些价格不贵，质量却比贵的还好的产品。比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;家里的充电吸尘器，我选择了 Hoover，而不是贼贵，吸力还不怎么好的 Dyson。&lt;/li&gt;
  &lt;li&gt;机器人吸尘器，我选择了一个老版本的 Neato，而不是最贵的 iRobot，也没有买最贵型号的 Neato，可以远程 WiFi 遥控的那种。&lt;/li&gt;
  &lt;li&gt;电视机，我随便买了个非 4K 的 55 寸 Sony，而没有买昂贵的 4K 电视。实话说，看起来很爽，真没感觉少了什么。4K 电视完全没必要，片源稀少，而且真有人在乎那么高的清晰度吗？&lt;/li&gt;
  &lt;li&gt;Amazon Basics 的苹果充电线，比苹果原厂的还结实耐用，摸起来感觉也好一些（塑料而不是橡胶感觉），价格却便宜很多。所以我买了好多根，每个房间两三根，车上两根，办公室一根，背包里还带一根跟充电宝一起用。这样就不用把一根充电线到处带。&lt;/li&gt;
  &lt;li&gt;汽车，我买了个本田雅阁 V6，而不是奔驰宝马之类的。实话说，这个本田就是比我女票的奔驰好开。引擎代码被我 hack 了之后就更好开了 :)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;功能覆盖不重复&quot;&gt;功能覆盖不重复&lt;/h3&gt;

&lt;p&gt;从需求出发，我精挑细选了很多的物品，它们的功能处于一种“覆盖而不重复”的状态。覆盖是说我的每一种需求，都有物品来满足它，不重复是说同一种需求没有重复的物品。这个不重复的特点，使得我在做一件事的时候，不需要每次都从不同的物品里面挑选。&lt;/p&gt;

&lt;p&gt;举一个例子，我之前有很多的手机充电器。每买一个苹果的产品就有一个充电器，iPhone 充电器，iPad 充电器，…… 然后你就发现 iPhone 自带的充电器速度很慢，因为它的输出电流只有 1A。iPad 充电器输出有 2.2A，却只有一个输出端口。后来我从 Amazon 买了一些 Anker 的快速充电器，有好几个输出端口那种，每个输出都可以动态变化，最高可以超过 2A，可以用于所有的 USB 设备充电。&lt;/p&gt;

&lt;p&gt;我在每个房间里都放了一个这种充电器，给它们配上足够多的充电线。这样我就可以在任何房间充电，而不用把手机放在固定的地方。这下子我就可以把 iPhone 的充电器都扔掉了，因为理智告诉我，有了 Anker 的充电器，我再也不会想用 iPhone 自带的充电器了。至于 iPad 的充电器，我拿到公司去用。因为在公司我只需要给一个设备充电，即我的手机，所以 iPad 的充电器正好满足这个需求，还很快。&lt;/p&gt;

&lt;p&gt;同样的道理，每买一个 iPhone 我都会直接把它的耳机扔掉，因为它远远不如我的 Symphonized 耳塞，而且很容易从耳朵里滑落出来，基本没法用。&lt;/p&gt;

&lt;p&gt;由于这种功能不重复的删除法，我的物品数量一直处于合理可控制的范围。还有一个好处就是要做一件事的时候我不需要进行选择，因为能做这件事的产品只有一种。&lt;/p&gt;

&lt;p&gt;对于家具和衣物也是差不多的原理。如果你发现有东西两年都没有用过，那很有可能你永远都不会再用它。由于你不再需要它，不管你花了多少钱买来的，你都可以把它扔掉，送人，或者二手卖掉了。&lt;/p&gt;

&lt;h3 id=&quot;为多个位置购置同样的物品&quot;&gt;为多个位置购置同样的物品&lt;/h3&gt;

&lt;p&gt;有些物品是如此的常用，以至于你在家也需要它，在公司（学校）也需要它。这样的物品包括耳机，手机充电线，电脑充电器，茶壶，等等。如果这样的物品你只买了一个，你却需要在两个地方待（比如家里，公司里），那么你很可能需要把它两边带。&lt;/p&gt;

&lt;p&gt;有些物品每次带走其实都需要花一点工夫，比如充电线需要拔下来折叠好，耳机需要把线收好，电脑充电器需要拔下来，收线。到了目的地，你又得把这些东西拿出来，把缠起来的线整理开。有些东西，比如电脑充电器，其实有一定的重量，背来背去的加重身体的负担，在大热天更加不舒服。还有茶壶，这东西每天都带来带去，那就很麻烦了。&lt;/p&gt;

&lt;p&gt;如果你发现一个东西每次都需要带着走，那么你就可以考虑再买一个一模一样的物品，把它们分别放置在多个位置，这样你就不需要把它到处带了。&lt;/p&gt;

&lt;p&gt;这就是为什么我的耳机，手机充电线，茶壶，电脑充电器之类的东西，总喜欢买两个。一个放在家里，一个放在公司。有些东西，比如充电宝和手机线，我还会在车上备置一个。因为很多时候开车出去玩都会忘了带充电宝和充电线，下车出去玩就开始担心手机没电，特别是在某些荒郊野外爬山的地方。所以在车上常备一套这种东西，出去的时候就总是有备用的。&lt;/p&gt;

&lt;p&gt;我工作过的某公司曾经来了一个实习生，他经常跟我借手机充电线，理由是：“我的线今天又忘了带，忘在家里了。” 借人家东西一两次还好，后来他就开始天天借我的，因为我有一根线总是留在公司的。这个实习生就是没有明白我这里说的道理。一根充电线几块钱都懒得买，天天借人家的，给自己和他人都造成不方便。&lt;/p&gt;

&lt;h3 id=&quot;收纳物品&quot;&gt;收纳物品&lt;/h3&gt;

&lt;p&gt;精挑细选了物品，然后你还需要考虑如何整理和放置它们，这就叫做所谓“收纳”。收纳东西其实有很多的智慧，跟编程里面的概念非常类似。不会收纳物品的人，往往代码也会写的很乱，不容易理解，因为他们同样不明白代码应该如何“放置”。&lt;/p&gt;

&lt;p&gt;有些人除了室内装好的柜子，抽屉，架子，从来不自己购置收纳产品，所以他们总是发现东西收拾不好，不知道该放哪里，或者放进去就找不到了。&lt;/p&gt;

&lt;p&gt;这其实就是我在『编程的智慧』一文里面指出的问题，如果你的函数里面有太多行代码，就会很难理解。如果你把所有物品都放进一个大抽屉，那么这些东西就会杂乱无章，而且会随着抽屉的移动到处乱跑。&lt;/p&gt;

&lt;p&gt;所以稍微懂得收纳一点的人，都会买一些小盒子或者筐子放在抽屉里，把东西分门别类的放进去，这样它们就不会乱动，而且很容易找到。&lt;/p&gt;

&lt;p&gt;同样的原理也适用于柜子。很多人因为有了衣柜，就完全依赖于它里面的隔板。可是衣柜里的空间往往是很大块的，所以有时候你只放一点东西进去，它就会在逻辑上占据整个空间。你为了分门别类，只好把其它东西放进其它隔间。后来你就发现隔间不够用了，后来你就发现自己开始到处乱塞东西，然后就完全乱了。还有人喜欢把很多衣服叠在一起，放进衣柜的隔间里。但是这隔间挺大，所以衣服垒起来很高。这种垒起来的衣物是很容易像山崩一样垮下来的，造成很多的麻烦。&lt;/p&gt;

&lt;p&gt;聪明一点的人都会使用一种好东西，叫做筐子。筐子是如此的有用，以至于我总是在考虑某个地方是不是该有一个筐子。我的衣橱里有各种大小的筐子，它们分门别类的容纳我的衣物：袜子，内裤，T恤，毛巾，…… 还有一个脏衣服筐，一个小的脏袜子筐。还有一个筐子里面铺上一张很舒服的毛巾，给我的猫睡觉用，这样他就不会睡我的其他筐子，搞得全是猫毛 :P&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/cat-in-basket2.jpg&quot; width=&quot;240&quot;&gt;&lt;/p&gt;

&lt;p&gt;我的客厅里和厨房里也有各种筐子。分门别类的放置各种物品：书籍，遥控器，背包，食物，调料，…… 我还特别在出门的地方放几个筐子，这样我出门需要的东西都可以放在那里。比如上班用的电脑包，雨伞，帽子，钥匙等等。&lt;/p&gt;

&lt;p&gt;另外，不但需要考虑大小，我还会考虑这些筐子的温馨程度。显然我不会用塑料盒子来装所有这些东西。对于卧室衣橱里的筐子，一般都是藤条编制，里面衬有印花美观的布料。客厅里也有很多这种筐子。大门口放背包的筐子是一个粗糙的藤条筐，没有布在里面，因为那些东西可能有一点脏，有时候在外面会放在地上的。&lt;/p&gt;

&lt;p&gt;电线也是一个讨厌的东西，有些人的电线很长，就让它到处乱跑。其实好的办法是买一些尼龙搭扣的电线收纳带子，就像 ThinkPad 充电器上面带的那种，把过长的电线都折叠起来绑好。这样你的电视柜附近才会井然有序，容易打扫。&lt;/p&gt;

&lt;h3 id=&quot;容器过剩&quot;&gt;容器过剩&lt;/h3&gt;

&lt;p&gt;说到收纳物品，有可能走向另外一个极端，那就是家里的空容器太多。有人喜欢把物品的包装盒，食物的瓶子之类都留着，心想以后可以用作收纳容器。这种“以后用于收纳”的想法，就是很多人家里的储藏空间不够用的原因，因为这些空盒子，空瓶子占用了太多空间，而它们几乎永远是空着的，你永远也不会用它们装任何东西！&lt;/p&gt;

&lt;p&gt;还有些人不丢盒子，原因是为了准备以后搬家的时候，可以有一个合适的盒子来保护那件物品，特别是一些电器，比如电饭煲，电视机之类的。所以他们的储物空间里堆满了各种电器的包装盒，以及里面的泡沫。我也曾经这样做，我买了一个很好的电饭煲，所以我希望搬家的时候它得到很好的保护。&lt;/p&gt;

&lt;p&gt;可是后来我就发现家里的储物空间被这些盒子塞满了，于是我开始理性的思考这个问题。搬家是一件经常做的事情吗？不是。生活才是经常做的事情。我为了一件偶尔才做一次的事，损失了我每天都需要的储物空间，让我的生活变得蹩脚，不舒服。&lt;/p&gt;

&lt;p&gt;而且电饭煲之类的东西，不管是多好的，花了多少钱买的，搬家时真的需要很好的保护吗？不是的。这些电器的包装盒之所以如此严密地保护它们，是为了防止商家在长途大量运输它们的时候撞坏，以至于无法销售。然而普通人搬家，其实是一件从容不迫，小心轻放，不大可能撞坏东西的事情。后来我发现，像电饭煲一类的东西，最多拿个厨房毛巾裹一下，跟其它厨具餐具一起放进一个大箱子里，就能在搬家时达到很好的保护效果了，根本不需要它原来的包装盒。&lt;/p&gt;

&lt;p&gt;很多人留着包装盒是为了防止需要退货的情况，我也有这种需求。可是很多人把盒子放起来，然后就忘了它们在那里占据着空间，不知不觉中空间越来越少。我一般把包装盒保留几天，我会把它们放在很显眼的地方，比如厨房的入口处，这样我每次进入厨房都会看到它，这样我就不会忘记扔掉它。过了几天之后，我确信我喜欢这东西，不想退货，我就把这盒子及时扔掉。这样一来，我家里的储物空间全都装着有用的物品，而不是空的容器。&lt;/p&gt;

&lt;h3 id=&quot;购置很多一模一样的袜子&quot;&gt;购置很多一模一样的袜子&lt;/h3&gt;

&lt;p&gt;我从别人那里学过来的一个小窍门，那就是买很多一模一样的袜子。以前我的袜子都是这里买一双那里买一双，到了后来它们的颜色，样式，长度都不一样。每次洗了袜子你都需要给它们配对，卷起来收好。&lt;/p&gt;

&lt;p&gt;但是如果你买很多一模一样的袜子，每天穿一双就扔进一个专门放“穿过袜子”的筐子。由于每双袜子只穿一次，它们就不会臭。然后你就可以两个星期甚至一个月才洗一次袜子。洗了袜子之后你不需要把它们配对折叠，直接拿出来扔进一个“干净袜子”的筐子就行了 :)&lt;/p&gt;

&lt;p&gt;对于内裤和T恤，我也有类似的办法。每次洗了衣服，折那么多T恤都是一件讨厌的事情。我的T恤是不会皱的，所以后来我发现干脆不要叠T恤。买一个专门放T恤的筐子，洗了之后就把它们扔到里面，要用的时候抓出来就可以了。&lt;/p&gt;

&lt;p&gt;由于使用了筐子来收纳这些小衣物，虽然筐子里面乱乱的，可是整个房间看起来却井井有条。&lt;/p&gt;

&lt;h3 id=&quot;对清洁用品的研究&quot;&gt;对清洁用品的研究&lt;/h3&gt;

&lt;p&gt;另外，清洁用品和清洁方式也是需要讲究的。很多人可能以为像我这样的“大师”肯定不屑于这种琐事，而其实我对家居清洁的研究，可以跟专业的清洁大妈相比。实际上，我曾经向专业的清洁大妈请教过，学会了挺多技巧 :P 下面我就稍微提点一下。因为清洁窍门内容太多，都可以单独写成一本书了，我这里肯定不可能面面俱到。&lt;/p&gt;

&lt;p&gt;首先我想指出一种中国人很常见的误区，那就是他们的家里分“脏的地方”和“干净的地方”。很多人认为卫生间是脏的，湿的，马桶是脏的，阳台是脏的，而卧室是干净的。然后他们就把问题复杂化了，从客厅进卧室需要换鞋，从浴室出来需要换鞋，上阳台需要换鞋。他们在浴室里洗拖把，所以浴室里就有好几个盆子，分别有标签：洗脸的，洗内衣的，洗袜子的，给我洗脚的，洗拖把的，给老爸洗臭脚的…… 这么多盆子放在哪，是一个严重的问题。&lt;/p&gt;

&lt;p&gt;很多家庭的某些物品被认为是“应该有灰”的地方，比如冰箱上面，马桶下面的座子，所以他们把那些地方置之不理。家里约定的规矩是，不准去碰那些地方！或者他们为了“方便打扫”，就盖一层塑料纸，甚至改一些报纸或者超市的促销广告在那些地方。然后你就发现整个屋子里有好几处地方盖着这种垃圾一样的纸，真个屋子就变得不温馨，不舒服了。他们心里想的是要是那些塑料纸粘了灰，就扔掉换了，但实际情况是那塑料纸上一直有一层很厚的灰尘，根本没人管它，跟没有那塑料纸没什么区别。&lt;/p&gt;

&lt;p&gt;与其把家里搞得这么复杂，设立各种条款要家人遵守，你还不如想个办法，把所有区域都变得一样干净，这样你在家里只需要一双拖鞋就可以到处走，随地都可以坐，也不怕不小心碰一手的灰，“市容市貌”也好很多。你只需要买一个充电的手持吸尘器，就完全不需要担心这些灰尘的问题。&lt;/p&gt;

&lt;p&gt;另外，家里其实根本不应该有拖把这种东西，还需要一个桶或者盆子来洗它。平时合理打扫的房子根本不应该有很多脏东西，所以不需要拖把这样重量级的清洁设备。你应该考虑买一个 Swiffer 之类的地板擦，它用的是一次性的擦布。地板上沾了一点灰尘渣滓，轻轻擦一下就干净，擦布脏了扔掉就是了，根本不需要清洗。&lt;/p&gt;

&lt;p&gt;然后我想谈谈灰尘的处理。很多人不管什么东西都喜欢拿湿抹布擦，然后就发现本来漂浮在表面的灰尘，变成泥浆糊在了物体表面，后来就很难清洗干净了。很多人认为湿抹布可以防止灰尘飞扬，对健康好。可是他们没有发现，有更好的作法可以防止灰尘飞扬，却不需要把灰尘变成泥浆。&lt;/p&gt;

&lt;p&gt;我很早发现了这个问题，发现真不能用湿抹布擦，后来我就开始用手持吸尘器去吸那些灰。这种吸尘器吸角落缝隙效果还可以，但是对于像茶几一样的有很大面的家具，覆盖就不是很好，总是留下很多灰尘。可是像茶几这样的东西，你又不能拿吸地板的大吸尘器去吸。怎么办呢？&lt;/p&gt;

&lt;p&gt;后来，一位清洁大妈教会了我一个窍门，这个窍门就是 Swiffer。Swiffer 是一种地板擦，它配有两种一次性的擦纸，一种是干的，一种是湿的。干的那种擦纸可以吸附灰尘，把它用静电吸起来，而不会把灰尘推着到处跑，飞起来。这位清洁大妈的重大发现就是，Swiffer 的这种擦纸，不但可以安装在地拖上用来擦地，而且可以直接当成抹布拿在手上擦东西。&lt;/p&gt;

&lt;p&gt;所以 Swiffer 擦纸就成为了新一代的鸡毛掸子，但跟鸡毛掸子不一样，它不会让灰尘飞起来。后来家具和物品上面的灰尘，基本就是用 Swiffer 擦纸吸掉的，然后再用湿的厨房纸巾一擦，就很干净了。Swiffer 的擦纸擦了之后就可以直接扔掉，省了不少事。&lt;/p&gt;

&lt;p&gt;在美国，厨房纸巾是很常见的东西，擦脏了就扔掉。很多中国人还在用毛巾擦东西，擦脏了还得去用水淘它。一般你得有好几条抹布，有些抹布拿去擦了厕所，你就不能用来擦厨房了，你得记住哪条是“脏抹布”，哪条是“干净抹布”…… 麻不麻烦？由于厨房纸巾结实又不掉渣，甚至可以用水冲了再用，基本可以当毛巾来用，我很多时候擦东西都只用厨房纸巾，把一个地方擦干净了就扔掉。&lt;/p&gt;

&lt;p&gt;但有一个例外，厨房纸巾用来擦玻璃或者镜子，无论如何都会留下一些微小的残渣，这在普通家具上面是看不到的。所以擦玻璃或者镜子，我一般不用纸巾，而是用微纤维抹布。这种微纤维抹布不会留下任何痕迹，弄脏了很容易清洗干净。另外，擦玻璃有专用的玻璃清洁剂（比如 Invisible Glass），不会留下任何痕迹的那种。&lt;/p&gt;

&lt;p&gt;有些人擦厨房里的案台和灶具，喜欢在纸巾或者毛巾上面弄点餐具洗洁精，以为这样擦得干净。可是餐具洗洁精很不容易清干净，一旦放上去你就需要很多遍的清水才能去掉，这实在是太麻烦了。&lt;/p&gt;

&lt;p&gt;其实最好的办法不是用餐具洗洁精，而是用像 Lysol，Clorox 之类的清洁剂或者擦巾。Lysol 之类的产品里面含有可挥发的氨，它去污力很强，无毒，不怎么伤手，而且擦了之后可以不用清水漂洗，自己就挥发掉了。&lt;/p&gt;

&lt;p&gt;不过除非表面有清水擦不掉的脏东西，我一般也不用 Lysol，毕竟它还是有一点味道，而且很多时候你没必要使用它的杀菌能力。所以我一般就用清水，偶尔遇到清水擦不干净的，就用 Lysol。&lt;/p&gt;

&lt;p&gt;总之，清洁用品和技巧有很多门类，我这里只是抛砖引玉，提示大家这里面有可以研究的学问。我就不多啰嗦了，具体的问题还得靠你自己去分析和处理。&lt;/p&gt;

&lt;h3 id=&quot;洗碗&quot;&gt;洗碗&lt;/h3&gt;

&lt;p&gt;洗碗是世界上最讨厌的活了。很多中国家庭里面常见的现象就是，吃了饭马上就必须有一个人去刷碗。这样很不好，本来享受了美食，应该惬意地喝点茶，聊聊天，家人之间交流感情。结果吃了饭，大家想的是该谁去洗碗，然后一个人去厨房洗碗，没法交流了。大家都不想洗就更麻烦，甚至伤感情。&lt;/p&gt;

&lt;p&gt;对于这个问题，我的方案是，吃了饭大家都休息，不要去洗碗。如果需要腾出桌子喝茶，那可以把碗都扔到洗碗池里面，然后开始休息。想一下，你们那么急着洗碗到底有什么好处？没有。&lt;/p&gt;

&lt;p&gt;还有一个更好的办法，那就是使用洗碗机。我觉得洗碗机是世界上最伟大的发明之一。洗碗机是美国房子的标配，很多在美国的中国人却把它用作碗柜，从来不启动它。他们觉得洗碗机会很费水费电，所以舍不得用。这是一个误区，如果你观察洗碗机的构造，就会发现它不会用很多水。它的原理是用一个很大的涡轮把少量的水高速喷出，水里面含有烈性的洗涤剂，这样冲刷餐具，达到清洁的目的。所以终究它不会用掉很多水，肯定比洗澡水要少很多，而且看起来也不怎么费电。&lt;/p&gt;

&lt;p&gt;这个我是做过实验的，发现用洗碗机之后我的水电费并没有比不用它的时候增加多少。洗碗机的专用洗涤剂也不贵。我见过有人为了“节约”，想把洗涤剂的小包切开分成两次用，结果里面的液体流出来，很伤手。几毛钱一包的东西，就不必这么省了吧 :P&lt;/p&gt;

&lt;p&gt;那么单身汉平时在家就吃一点东西，没有几个碗，放进洗碗机不是大材小用吗？我再告诉你一个诀窍吧。我单身的时候也有这种想法，但是后来发现一个窍门。那就是去买很多碗，盘子，叉子，筷子，就像你有一大家子人一样。我之前一个人的时候，给自己买了至少十套餐具，目的就是利用这个洗碗机。你每次吃饭拿出干净的碗和餐具，吃完就丢到洗碗机里，但不启动洗碗机，等它积累起来。等洗碗机装满了，或者过了两三天还没有装满，你就启动洗碗机…… 明白了吧？&lt;/p&gt;

&lt;h3 id=&quot;开车&quot;&gt;开车&lt;/h3&gt;

&lt;p&gt;说了这么多家务事，来讲讲出门的事情。很多中国人开车的时候很着急，喜欢紧跟在别人屁股后面，生怕旁边有车插进来。这种人到了美国还是一样的想法，要是别人老从旁边插进我的车道，那我不就慢下来了吗？所以我就紧跟前面车的屁股，这样别人就插不进来了。&lt;/p&gt;

&lt;p&gt;这种人就是没有仔细分析过问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;有多大的概率，有人会从旁边车道插到你的前面？&lt;/li&gt;
  &lt;li&gt;对于每一辆插进来的车，它会延迟你多少时间到达？&lt;/li&gt;
  &lt;li&gt;你是否在乎这点时间？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等你仔细分析和观察之后，就发现就算你跟前车保持很长的距离，任凭别人插到你前面，也不会比原来的时间慢多少。因为汽车本来就跑得很快，而并不会有多少人会想插到你前面，不是每个人都像你这么急！&lt;/p&gt;

&lt;p&gt;而且跟前车屁股太近有一个很不好的问题，那就是如果前车踩刹车，你就得踩刹车。到后来你的神经就完全被前面的司机控制了，别人刹车你得很快做出反应，不然就可能撞车。你当然可以随时保持警惕，避免撞车，但如果你保持比较大的车距，那么就不需要这么紧张了。你可以有比较长的反应时间，优哉游哉的开你的车，不受别人的左右。&lt;/p&gt;

&lt;h3 id=&quot;各种贴膜&quot;&gt;各种贴膜&lt;/h3&gt;

&lt;p&gt;经常看到有人拿着一个贴膜的手机，那膜都磨花得不行了，还有些人的膜很硬，导致触屏响应严重受影响。经过一番道理，我说服了他们其中一些人把膜扔了。扔掉之后，他们才发现原来的屏幕是那么的好看那么的亮，响应是如此的流畅！然后他们才开始遗憾，为什么自己一直在用一个比现在差很多的手机。&lt;/p&gt;

&lt;p&gt;我对人们对手机屏幕的爱护真是深感震撼。要是他们有那么爱护自己的身体，那该多好啊。&lt;/p&gt;

&lt;p&gt;我是怎么说服他们揭掉手机膜的呢？我告诉他们，我的第一台智能手机也贴了膜。等到换新手机的时候，我把它的膜揭开，然后用钥匙和刀子在上面使劲的划了好半天。结果，屏幕完好无损，连一点细微的划痕都没有！&lt;/p&gt;

&lt;p&gt;经过很简单的实验，你就可以让自己相信手机屏幕的玻璃是如此之硬，它是完全不怕钥匙之类的硬物摩擦的。我拿来做试验的手机是 2008 年的产物了，现在的手机屏玻璃又更新换代，肯定更不怕划伤了。所以手机贴膜真是多此一举，害得自己不能更好的享受重金买来的物品。&lt;/p&gt;

&lt;p&gt;还有一种常见的“膜”，就是木头桌子上面放个胶皮或者玻璃板。很多人买了很好的实木桌子，觉得价格很贵，所以又买了一张胶皮来保护它。后来又发现这胶皮价格也不便宜，所以又买了几张小胶皮来保护这张大胶皮。所有的碗都必须放在小胶皮上面…… 最后，你就发现你用的不是豪华的实木餐桌了，而是一张胶皮桌子。你花了几千块钱，结果买了一张胶皮桌子！&lt;/p&gt;

&lt;p&gt;实际上实木桌子根本就不需要保护，它非常的结实耐用。木头给人的感觉是温馨舒服的，却用一张胶皮盖起来，完全抹杀了这种感觉。如果没有胶皮，正常的磨损不可避免，然而桌子的魅力不会改变。这些微小的划痕，正好增加了这种木头桌子的魅力，不是吗。我就见过商店里卖这种有划痕和烫伤的实木桌子的，中间还有树洞。卖的很贵，因为它很有感觉。&lt;/p&gt;

&lt;p&gt;不过这种桌子上面，倒可以在吃饭的位置放上漂亮的餐垫，这样吃饭的时候餐具不会在上面发出磕碰声，感觉更加舒服温馨。&lt;/p&gt;

&lt;p&gt;同样的道理，你也不应该把各种遥控器放进保护套。它影响了你对遥控器的使用感觉，有时候模糊得看不清楚按钮上的字，却并不能让遥控器用得更久。实际情况是电器的换代速度比遥控器的寿命要短很多，电器过时换代的时候，遥控器往往还是好好的。而且像遥控器那么便宜的东西，真有必要保护它吗？上网搜一下“万能遥控器”卖多少钱就知道了。&lt;/p&gt;

&lt;p&gt;我买车的时候，车行向我推荐一种“皮革保护涂料”，说喷上去之后它可以在皮革表面形成一层保护膜，可以使座椅不怕水，不怕脏东西，这样车再卖出去的时候可以保值。我拒绝了这个推销，调侃道：“我希望坐在皮革上面，而不是坐在不知道什么化学材料做成的涂料上面 :)”&lt;/p&gt;

&lt;p&gt;这是一样的道理：我买了皮革座椅的车子，我希望享受它，而不是损害自己的舒适程度来保护它。买来的物品是为人服务的，而不是用来保护起来保值的。后来这车子开了几年，座椅还像新的一样，这说明这些什么皮座椅保护涂料根本就没有必要。&lt;/p&gt;

&lt;p&gt;那么同样的原理，是不是说我们不需要给 iPhone 买保护壳呢？不是的，iPhone 是一个不幸的个例。因为 iPhone 本来的壳子太滑太圆了，你不给它装个壳子是注定要滑落到地上的！所以不得已，你是得给 iPhone 买个壳子。&lt;/p&gt;

&lt;h3 id=&quot;中国人的洁癖&quot;&gt;中国人的洁癖&lt;/h3&gt;

&lt;p&gt;很多中国人有一种非理性的洁癖，或者“健康癖”。他们总觉得外面是脏的，所以如果出去坐过的裤子，就不能再坐在家里的床上或者沙发上。如果你去医院坐过，那可就得一回家就把裤子脱下来洗了，完全不可以碰家里的东西，万一你做过的椅子是皮肤病人或者性病病人坐过的呢！&lt;/p&gt;

&lt;p&gt;还有人觉得洗了外衣的洗衣机就不可以再用来洗内衣，因为外衣被认为是脏的，而内衣接触皮肤，应该很干净才对。甚至有人专门买了“小小神童洗衣机”，专门拿来洗内衣内裤。如果没有这种洗衣机，他们的家里会分别有洗各种东西的盆子：洗袜子的，洗内衣的，……&lt;/p&gt;

&lt;p&gt;所有这些都是没有经过科学分析得出的结论。这些人似乎并不理解病菌是如何生存，如何传播的，就盲目的认为在外面坐过的裤子上会有对身体有害的病菌。&lt;/p&gt;

&lt;p&gt;这里我不得不称赞一下美国人的理性思维。我曾经问过好几个美国人，你们怎么洗鞋子啊？他们都觉得这个问题很奇怪：“什么？不就是丢进洗衣机吗？” 这显然是大部分中国人觉得不可思议的事情，他们会跟你说那是因为美国很干净，所以才可以这样子。&lt;/p&gt;

&lt;p&gt;然而并非如此，美国人可以穿着那鞋子到处走，那鞋子可能去过中国，去过非洲，到很脏的厕所里踩过…… 回到美国，忘了这些事，把鞋子丢进洗衣机…… 嘿嘿，恶心吧？&lt;/p&gt;

&lt;p&gt;然而事实就是从来没有人因此生病，因为病菌不可能通过那样的方式传播。粘在鞋子上的病菌，必须要有营养和水才能生存，而鞋子上就算粘了它们可以生存的粘液，过段时间也会干掉。无论如何，鞋子进了洗衣机，病菌都会被洗衣液给消灭掉。所有的灰尘之类，会随着漂洗冲到下水道里去。&lt;/p&gt;

&lt;p&gt;我亲自试验过用洗衣机洗鞋子，鞋子当然要单独洗了。你最好丢一些旧毛巾跟鞋子一起洗，这样旧毛巾可以帮助在里面擦洗鞋子。倒上洗衣液，启动洗衣机就完事了。洗了之后再看洗衣机的桶，没有发现什么残留的脏东西。之后再拿来洗衣服，内衣，也没有发现任何问题。&lt;/p&gt;

&lt;p&gt;如果你不放心，可以买专用的洗衣机清洁剂，在这之后丢进洗衣机，启动自清洗程序。总之，过度的担心卫生和健康，似乎是中国人的一种通病，也是他们的生活过度复杂的原因。世界上并没有那么多致病的细菌，你得理解它们的生存和传播方式，而不是盲目的认为它们可以粘在任何地方。&lt;/p&gt;

&lt;h3 id=&quot;过时的洗脸盆&quot;&gt;过时的洗脸盆&lt;/h3&gt;

&lt;p&gt;最近十多年的生活，我发现有一件东西从我的生活中消失了，那就是盆子：洗脸盆，洗脚盆，搓衣盆…… 可是我发现很多中国人的家里仍然有盆子这东西，所以我很纳闷为什么我曾经需要它们，而为什么现在不再需要。&lt;/p&gt;

&lt;p&gt;后来我发现盆子从我生活中消失的原因，是跟热水器的出现密不可分的。在很早的时候，人们没有燃气热水器，所以要洗脸，只有用脸盆来混合冷水和开水。先把脸盆装点冷水，然后用暖水瓶加一些开水在里面，然后放一条洗脸毛巾进去弄湿了，拿出来洗脸。&lt;/p&gt;

&lt;p&gt;燃气热水器的出现改变了这个局面。因为水龙头放出来的水直接可以调温，所以很多人开始直接用手从水龙头捧热水来洗脸，而不再需要一个容器来存放这些热水。使用流水洗脸不但更加卫生，而且消除了对洗脸盆这种东西的需求。&lt;/p&gt;

&lt;p&gt;可是很多年长的人不理解，看到现代家居里面的“洗脸池”，还以为那是用来放热水在里面，然后才放毛巾进去洗脸。这种不理解的人，往往觉得洗脸池很脏，不知道该怎么用它，所以仍然去买塑料洗脸盆来接水洗脸。由于洗脸池的形状构造，他们发现这非常不方便，不顺手，而其实只是他们不理解它的用法。&lt;/p&gt;

&lt;p&gt;如果你理解了热水器和流水洗脸的原理，就会发现这种所谓“洗脸池”，其实并不是用来盛放洗脸水的。它只是用来接你洗过脸，刷过牙的脏水的。所以它根本不需要特别干净，多人共用这种池子，一点问题也没有。&lt;/p&gt;

&lt;p&gt;同样的原理，刷牙其实也可以不用杯子。因为水龙头就在面前，你完全可以用手捧一点水到嘴里，那就足够用来刷牙了。所以我选了一个漂亮的杯子用来放牙刷，而从来不用它来装水。另外我发现有些人喜欢把牙膏也放进杯子里，由于牙膏很胖很重，那会使得取用变得很蹩脚，有时候杯子还会因为重心不稳被弄翻。其实牙膏放在案台上就可以了，只有牙刷需要放进杯子里，因为它上面沾了水。&lt;/p&gt;

&lt;p&gt;我家里只有一种盆子，那就是“足疗盆”。我发现洗脸池和浴缸都不能达到这个功效，所以我买了一个。放上一盆热水，加上舒缓筋骨的浴盐，放在漂亮的地毯和毛巾上面，把脚放进去，猫咪在旁边陪伴，真是一种惬意的享受 :)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/foot-bath.jpg&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;铲屎倌的秘诀&quot;&gt;铲屎倌的秘诀&lt;/h3&gt;

&lt;p&gt;我养了一只猫，对于养猫我也有很多的智慧，把他管理的井井有条，家里一点味道都没有。这里我只透露一个秘密，那就是我用了 &lt;a href=&quot;http://www.littergenie.com&quot;&gt;Litter Genie&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这是一个不起眼的塑料盒子，专门用来装猫屎的。它的特点是非常好的隔离效果，猫屎进去之后就完全闻不到味道了。你可以每天铲猫屎放进去，等几个星期才一起拿去扔掉也不会有问题。&lt;/p&gt;

&lt;p&gt;起初朋友介绍给我的时候，我还不以为然的说，我每天铲屎放进一个垃圾袋，马上拿去扔了不就行了？等到真正用了 Litter Genie 几个月之后，才发现没有它是多么的不方便，因为我已经习惯了简单的：铲屎，盖上，完事。&lt;/p&gt;

&lt;p&gt;我养猫的经验也可以写成一本书了，所以这里限于篇幅就不多说了 :P&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;嗯，写了这么多，我自己都有点糊涂了，有点没条理了。生活的智慧当然不止这一点，它是博大精深的，所以我这里讲的一点东西只是抛砖引玉，希望帮助大家追求有品质的生活。如果你有什么生活小窍门很多人不知道的，欢迎来信跟我交流。如果你知道文中提到的美国产品（比如 Lysol）的中国等价物，也请告诉我。&lt;/p&gt;

&lt;p&gt;（如果你觉得这篇文章有所帮助，可以&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付款&lt;/a&gt;购买，建议价格￥30。）&lt;/p&gt;

                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/07/08/living-philosophy</guid>
<pubDate>Sat, 08 Jul 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>如何掌握所有的程序语言</title>
<link>http://www.yinwang.org/blog-cn/2017/07/06/master-pl</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;如何掌握所有的程序语言&lt;/h2&gt;
                            &lt;p&gt;对的，我这里要讲的不是如何掌握一种程序语言，而是所有的……&lt;/p&gt;

&lt;p&gt;很多编程初学者至今还在给我写信请教，问我该学习什么程序语言，怎么学习。由于我知道如何掌握“所有”的程序语言，总是感觉这种该学“一种”什么语言的问题比较低级，所以一直没来得及回复他们 :P 可是逐渐的，我发现原来不只是小白们有这个问题，就连美国大公司的很多资深工程师，其实也没搞明白。&lt;/p&gt;

&lt;p&gt;今天我有动力了，想来统一回答一下这个搁置已久的“初级问题”。类似的话题貌似曾经写过，然而现在我想把它重新写一遍。因为在跟很多人交流之后，我对自己头脑中的（未转化为语言的）想法，有了更精准的表达。&lt;/p&gt;

&lt;p&gt;如果你存在以下的种种困惑，那么这篇文章也许会对你有所帮助：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你是编程初学者，不知道该选择什么程序语言来入门。&lt;/li&gt;
  &lt;li&gt;你是资深的程序员或者团队领导，对新出现的种种语言感到困惑，不知道该“投资”哪种语言。&lt;/li&gt;
  &lt;li&gt;你的团队为使用哪种程序语言争论不休，发生各种宗教斗争。&lt;/li&gt;
  &lt;li&gt;你追逐潮流采用了某种时髦的语言，结果两个月之后发现深陷泥潭，痛苦不堪……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;虽然我已经不再过问这些世事，然而无可置疑的现实是，程序语言仍然是很重要的话题，这个情况短时间内不会改变。程序员的岗位往往会要求熟悉某些语言，甚至某些奇葩的公司要求你“深入理解 OOP 或者 FP 设计模式”。对于在职的程序员，程序语言至今仍然是可以争得面红耳赤的宗教话题。它的宗教性之强，以至于我在批评和调侃某些语言（比如 Go 语言）的时候，有些人会本能地以为我是另外一种语言（比如 Java）的粉丝。&lt;/p&gt;

&lt;p&gt;显然我不可能是任何一种语言的粉丝，我甚至不是 Yin 语言的粉丝 ;) 对于任何从没见过的语言，我都是直接拿起来就用，而不需要经过学习的过程。看了这篇文章，也许你会明白我为什么可以达到这个效果。理解了这里面的东西，每个程序员都应该可以做到这一点。嗯，但愿吧。&lt;/p&gt;

&lt;h3 id=&quot;重视语言特性而不是语言&quot;&gt;重视语言特性，而不是语言&lt;/h3&gt;

&lt;p&gt;很多人在乎自己或者别人是否“会”某种语言，对“发明”了某种语言的人倍加崇拜，为各种语言的孰优孰劣争得面红耳赤。这些问题对于我来说都是不存在的。虽然我写文章批评过不少语言的缺陷，在实际工作中我却很少跟人争论这些。如果有其它人在我身边争论，我甚至会戴上耳机，都懒得听他们说什么 ;) 为什么呢？我发现归根结底的原因，是因为我重视的是“语言特性”，而不是整个的“语言”。我能用任何语言写出不错的代码，就算再糟糕的语言也差不了多少。&lt;/p&gt;

&lt;p&gt;任何一种“语言”，都是各种“语言特性”的组合。打个比方吧，一个程序语言就像一台电脑。它的牌子可能叫“联想”，或者“IBM”，或者“Dell”，或者“苹果”。那么，你可以说苹果一定比 IBM 好吗？你不能。你得看看它里面装的是什么型号的处理器，有多少个核，主频多少，有多少 L1 cache，L2 cache……，有多少内存和硬盘，显示器分辨率有多大，显卡是什么 GPU，网卡速度，等等各种“配置”。有时候你还得看各个组件之间的兼容性。&lt;/p&gt;

&lt;p&gt;这些配置对应到程序语言里面，就是所谓“语言特性”。举一些语言特性的例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;变量定义&lt;/li&gt;
  &lt;li&gt;算术运算&lt;/li&gt;
  &lt;li&gt;for 循环语句，while 循环语句&lt;/li&gt;
  &lt;li&gt;函数定义，函数调用&lt;/li&gt;
  &lt;li&gt;递归&lt;/li&gt;
  &lt;li&gt;静态类型系统&lt;/li&gt;
  &lt;li&gt;类型推导&lt;/li&gt;
  &lt;li&gt;lambda 函数&lt;/li&gt;
  &lt;li&gt;面向对象&lt;/li&gt;
  &lt;li&gt;垃圾回收&lt;/li&gt;
  &lt;li&gt;指针算术&lt;/li&gt;
  &lt;li&gt;goto 语句&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些语言特性，就像你在选择一台电脑的时候，看它里面是什么配置。选电脑的时候，没有人会说 Dell 一定是最好的，他们只会说这个型号里面装的是 Intel 的 i7 处理器，这个比 i5 的好，DDR3 的内存 比 DDR2 的快这么多，SSD 比磁盘快很多，ATI 的显卡是垃圾…… 如此等等。&lt;/p&gt;

&lt;p&gt;程序语言也是一样的道理。对于初学者来说，其实没必要纠结到底要先学哪一种语言，再学哪一种。曾经有人给我发信问这种问题，纠结了好几个星期，结果一个语言都还没开始学。有这纠结的时间，其实都可以把他纠结过的语言全部掌握了。&lt;/p&gt;

&lt;p&gt;初学者往往不理解，每一种语言里面必然有一套“通用”的特性。比如变量，函数，整数和浮点数运算，等等。这些是每个通用程序语言里面都必须有的，一个都不能少。你只要通过“某种语言”学会了这些特性，掌握这些特性的根本概念，就能随时把这些知识应用到任何其它语言。你为此投入的时间基本不会浪费。所以初学者纠结要“先学哪种语言”，这种时间花的很不值得，还不如随便挑一个语言，跳进去。&lt;/p&gt;

&lt;p&gt;如果你不能用一种语言里面的基本特性写出好的代码，那你换成另外一种语言也无济于事。你会写出一样差的代码。我经常看到有些人 Java 代码写得相当乱，相当糟糕，却骂 Java 不好，雄心勃勃要换用 Go 语言。这些人没有明白，是否能写出好的代码在于人，而不在于语言。如果你的心中没有清晰简单的思维模型，你用任何语言表述出来都是一堆乱麻。如果你 Java 代码写得很糟糕，那么你写 Go 语言代码也会一样糟糕，甚至更差。&lt;/p&gt;

&lt;p&gt;很多初学者不了解，一个高明的程序员如果开始用一种新的程序语言，他往往不是去看这个语言的大部头手册或者书籍，而是先有一个需要解决的问题。手头有了问题，他可以用两分钟浏览一下这语言的手册，看看这语言大概长什么样。然后，他直接拿起一段例子代码来开始修改捣鼓，想法把这代码改成自己正想解决的问题。在这个简短的过程中，他很快的掌握了这个语言，并用它表达出心里的想法。&lt;/p&gt;

&lt;p&gt;在这个过程中，随着需求的出现，他可能会问这样的问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;这个语言的“变量定义”是什么语法，需要“声明类型”吗，还是可以用“类型推导”？&lt;/li&gt;
  &lt;li&gt;它的“类型”是什么语法？是否支持“泛型”？泛型的 “variance” 如何表达？&lt;/li&gt;
  &lt;li&gt;这个语言的“函数”是什么语法，“函数调用”是什么语法，可否使用“缺省参数”？&lt;/li&gt;
  &lt;li&gt;……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意到了吗？上面每一个引号里面的内容，都是一种语言特性（或者叫概念）。这些概念可以存在于任何的语言里面，虽然语法可能不一样，它们的本质都是一样的。比如，有些语言的参数类型写在变量前面，有些写在后面，有些中间隔了一个冒号，有些没有。&lt;/p&gt;

&lt;p&gt;这些实际问题都是随着写实际的代码，解决手头的问题，自然而然带出来的，而不是一开头就抱着语言手册看得仔仔细细。因为掌握了语言特性的人都知道，自己需要的特性，在任何语言里面一定有对应的表达方式。如果没有直接的方式表达，那么一定有某种“绕过方式”。如果有直接的表达方式，那么它只是语法稍微有所不同而已。所以，他是带着问题找特性，就像查字典一样，而不是被淹没于大部头的手册里面，昏昏欲睡一个月才开始写代码。&lt;/p&gt;

&lt;p&gt;掌握了通用的语言特性，剩下的就只剩某些语言“特有”的特性了。研究语言的人都知道，要设计出新的，好的，无害的特性，是非常困难的。所以一般说来，一种好的语言，它所特有的新特性，终究不会超过一两种。如果有个语言号称自己有超过 5 种新特性，那你就得小心了，因为它们带来的和可能不是优势，而是灾难！&lt;/p&gt;

&lt;p&gt;同样的道理，最好的语言研究者，往往不是某种语言的设计者，而是某种关键语言特性的设计者（或者支持者）。举个例子，著名的计算机科学家 Dijkstra 就是“递归”的强烈支持者。现在的语言里面都有递归，然而你可能不知道，早期的程序语言是不支持递归的。直到 Dijkstra 强烈要求 Algol 60 委员会加入对递归的支持，这个局面才改变了。Tony Hoare 也是语言特性设计者。他设计了几个重要的语言特性，却没有设计过任何语言。另外大家不要忘了，有个语言专家叫王垠，他是早期 union type 的支持者和实现者，也是 checked exception 特性的支持者，他在自己的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2017/05/23/kotlin&quot;&gt;博文&lt;/a&gt;里指出了 checked exception 和 union type 之间的关系 :P&lt;/p&gt;

&lt;p&gt;很多人盲目的崇拜语言设计者，只要听到有人设计（或者美其民曰“发明”）了一个语言，就热血沸腾，佩服的五体投地。他们却没有理解，其实所有的程序语言，不过是像 Dell，联想一样的“组装机”。语言特性的设计者，才是像 Intel，AMD，ARM，Qualcomm 那样核心技术的创造者。&lt;/p&gt;

&lt;h3 id=&quot;合理的入门语言&quot;&gt;合理的入门语言&lt;/h3&gt;

&lt;p&gt;所以初学者要想事半功倍，就应该从一种“合理”的，没有明显严重问题的语言出发，掌握最关键的语言特性，然后由此把这些概念应用到其它语言。哪些是合理的入门语言呢？我个人觉得这些语言都可以用来入门：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Scheme&lt;/li&gt;
  &lt;li&gt;C&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Python&lt;/li&gt;
  &lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么相比之下，我不推荐用哪些语言入门呢？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shell&lt;/li&gt;
  &lt;li&gt;PowerShell&lt;/li&gt;
  &lt;li&gt;AWK&lt;/li&gt;
  &lt;li&gt;Perl&lt;/li&gt;
  &lt;li&gt;PHP&lt;/li&gt;
  &lt;li&gt;Basic&lt;/li&gt;
  &lt;li&gt;Go&lt;/li&gt;
  &lt;li&gt;Rust&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总的说来，你不应该使用所谓“&lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/03/29/scripting-language&quot;&gt;脚本语言&lt;/a&gt;”作为入门语言，特别是那些源于早期 Unix 系统的脚本语言工具。PowerShell 虽然比 Unix 的 Shell 有所进步，然而它仍然没有摆脱脚本语言的根本问题——他们的设计者不知道他们自己在干什么 :P&lt;/p&gt;

&lt;p&gt;采用脚本语言学编程，一个很严重的问题就是使得学习者抓不住关键。脚本语言往往把一些系统工具性质的东西（比如正则表达式，Web 概念）加入到语法里面，导致初学者为它们浪费太多时间，却没有理解编程最关键的概念：变量，函数，递归，类型……&lt;/p&gt;

&lt;p&gt;不推荐 Go 语言的原因类似，虽然 Go 语言不算脚本语言，然而他的设计者显然不明白自己在干什么。所以使用 Go 语言来学编程，你不能专注于最关键，最好的语言特性。关于 Go 语言的各种毛病，你可以参考这篇&lt;a href=&quot;http://www.yinwang.org/blog-cn/2014/04/18/golang&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;同样的，我不觉得 Rust 适合作为入门语言。Rust 花了太大精力来夸耀它的“新特性”，而这些新特性不但不是最关键的部分，而且很多是有问题的。初学者过早的关注这些特性，不仅学不会最关键的编程思想，而且可能误入歧途。关于 Rust 的一些问题，你可以参考这篇&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/09/18/rust&quot;&gt;文章&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;掌握关键语言特性忽略次要特性&quot;&gt;掌握关键语言特性，忽略次要特性&lt;/h3&gt;

&lt;p&gt;为了达到我之前提到的融会贯通，一通百通的效果，初学者应该专注于语言里面最关键的特性，而不是被次要的特性分心。&lt;/p&gt;

&lt;p&gt;举个夸张点的例子。我发现很多编程培训班和野鸡大学的编程入门课，往往一来就教学生如何使用 printf 打印“Hello World！”，进而要他们记忆 printf 的各种“格式字符”的意义，要他们实现各种复杂格式的打印输出，甚至要求打印到文本文件里，然后再读出来……&lt;/p&gt;

&lt;p&gt;可是殊不知，这种输出输入操作其实根本不算是语言的一部分，而且对于掌握编程的核心概念来说，都是次要的。有些人的 Java 课程进行了好几个星期，居然还在布置各种 printf 的作业。学生写出几百行的 printf，却不理解变量和函数是什么，甚至连算术语句和循环语句都不知道怎么用！这就是为什么很多初学者感觉编程很难，我连 &lt;code class=&quot;highlighter-rouge&quot;&gt;%d&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;%f&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;%.2f&lt;/code&gt; 的含义都记不住，还怎么学编程！&lt;/p&gt;

&lt;p&gt;然而这些野鸡大学的“教授”头衔是如此的洗脑，以至于被他们教过的学生（比如我女朋友）到我这里请教，居然骂我净教一些没用的东西，学了连 printf 的作业都没法完成 :P 你别跟我讲 for 循环，函数什么的了…… 可不可以等几个月，等我背熟了 printf 的用法再学那些啊？&lt;/p&gt;

&lt;p&gt;所以你就发现一旦被差劲的老师教过，这个程序员基本就毁了。就算遇到好的老师，他们也很难纠正过来。&lt;/p&gt;

&lt;p&gt;当然这是一个夸张的例子，因为 printf 根本不算是语言特性，但这个例子从同样的角度说明了次要肤浅的语言特性带来的问题。&lt;/p&gt;

&lt;p&gt;这里举一些次要语言特性的例子：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;C 语言的语句块，如果里面只有一条语句，可以不打花括号。&lt;/li&gt;
  &lt;li&gt;Go 语言的函数参数类型如果一样可以合并在一起写，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;func foo(s string, x, y, z int, c bool) {  ...  }&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Perl 把正则表达式作为语言的一种特殊语法&lt;/li&gt;
  &lt;li&gt;JavaScript 语句可以在某些时候省略句尾的分号&lt;/li&gt;
  &lt;li&gt;Haskell 和 ML 等语言的 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2013/04/02/currying&quot;&gt;currying&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;自己动手实现语言特性&quot;&gt;自己动手实现语言特性&lt;/h3&gt;

&lt;p&gt;在基本学会了各种语言特性，能用它们来写代码之后，下一步的进阶就是去实现它们。只有实现了各种语言特性，你才能完全地拥有它们，成为它们的主人。否则你就只是它们的使用者，你会被语言的设计者牵着鼻子走。&lt;/p&gt;

&lt;p&gt;有个大师说得好，完全理解一种语言最好的方法就是自己动手实现它，也就是自己写一个解释器来实现它的语义。但我觉得这句话应该稍微修改一下：完全理解一种“语言特性”最好的方法就是自己亲自实现它。&lt;/p&gt;

&lt;p&gt;注意我在这里把“语言”改为了“语言特性”。你并不需要实现整个语言来达到这个目的，因为我们最终使用的是语言特性。只要你自己实现了一种语言特性，你就能理解这个特性在任何语言里的实现方式和用法。&lt;/p&gt;

&lt;p&gt;举个例子，学习 SICP 的时候，大家都会亲自用 Scheme 实现一个面向对象系统。用 Scheme 实现的面向对象系统，跟 Java，C++，Python 之类的语言语法相去甚远，然而它却能帮助你理解任何这些 OOP 语言里面的“面向对象”这一概念，它甚至能帮助你理解各种面向对象实现的差异。&lt;/p&gt;

&lt;p&gt;这种效果是你直接学习 OOP 语言得不到的，因为在学习 Java，C++，Python 之类语言的时候，你只是一个用户，而用 Scheme 自己动手实现了 OO 系统之后，你成为了一个创造者。&lt;/p&gt;

&lt;p&gt;类似的特性还包括类型推导，类型检查，惰性求值，如此等等。我实现过几乎所有的语言特性，所以任何语言在我的面前，都是可以被任意拆卸组装的玩具，而不再是凌驾于我之上的神圣。&lt;/p&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;

&lt;p&gt;写了这么多，重要的话重复三遍：语言特性，语言特性，语言特性，语言特性！不管是初学者还是资深程序员，应该专注于语言特性，而不是纠结于整个的“语言品牌”。只有这样才能达到融会贯通，拿起任何语言几乎立即就会用，并且写出高质量的代码。&lt;/p&gt;

&lt;p&gt;（如果你觉得这篇文章有所帮助，可以&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付款&lt;/a&gt;购买，价格随意。）&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/07/06/master-pl</guid>
<pubDate>Thu, 06 Jul 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>带猫回国经历</title>
<link>http://www.yinwang.org/blog-cn/2017/07/06/cat-travel-china</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;带猫回国经历&lt;/h2&gt;
                            &lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/monet-inflight1.jpg&quot; width=&quot;320&quot;&gt;&lt;/p&gt;

&lt;p&gt;经过一番折腾，我和小莫奈已经顺利到达成都家里。在此我感谢各位朋友给我的信息和指点。第一次带宠物回国的人，不免面临困惑和压力，所以我想把我的经验总结一下。&lt;/p&gt;

&lt;p&gt;带宠物回国，这个事情说起来轻松，做起来压力其实蛮大的。我为这个事情，处心积虑至少有两个月，每一个环节弄得不好都可能出问题。网络上的信息有些过时了，有些啰嗦太多。毕竟带了宠物回国的人如释重负之后，不免喜欢附加各种“爱心废话” :) 在这里我尽量避免啰嗦废话，以便需要信息的人能够直接得到“指示”。&lt;/p&gt;

&lt;h3 id=&quot;找一个-usda-认证的兽医&quot;&gt;找一个 USDA 认证的兽医&lt;/h3&gt;

&lt;p&gt;直接找一个 USDA （美国农业部）认证的兽医，你的问题就解决了一大半了。兽医会告诉你该做些什么。你可能就不需要看网上的各种攻略了，也不需要看我这篇文章。&lt;/p&gt;

&lt;p&gt;注意一定要是 USDA 认证的兽医，因为美国有很多兽医都不是 USDA 认证过的。&lt;/p&gt;

&lt;p&gt;由于每个人的出发地，目的地和其它情况都可能不同，没有任何其他人的攻略可以代替本地的兽医给你专门的指点。所以我觉得任何攻略类文章，都比不上找兽医来的靠谱。&lt;/p&gt;

&lt;p&gt;看了网上的多篇文档之后，我直接带上猫去了一个 USDA 认证的兽医那里，跟他说我要带猫去中国，该怎么办。他给了我几乎所有的信息，包括疫苗，健康证明，各种时间调度问题，最近的 USDA 办公室的位置，等等。&lt;/p&gt;

&lt;p&gt;所以如果你看了很多文章还不清楚，那最好直接找本地的兽医问。兽医应该清楚如何带宠物进入中国。&lt;/p&gt;

&lt;h3 id=&quot;权威文档&quot;&gt;权威文档&lt;/h3&gt;

&lt;p&gt;从美国带猫狗到中国的权威流程请见 USDA 的网站：&lt;/p&gt;

&lt;p&gt;https://www.aphis.usda.gov/aphis/pet-travel/by-country/pettravel-china&lt;/p&gt;

&lt;p&gt;下面我只介绍一下我带猫到成都的故事。由于我选择了最简单的方式，也许你的情况还得自己多考虑。&lt;/p&gt;

&lt;h3 id=&quot;狂犬疫苗最先考虑的问题&quot;&gt;狂犬疫苗（最先考虑的问题）&lt;/h3&gt;

&lt;p&gt;如果距上次狂犬疫苗注射已经超过一年，临行至少一个月之前（注意不是一个月之内），到兽医那打狂犬疫苗，开疫苗证明。这是因为中国海关需要狂犬疫苗注射时间在一年以内，一个月以外。也就是说，一个月以内打的疫苗，或者一年以外，就会有问题。&lt;/p&gt;

&lt;p&gt;注意，疫苗证明上面要有狂犬疫苗的序列号（serial number），如果没有，请当时就要求他们打印出来。由于我的兽医没把序列号印在疫苗证明上面，导致我到 USDA 盖章的时候费了很多时间和口舌，而且可能在中国海关那里遇到麻烦。&lt;/p&gt;

&lt;p&gt;这是你应该最早考虑的问题。我的疫苗是在两个月之前打的，你提前三，四个月都没问题，但不能超过一年，否则就失效了。&lt;/p&gt;

&lt;h3 id=&quot;选择航班买机票&quot;&gt;选择航班，买机票&lt;/h3&gt;

&lt;p&gt;你必须先选好航班，定好出发时间，买好机票。因为之后的健康证明有很狭窄的时间限制（10天），而且可能还需要提前预约。建议订机票最好提前一个月。&lt;/p&gt;

&lt;p&gt;尽量选择美国航空公司（UA，Delta，……）的直达航班回国。因为只有美国公司的航班可以带宠物进入机舱。如果需要在国内转机，国内的那个飞机肯定是不准你带宠物进机舱的，那你就需要考虑托运。&lt;/p&gt;

&lt;p&gt;总之为了简便，我选择了唯一能直达成都的航班，硬着头皮坐了美联航的飞机（UA9）😂 你要是坐中国公司的飞机，或者坐需要转机的飞机，我这里就帮不了你了，可以参考一下其他人的攻略。&lt;/p&gt;

&lt;p&gt;因为一架飞机上面最多可以带进机舱的宠物数目有限（貌似 4 只？），不然宠物们联合起来可能劫持飞机 :P，所以买机票之前，打电话给航空公司确认那天的飞机还可以带宠物。貌似一般都可以，因为难得那么多人带宠物坐同一架飞机。买了自己的机票之后，打电话去航空公司，要求加一只舱内宠物（In-cabin Pet），花费 $125。&lt;/p&gt;

&lt;p&gt;因为宠物需要占据座位前面放脚的空间，我买了美联航的 Economy Plus，这种座位之间的距离大一点，更舒服一些。&lt;/p&gt;

&lt;h3 id=&quot;国际健康证明&quot;&gt;国际健康证明&lt;/h3&gt;

&lt;p&gt;临行前 10 天之内，带上猫，去 USDA 认证（USDA accreditted）的兽医那里进行体检，开“国际健康证明”（International Health Certificate）。因为兽医有可能很忙，这个你最好在订好机票之后，马上预约时间。&lt;/p&gt;

&lt;p&gt;注意这里有一个糊涂的地方：USDA 会告诉你健康证明是 30 天有效，然而航空公司却告诉你是 10 天。为了保险起见，你取最小值，也就是 10 天之内。否则航空公司有可能不让你上飞机。所以为了万无一失，一定要在 10 天以内。&lt;/p&gt;

&lt;p&gt;！！！！！关于 UA 办票人员业务水平的警告！！！！！&lt;/p&gt;

&lt;p&gt;有前人说在美国机场带宠物上飞机的时候根本没人看这些健康证明，只有中国海关要看这些，但我遇到的实际情况是，美联航办登机牌的大妈听说我要带猫去中国，差点当场晕过去，因为她从来没办过这个事情，也不知道该怎么办！UA 你是怎么培训办票人员的？&lt;/p&gt;

&lt;p&gt;我看她一脸惶恐，旁边的同事帮她拿出一个电话本来，临时抱佛脚打电话找人问。后来又跑到别的柜台去找人帮忙，足足在这证明上面费了半个小时，差点害我误了飞机。我过了安检就收到登机口的电话催我，结果最后一个上飞机。几个星期连续准点的航班，因此延误了 20 多分钟才起飞 😂&lt;/p&gt;

&lt;p&gt;健康证明上面需要有狂犬疫苗的各种信息，包括型号和序列号。我找的是同一个兽医，所以他已经有我的狂犬疫苗信息，直接就填进去了。如果你的疫苗是在其它兽医那里打的，就得带上那个疫苗证明。为了简单可靠，我建议你找同一个兽医办这些事情，记得一定要问清楚他是否 USDA 认证的兽医，因为有很多兽医都不是 USDA 认证的！&lt;/p&gt;

&lt;p&gt;健康证明的格式，必须是 USDA 网站上针对中国的文档格式：&lt;/p&gt;

&lt;p&gt;https://www.aphis.usda.gov/pet-travel/health-certificates/non-eu/china-cat.pdf&lt;/p&gt;

&lt;p&gt;注意更新：USDA 已经不再接受老攻略上的 APHIS 7001 国际健康证明卡。不过最好叫兽医把 Aphis 7001 也开上，两个文档都带上。我的兽医说航空公司可能要看 APHIS 7001。由于美联航的傻瓜糊里糊涂折腾了半天，我没能搞明白他们到底在看哪个文件（晕）。总之，我把两个证明都给了他们，折腾了半个小时，我才拿到登机牌！&lt;/p&gt;

&lt;p&gt;所以对不起，这里我不能提供更精确的信息，你让兽医把两个都准备好就是了。USDA 认证的兽医一般都知道怎么办这个事，所以你可以多咨询他们。如果你有更准确的信息，请来信告诉我。&lt;/p&gt;

&lt;p&gt;最后再鄙视一下 UA :P&lt;/p&gt;

&lt;h3 id=&quot;usda-盖章&quot;&gt;USDA 盖章&lt;/h3&gt;

&lt;p&gt;有了兽医开的健康证明还不够，你得把健康证明拿到 USDA 的办公室去盖章。盖章收费 $38，你必须同时带上狂犬疫苗证明，USDA 要核对健康证明上的疫苗信息跟你的狂犬疫苗一样，包括序列号。&lt;/p&gt;

&lt;p&gt;由于我的兽医似乎业务水平有问题，所以他没把狂犬疫苗的序列号打印在疫苗证明上。结果在 USDA 遇到了麻烦。他们跟我说那个疫苗证明不对，他们需要一个疫苗的序列号，要跟健康证明上那个一致，因为中国海关好像需要那个序列号。好像…… 😂 我再三强调了那就是兽医给我的疫苗证明，我没有别的文件了，她这才同意打电话给兽医确认一下。在电话上折腾了好一阵子，让兽医把有序列号信息的文件发 email 给她，才给我盖了章。&lt;/p&gt;

&lt;p&gt;湾区童鞋参考：我是到 SFO 机场附近那个 USDA 办公室盖的章。地址是：&lt;/p&gt;

&lt;p&gt;USDA APHIS Veterinary Services SFO Port&lt;/p&gt;

&lt;p&gt;389 Oyster Point Blvd. Suite 2B; South San Francisco, CA 94080&lt;/p&gt;

&lt;p&gt;这个办公室必须提前预约才给你办这些事，所以一定要提前准备。预约方式是发 email 到这个地址：&lt;/p&gt;

&lt;p&gt;sfo.port.services@aphis.usda.gov&lt;/p&gt;

&lt;p&gt;告诉他们你的航班时间，要去哪里。他们会直接给你预约时间。&lt;/p&gt;

&lt;p&gt;其它地方的人，得根据自己的情况灵活处理。不方便直接去的话，USDA 也接受邮件处理，貌似把材料寄过去，加上回邮信封和支票就可以。这个你得参考其他人的攻略了，或者电话 USDA 问清楚。&lt;/p&gt;

&lt;p&gt;这个办公室付款方式可以接受信用卡，不像前人经验说只能收支票，不过我建议还是把支票带上。&lt;/p&gt;

&lt;h3 id=&quot;宠物包&quot;&gt;宠物包&lt;/h3&gt;

&lt;p&gt;另外，记得提前买好宠物包，因为你得给猫咪一定的时间来熟悉这个包，这样他才会对它有安全感。宠物包挺有讲究，所以我详细介绍一下。&lt;/p&gt;

&lt;p&gt;我买的是&lt;a href=&quot;https://www.amazon.com/gp/product/B00KMQPGK6/ref=oh_aui_detailpage_o02_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;这个&lt;/a&gt;侧面可以伸出来一块扩展空间的宠物包。事实证明，它的大小差不多合适，伸出来的那一块在飞机上也起了点作用。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/monet-carrier2.png&quot; width=&quot;320&quot;&gt;&lt;/p&gt;

&lt;p&gt;这个猫包上面和前面各有一道门，我感觉上面这道门对于飞机旅行是很重要的。因为过安检的时候，你得把猫抱出来跟你一起过，而不能让他经过 X 光机。由于猫害怕外面的环境，如果你从前面那道小门可能很难把他拽出来。&lt;/p&gt;

&lt;p&gt;我把这包放在家里，敞开门，把小莫奈最喜欢的那个毛巾垫在里面。把一个玩具隧道对着侧面门口，用绳子逗他穿过隧道进猫包。后来我就发现它有时候晚上会在里面睡觉。另外我还做了一些演习，用这个包把他带上车，开车到不远的公园里，下车拎着转了一圈，然后回家。传说这样他会更加信任这个包，知道进了这个包不会去兽医那里，也不会去其它什么可怕的地方 :P&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/monet-carrier1.jpg&quot; width=&quot;320&quot;&gt;&lt;/p&gt;

&lt;p&gt;我还以为经过这一番训练，把小莫奈放进去应该很顺利了，结果出发当天却花了差不多半个小时才把他骗进去！我从来没有花这么长时间才把他放进包里，看来他意识到将要发生什么了…… :P&lt;/p&gt;

&lt;p&gt;加上 UA 那傻瓜耽误了好些时间，所以经验之谈，请比普通国际航班的准备时间提前再多至少一个小时！&lt;/p&gt;

&lt;p&gt;我选的是靠窗的座位，事实证明这是最好的选择。这包横着放在座位前面，会挡掉中间座位乘客大约 10 厘米的放脚空间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/monet-inflight2.jpg&quot; width=&quot;320&quot;&gt;&lt;/p&gt;

&lt;p&gt;（请忽略右边的蓝色外套，它并没有占空间，猫包的右侧已经抵住前面座位的支撑架了。）&lt;/p&gt;

&lt;p&gt;在起飞之前我很客气的跟邻座的人表示抱歉，并告诉她起飞之后我会把这个包竖着放，这样就不占她放脚的地方了。起飞之后，我把包竖过来，两只脚分在两边，就这样凑合了 14 个小时。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/monet-inflight3.jpg&quot; width=&quot;320&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;过安检&quot;&gt;过安检&lt;/h3&gt;

&lt;p&gt;带着宠物如何过安检呢？很奇葩的经历。美国机场似乎怕你在宠物里面塞了什么东西，所以你不能简单的抱着他通过安检门了事。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;你把其他东西都放到传送带上，然后把猫从猫包上面那个门抱出来，让机场工作人员帮忙把猫包送上传送带。注意这个时候抱猫不能像平时那样“摇篮抱法”，得用拎着他两只前腿背对着你的“安全抱法”。否则我不知道他可能会做出什么事情来 :P&lt;/li&gt;
  &lt;li&gt;猫身上不需要有 harness 或者绳子。有些网站叫你买那种不带金属的 TSA 专用 harness，事实证明，机场没有人要求猫身上有 harness 和绳子。这多不符合猫的权益，对吧？&lt;/li&gt;
  &lt;li&gt;安检人员会叫你到一个专用的小门，而不是那个一般人通过的门。&lt;/li&gt;
  &lt;li&gt;走过那道门，你会遇到特殊的安检过程。安检人员叫我抱着猫，举起左手，然后他拿一个纸条在我手上画了一个“丰”字。然后要我举起右手，在我右手上也画个“丰”字。把纸条塞进一个机器，等了一会，然后就放我过了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在举起一只手的过程中，小莫奈忽然惊恐地往我肩膀上爬，害得我不得不弯腰把它放下去，按在地上重新抱好，才举起右手。结果他又往我肩膀上爬…… 幸好他没用爪子爬，不然我就惨了。非常尴尬的经历 😂&lt;/p&gt;

&lt;p&gt;过了安检门，请安检人员帮我把猫包放在地上。她主动把上面的门给我关好，打开了前面的门。我还担心小莫奈死活不进去呢，结果他呲溜就窜进去了。这证明我平时的“训练”是有效的，猫包是他在机场唯一可以信任的地方，所以直接就进去了，毫无阻力 :P&lt;/p&gt;

&lt;p&gt;这时候登机口的人来电话了，问我在哪里。我说刚过了安检，她叫我赶快，就要起飞了！收拾好自己的东西，拎着猫包往登机口冲刺，气喘吁吁上了飞机……&lt;/p&gt;

&lt;h3 id=&quot;食物水和镇定剂&quot;&gt;食物，水和镇定剂&lt;/h3&gt;

&lt;p&gt;看了不少攻略说起飞前 4 小时要给断粮断水，还有人给猫吃了安眠药。当我问我的兽医，该如何处理食物和水的问题，他对我说：“哦对也，你得先让他吃饱喝足了。因为航空公司可能不让你带食物和水上飞机，或者你也许可以悄悄带一些猫粮上去。不过他可能会很紧张，不会吃任何东西也不会喝水……”&lt;/p&gt;

&lt;p&gt;我说：“我的意思是…… 我看网上的文章都说要提前 4 小时断粮断水，免得他在飞机上随地大小便……”&lt;/p&gt;

&lt;p&gt;兽医说：“那不应该是你关心的问题。你应该关心的是动物的健康。你的飞机 14 个小时，如果你提前 4 小时断粮断水，一只宠物那么长时间不吃东西也许可以，不喝水是很不好的！另外，他是一只猫，他在飞机上会紧张，就算想要大小便也会尽量憋着的。”&lt;/p&gt;

&lt;p&gt;我还问了关于安眠药和镇定剂的事情。兽医也建议什么药都不要给他，因为无法预料这些药物在长时间的飞行途中会引起什么不好的后果。&lt;/p&gt;

&lt;p&gt;经过考虑，我最后按照兽医的建议做了。我没有提前给小莫奈断水断粮，反而带了一些猫粮和猫零食上飞机。乘务员送水的时候，我还放了一个矿泉水瓶盖的水，捎进他的猫包里。因为紧张，他只吃了一点点猫粮，也许喝了一点点水吧。&lt;/p&gt;

&lt;p&gt;不过整个飞行途中，小莫奈都没有大小便，憋得稳妥妥的 :)&lt;/p&gt;

&lt;h3 id=&quot;飞机上的故事&quot;&gt;飞机上的故事&lt;/h3&gt;

&lt;p&gt;跟小莫奈上了飞机，安顿好之后，他在猫包里很淡定。旁边的美国大叔还在夸奖他呢，说真是一只安静的好猫咪 :) 我隔一段时间还会把上面的门打开一个小口，伸手进去抚摸安慰他。就这样过了差不多十个小时。&lt;/p&gt;

&lt;p&gt;可是过了十个小时之后，他忽然七窍八供起来，想从里面出来，而且开始不停地叫唤。我还以为他想大小便了，憋不住了，叫来乘务员问可不可以带他去洗手间。乘务员说：“猫不喜欢长时间待在那里的，所以他应该只是不耐烦了。你可以带他去洗手间，但你不可以把它放出来，否则你就再也没法让他进去了！” 她还说这架飞机上曾经有一只猫从包里出来，就在机舱里到处跑，再也没法把它抓进去……&lt;/p&gt;

&lt;p&gt;又出现几次不满之后，我把他带去卫生间看了看。没事，没有大小便，只是把我放进去的水给拱翻了。用卫生纸擦了，回座位，把猫包放在膝盖上抱了一会，他貌似安静了下来，后来就睡着了……&lt;/p&gt;

&lt;p&gt;后来又不安分了几次…… 又过了四个小时，我们终于到了成都 :)&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/07/06/cat-travel-china</guid>
<pubDate>Thu, 06 Jul 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>回国了</title>
<link>http://www.yinwang.org/blog-cn/2017/06/28/home</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;回国了&lt;/h2&gt;
                            &lt;p&gt;经过长达一个多月的准备，我终于完成了长久以来的心愿。我回到了中国，回到了老家成都，结束了长达十多年的流浪生涯。由于经过精心的准备，这个过程相当的顺利。我已经开始适应和感受成都的生活，目前感觉还不错。短短的几天内，我已经体会到国内生活优于美国的一些地方。当然也有一些不方便，不合理的地方。&lt;/p&gt;

&lt;p&gt;在生活条件和理念上，美国仍然有一些更加先进合理的地方，值得留恋和学习，我会把这些传授给我的家人和朋友。然而从事业发展和对社会的责任感来看，美国却不是可以久留的地方。离别的痛苦和依依不舍，是真实的，然而离别却是理性的决定，是为了大家的将来更美好。在美国有爱我的人，关心我的人，我会思念他们，感谢他们。我知道这一次的离别肯定不意味着永远，随着中国的强大和自己事业的发展，我肯定还会在这两个地方往返，我们后会有期。&lt;/p&gt;

&lt;p&gt;至于回国初期的计划，我并没有很大的抱负。虽然我有一些很不错的方向，但我并不着急做什么了不起的事情。我会先花一段时间来休闲，吃吃喝喝，会见老朋友。然后，我会隐居茅庐，集中精力探索自己的想法。显然，我不大会愿意进入公司全职工作，也不大会加入已经成型的初创公司。&lt;/p&gt;

&lt;p&gt;由于一个人容易犯困，我也会抽出一小部分时间来提神，跟国内的志同道合之士进行探讨和交流。我会开始探索我的专长以外的领域，发展其他的兴趣爱好。我会逐渐考察国内的各个城市，找到适合自己生活和事业发展的地方。也许，最适合我的地方就是成都，或者也许我会往返于好几个地方，感受多种不同的生活。编程是一门艺术，好的艺术家都需要“采风”。同理，一个好的程序员也需要采风，否则他就不会有源源不断的灵感。&lt;/p&gt;

&lt;p&gt;近期除了忙于休闲，我打算写一些非技术文章，有兴趣的人可以期待一下。&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/06/28/home</guid>
<pubDate>Wed, 28 Jun 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>DSL</title>
<link>http://www.yinwang.org/blog-cn/2017/05/25/dsl</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;DSL&lt;/h2&gt;
                            &lt;p&gt;DSL 时不时地会成为一个话题，所以今天想专门说一下。&lt;/p&gt;

&lt;p&gt;DSL 也就是 Domain Specific Language 的简称，是指为某些特定领域（domain）设计的专用语言。举个例子，Linux 系统下有很多配置文件，每个配置文件格式都不大一样，它们可以被看成是多种 DSL。IP Tables 的规则是一种 DSL，FVWM 窗口管理器的配置文件是一种 DSL，VIM 和 Emacs 的配置文件，当然也是 DSL。Makefile 是 DSL。CSS 是 DSL。JSON 是 DSL。SQL 也可以被看成是数据库领域的 DSL。也有很多人在自己的工作中创造 DSL，试图用它们来解决一些实际问题。&lt;/p&gt;

&lt;p&gt;由于自己的原则，我个人从来没有设计过 DSL，但我用过别人设计的 DSL，并且对此深有感受。我觉得人们对于 DSL 有挺多的误解，所以我今天想分享一下自己对 DSL 的看法和亲身经历。&lt;/p&gt;

&lt;h3 id=&quot;我对-dsl-的看法&quot;&gt;我对 DSL 的看法&lt;/h3&gt;

&lt;p&gt;开门见山说说对 DSL 的看法吧。简言之，我觉得大部分 DSL 都是不需要（也不应该）存在的，我们应该尽量避免创造新的 DSL。这一论点不但适用于只有少量用户的产品内部 DSL，也适用于像 SQL 这样具有大量从业者的 DSL。&lt;/p&gt;

&lt;p&gt;DSL 这名字本身就是一种误导，它让人误以为不同“领域”（domain）的人就该用不同的语言。其实不是那样的。这不过是在制造领域壁垒，为引入不必要的 DSL 找借口。所谓不同“领域”，它们对语言的基本需求其实都是一样的。很多时候人们误以为需要新的 DSL，是因为他们没有分清“库代码”（library）和“新语言”（language）的差别。&lt;/p&gt;

&lt;p&gt;不同领域需要的，绝大部分时候只是针对该领域写出的“库代码”，而不是完全不同的“新语言”。分析大部分所谓 DSL，你会发现它们只不过提取了通用程序语言里的一部分，比如结构定义，算术表达式，逻辑表达式，条件语句，等等。极少有 DSL 是不可以用通用的程序语言构造表示的。绝大部分时候你都可以用一种通用的语言，写出满足领域需求的库代码，然后领域里的人就可以调用库函数来完成他们的任务。&lt;/p&gt;

&lt;p&gt;绝大部分 DSL 的存在，都是因为设计它的人没有理解问题的本质，没有意识到这问题并不需要通过设计新的语言来解决。很多人设计 DSL，是因为看到同类产品里面有 DSL，所以就抄袭照搬。或者因为听说 DSL 很酷，设计出 DSL 会显得自己很牛，很有价值。同时，设计 DSL 还可以让同事和公司对自己产生依赖性，因为有人用我的 DSL，所以公司需要我，离不开我，那么 job security 就有所保证 ;)&lt;/p&gt;

&lt;p&gt;然而如果你仔细分析手头的问题，就会发现它们绝大部分都可以用库代码，利用已有的语言来解决。就算类似的产品里面实现了 DSL，你会发现它们绝大部分也可以用库代码来代替。在自己的工作中，我一般都首先考虑写库代码来解决问题，实在解决不了才会考虑创造 DSL。&lt;/p&gt;

&lt;p&gt;因为遵循这一原则，加上对问题透彻的理解，我发现自己几乎每次都能用库代码解决问题，所以我从来没有在自己的职业生涯中创造过 DSL。&lt;/p&gt;

&lt;h3 id=&quot;最强大的-dsl-实现语言&quot;&gt;最强大的 DSL 实现语言&lt;/h3&gt;

&lt;p&gt;有些人喜欢吹嘘自己懂 Haskell 或者 Scala，说这两个语言有着非常强大的“DSL 实现能力”，也就是说你可以用它们来实现自己想要的 DSL。这其实是一种误解，或者叫做宗教性的自夸。虽然我已经指出创造 DSL 并不是什么好事，我觉得还是应该把这个问题说清楚。如果你跟我一样看透了各种语言，就会发现世界上最强大的 DSL 实现语言，并不是 Haskell 或者 Scala，而是 Scheme。&lt;/p&gt;

&lt;p&gt;2012 年的时候，我参加了 POPL 会议（ Principles of Programming Languages），这是程序语言界的顶级会议。虽然名字里面含有 principle（原理）这个词，明眼人都看得出来，这个会议已经不是那么重视根本性的“原理”，而是已经带有随波逐流的商业气息。那时候 Scala 正如日中天，所以在那次会议上，Scala 的 paper 简直是铺天盖地，“Scala 帮”的人趾高气昂。当然，各种 JavaScript 的东西也是如火如荼。&lt;/p&gt;

&lt;p&gt;很多 Scala 人宣讲的主题，都是在鼓吹它的 DSL 实现能力。听了几个这样的报告之后，我发现 Scala 的 DSL 机制跟 Haskell 的挺像，它们不过是实现了类似 C++ 的“操作符重载”，利用特殊的操作符来表达对一些特殊对象的操作，然后把这些操作符美其名曰为“DSL”。&lt;/p&gt;

&lt;p&gt;如果你还没看明白 Haskell 的把戏，我就提醒你一下。Haskell 的所谓 type class，其实跟 Java 或者 C++ 的函数重载（overloading）本质上是一回事。只不过因为 Haskell 采用了 Hindley-Milner 类型系统，这个重载问题被复杂化，模糊化了，所以一般人看不出来。等你看透了就会发现，Haskell 实现 DSL 的方式，不过是通过 type class 重载一些特殊的操作符而已。这跟 C++ 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;operator+(...)&lt;/code&gt; 并没有什么本质区别。&lt;/p&gt;

&lt;p&gt;操作符重载定义出来的 DSL，是非常有局限性的。实际上，通过重载操作符定义出来的语言，并不能叫做 DSL，而只能叫做“库代码”。为什么呢？因为一个语言之所以成为“语言”，它必须有自己独特的语义，而不只是定义了新的函数。重载操作符本质上只是定义了新的函数，而没有扩展语言的能力。就像你在 C++ 里重载了 + 操作符，你仍然是在使用 C++，而不是扩展了 C++ 的语义。&lt;/p&gt;

&lt;p&gt;我用过 Haskell 实现的一个用于 GPU 计算的“DSL”，名叫 Accelerate。这个“语言”用起来相当的蹩脚，它要求用户在代码的特定位置写上一些特殊符号，因为只有这样操作符重载才能起作用。可是写上这些莫名其妙的符号之后，你就发现代码的可读性变得很差。但由于操作符重载的局限性，你必须这样做。你必须记住在什么时候必须写这些符号，在什么时候不能写它们。这种要求对于程序员的头脑，是一个严重的负担，没有人愿意去记住这些不知所以的东西。&lt;/p&gt;

&lt;p&gt;由于操作符重载的局限性，Haskell 和 Scala 实现的 DSL，虽然吹得很厉害，发了不少 paper，却很少有人拿来实用。&lt;/p&gt;

&lt;p&gt;世界上最强大的 DSL 实现语言，其实非 Scheme 莫属。Scheme 的宏系统（hygienic macro）超越了早期 Lisp 语言的宏系统，它本来就是被设计来改变和扩展 Scheme 的语义的。Scheme 的宏实质上是在对“语法树”进行任意变换，扩展编译器的功能，所以你可以利用宏把 Scheme 转变成几乎任何你想要的语言。这种宏系统不但可以实现 Haskell 和 Scala 的“重载型 DSL”，还能实现那些不能用重载实现的语言特性（比如能绑定变量的语句）。&lt;/p&gt;

&lt;p&gt;miniKanren 就是一个用 Scheme 宏实现的语言，它是一个类似 Prolog 的逻辑式语言。如果你用 Haskell 或者 Scala 来实现 miniKanren，就会发现异常的困难。就算实现出来了，你的 DSL 语法也会很难看难用，不可能跟 miniKanren 一样优雅。&lt;/p&gt;

&lt;p&gt;我并不是在这里鼓吹 Scheme，搞宣传。正好相反，对 Scheme 的宏系统有了深入理解之后，我发现了它带来的严重问题。内行人把这个问题称为“新语言问题”（The New Language Problem）。&lt;/p&gt;

&lt;p&gt;因为在 Scheme 里实现一个新语言如此的容易，几行代码就可以写出新的语言构造，改变语言本来的语义，所以这带来了严重的问题。这个问题就是，一旦你改变了语言的语义，或者设计出新的语言构造，人们之间的交流就增加了一道障碍。使用你改造后的 Scheme 的人，必须学习一种新的语言，才能看懂你的代码，才能跟你交流。&lt;/p&gt;

&lt;p&gt;由于这个原因，你很难看懂另一个人的 Scheme 代码，因为很多 Scheme 程序员觉得宏是个好东西，所以很喜欢用它。他们设计出稀奇古怪的宏，扩展语言的能力，然后使用扩展后的，你完全不理解的语言来写他的代码。本来语言是用来方便人与人交流的，结果由于每个人都可以改变这语言，导致他们鸡同鸭讲，没法交流！&lt;/p&gt;

&lt;p&gt;再次声明，我不是在这里称赞或者宣扬 Scheme，我真的认为宏系统的存在是 Scheme 的一个严重的缺点。我那热爱 Scheme 的教授们知道了，一定会反对我这种说法，甚至鄙视我。但我确实就是这么想的，这么多年过去了，仍然没有改变过这一看法。&lt;/p&gt;

&lt;p&gt;Scheme 宏系统的这个问题，引发了我对 DSL 的思考。后来我发现所谓 DSL 跟 Scheme 宏系统，存在几乎一模一样的问题。这个问题有一个名字，叫做“新语言问题”（The New Language Problem）。下面我详细解释一下这个问题。&lt;/p&gt;

&lt;h3 id=&quot;新语言问题the-new-language-problem&quot;&gt;“新语言问题”（The New Language Problem）&lt;/h3&gt;

&lt;p&gt;现在我来讲一下，盲目创造 DSL 带来的问题。很多人不明白 DSL 跟库代码的区别，拿到一个问题也不想清楚，就一意孤行开始设计 DSL，后来却发现 DSL 带来了严重的问题。由于 DSL 是一种新的语言，而不只是用已有语言写出来新函数，所以 DSL 必须经过一个学习和理解的过程，才能被其他人使用。&lt;/p&gt;

&lt;p&gt;举个例子。如果你看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(x, y + z)&lt;/code&gt; 这样的库代码，很显然这是一个函数调用，所以你知道它会先计算 &lt;code class=&quot;highlighter-rouge&quot;&gt;y+z&lt;/code&gt;，得到结果之后，把它传递给 foo 函数作为参数，最后得到 foo 函数算出来的结果。注意到了吗，你并不需要学习新的语言。虽然你不知道 foo 函数的定义，然而你很清楚函数调用会做什么：把参数算好放进去，返回一个结果。也就是说，你对函数调用已经有一个“心理模型”。&lt;/p&gt;

&lt;p&gt;可是一个 DSL 就很不一样，对于一个新的 DSL 构造，你也许没有任何心理模型存在。同样看到 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(x, y + z)&lt;/code&gt;，它的含义也许根本不是一个函数调用。也许 foo 在这个 DSL 里就表示 foreach 循环语句，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(x, y + z)&lt;/code&gt; 表示类似 Java 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;foreach (x : y + z)&lt;/code&gt;，其中 y 和 z 都是链表，&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; 号表示连接两个链表。&lt;/p&gt;

&lt;p&gt;这样一来，为了理解 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo(x, y + z)&lt;/code&gt; 是什么意义，你不能直接通过已有的，关于函数的心理模型，而必须阅读 DSL 设计者给你的文档，重新学习。如果 DSL 设计者是有素养的语言专家，那也许还好说。然而我发现绝大部分 DSL 设计者，都没有受到过专业的训练，所以他们设计出来的语言，从一开始就存在各种让人头痛的问题。&lt;/p&gt;

&lt;p&gt;有些 DSL 表达力太弱，所以很多时候用户发现没法表达自己的意思。每当需要用这 DSL 写代码，他们就得去请教这个语言的设计者。很多时候你必须往这个 DSL 添加新的特性，才能解决自己的问题。到后来，你就发现有人设计了个 DSL，到头来他自己是唯一会用这 DSL 的人。每当有人需要用一个语言，就得去麻烦它的作者，那么这个语言的存在还有什么意义？&lt;/p&gt;

&lt;p&gt;当然，很多 DSL 还会犯下程序语言设计的一些常见问题。很多人把设计语言想得太容易，喜欢耍新花样，到后来就因此出现各种麻烦事。容易出错，产生歧义，语法丑陋繁琐，难学难用，缺乏编辑器 IDE 支持，出错信息难以理解，无法用 debugger 调试，等等。最后你发现还不如不要设计新的语言，使用已有的语言来解决问题就可以了。&lt;/p&gt;

&lt;h3 id=&quot;nacl-的故事&quot;&gt;NaCl 的故事&lt;/h3&gt;

&lt;p&gt;现在我来讲一个有趣的故事，是我自己跟 DSL 有关的经历。&lt;/p&gt;

&lt;p&gt;在我曾经工作过的某公司，有两个很喜欢捣鼓 PL，却没有受过正规 PL 教育的人。说得不好听一点，他们就是“PL 民科”。然而正是这种民科，最喜欢显示自己牛逼，喜欢显示自己有能力实现新的语言，以至于真正的专家只好在旁边静静地看着他们装逼 :P&lt;/p&gt;

&lt;p&gt;他们其中一个人知道我是研究 PL 的，开头觉得我是同类，所以总喜欢走到桌前对我说：“咱们一起设计一个通用程序语言吧！然后用它来解决我们公司现在遇到的难题！” 每当他这样说，我都安静的摇摇头：“我们公司真的需要一个新的语言吗？你有多少时间来设计和实现这个语言？”&lt;/p&gt;

&lt;p&gt;当时这两个人在公司里，总是喜欢试用各种新语言，Go 语言，Scala，Rust，…… 他们都试过了。每当拿到一个新的项目，他们总是想方设法要用某种新语言来做。于是乎，这样的历史就在我眼前反复的上演：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;为一种新语言兴奋，开始用它来做新项目&lt;/li&gt;
  &lt;li&gt;两个月之后，开始骂这语言，各种不爽&lt;/li&gt;
  &lt;li&gt;最后项目不了了之，代码全部丢进垃圾堆&lt;/li&gt;
  &lt;li&gt;Goto 1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两个家伙每天就为这些事情忙得不亦乐乎，真正留下来的产出却很少。之前他们还设计了一种 DSL，专门用于对 HTML 进行匹配和转换。这个 DSL 被他们起了一个很有科学味道的名字，叫做 NaCl（氯化钠，食盐的化学分子式）。&lt;/p&gt;

&lt;p&gt;我进公司的时候，NaCl 已经存在了挺长一段时间，然而很少有人真正理解它的用法，大部分人对它的态度都是“能不碰就不碰”。终于有一天，我遇到了需要修改 NaCl 代码的时候。也就一行代码，看了半天 NaCl 的“官方文档”，却不知道如何才能用它提供的语法，来表达我所需要的改动。其实我需要的不过是一个很容易的匹配替换，完全可以用正则表达式来完成，可是已有的代码是用 NaCl 写的，再加上好几层的框架，让你绕都绕不过，所以我不知道怎么办了。&lt;/p&gt;

&lt;p&gt;问了挺多人，包括公司里最顶级的“NaCl 专家”，都没能得到结果。最后，我不得不硬着头皮去打扰两位日理万机的“NaCl 之父”。叽里呱啦跟我解释说教了一通之后，眨眼之间噼里啪啦帮我改了代码，搞定了！其实我根本没听明白他在说什么，为什么那样改，也不知道背后的原理。总之，我一个字都没打，目的就达到了，所以我就回去做自己的事情了。&lt;/p&gt;

&lt;p&gt;后来跟其他同事聊，发现我的直觉是很准的。他们告诉我，公司里所有 NaCl 代码可以表达的东西，都可以很容易的用正则表达式替换来解决，甚至可以用硬邦邦的，不带 regexp 的字符串替换来解决。同事们都很不理解，为什么非得设计个 DSL 来做这么简单的事情，本来调用 Java 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;String.replace&lt;/code&gt; 就可以完成。&lt;/p&gt;

&lt;p&gt;后来“NaCl 专家”告诉我，虽然他很了解 NaCl，却根本不喜欢它。在那两个家伙提出要设计 NaCl 的时候，他就已经表示了强烈的反对，他觉得不应该创造 DSL 来解决这样的问题。当时他就给大家解释了什么是“新语言问题”，警告大家新语言会带来的麻烦。可是领导显然跟这两个家伙有某种政治上的联盟关系，所以根本没听他在说什么。&lt;/p&gt;

&lt;p&gt;在领导的放任和支持下，这两个家伙一意孤行创造了 NaCl，然后强行在全公司推广。到后来，每次需要用 NaCl 写点什么，就发现需要给它增加新的功能，就得去求那两个家伙帮忙。所以我能用上今天的 NaCl，基本能表达我想要的东西，还多亏了这位“NaCl 专家”以前栽的跟头，他把各种坑基本给我填起来了 ;)&lt;/p&gt;

&lt;p&gt;我有一句格言：如果一个语言，每当用户需要用它表达任何东西，都得去麻烦它的设计者，甚至需要给这个语言增加新的功能，那这个语言就不应该存在。NaCl 这个 DSL 正好符合了我的断言。&lt;/p&gt;

&lt;p&gt;当然 NaCl 只是一个例子，我知道很多其它 DSL 的背后都有类似的故事。几个月之后，这两个民科又开始创造另一个 DSL，名叫 Dex，于是历史又开始重演……&lt;/p&gt;

&lt;h3 id=&quot;动态逻辑加载&quot;&gt;动态逻辑加载&lt;/h3&gt;

&lt;p&gt;Dex 的故事跟 NaCl 有所不同，但最后的结果差不多。NaCl 是一个完全不应该存在的语言，而 Dex 的情况有点不一样。我们确实需要某种“嵌入式语言”，只不过它不应该是 Dex 那个样子，不应该是一个 DSL。由于 Dex 要解决的需求有一定的代表性，很多人在遇到这类需求的时候，就开始盲目的创造 DSL，所以这是一个很大的坑！我想把这个故事详细讲一下，免得越来越多的人掉进去。&lt;/p&gt;

&lt;p&gt;原来的需求是这样：产品需要一种配置方式，配置文件里面可以包含一定的“逻辑”。通过在不更换代码的情况下动态加载配置文件，它可以动态的改变系统的逻辑和行为。这东西有点像”防火墙“的规则，比如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;如果尺寸大于 1000，那么不通过，否则通过。&lt;/li&gt;
  &lt;li&gt;如果标题含有“猪头”这个词，不通过，否则通过……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这些规则从本质上讲，就是一些逻辑表达式“size &amp;gt; 1000”，加上一些分支语句“if … then …”。在 Dex 出现之前，有人用 XML 定义这样的规则，后来发现 XML 非常不好理解，像是这个样子：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;rule&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;condition&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;operator&amp;gt;&lt;/span&gt;gt&lt;span class=&quot;nt&quot;&gt;&amp;lt;/operator&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;first&amp;gt;&lt;/span&gt;size&lt;span class=&quot;nt&quot;&gt;&amp;lt;/first&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;second&amp;gt;&lt;/span&gt;1000&lt;span class=&quot;nt&quot;&gt;&amp;lt;/second&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&amp;gt;&lt;/span&gt;block&lt;span class=&quot;nt&quot;&gt;&amp;lt;/action&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/rule&amp;gt;&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;看明白了吗？这个看得人眼睛发涨的 XML，表达的不过是普通语言里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (size &amp;gt; 1000) block()&lt;/code&gt;。为了理解这一点，你可以把这个 XML 所表示的“数据结构”，想象成编译器里面的“抽象语法树”（AST）。所以写这个 XML，其实是在用手写 AST，那当然是相当痛苦的。&lt;/p&gt;

&lt;p&gt;那我们为什么不把 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (size &amp;gt; 1000) block()&lt;/code&gt; 这条语句直接写到系统的 Java 代码里面呢？因为 Java 代码是编译之后放进系统里面的，一旦放进去就不能随时换掉了。然而我们需要可以随时的，“动态”的替换掉这块逻辑，而不更新系统代码。所以你不能把这条 Java 语句“写死”到系统代码里面，而必须作为“配置”。&lt;/p&gt;

&lt;p&gt;想清楚了这一点，你就自然找到了解决方案：把 &lt;code class=&quot;highlighter-rouge&quot;&gt;if (x &amp;gt; 1000) block()&lt;/code&gt; 这样的 Java 代码片段写到一个“配置文件”里，然后使用 JVM 读取，组合，并且编译这个文件，动态加载生成的 class，这样系统的行为就可以改变了。实际上这也就是公司里另外一个团队做过的事情，让用户编辑一个基于 Java 的“规则文件”，然后加载它。&lt;/p&gt;

&lt;p&gt;我觉得这不失为一个可行的解决方案。为了实现动态逻辑加载，你完全可以用像 Java 或者 JavaScript 那样已有的语言，利用已有的编译器来达到这个目的，而不需要设计新的语言。然而当 PL 民科们遇到这样的问题，他们首先想到的是：设计一个新的 DSL！于是 Dex 就诞生了。&lt;/p&gt;

&lt;p&gt;Dex 要表达的东西，本质上就是这些逻辑表达式和条件语句，然而 Dex 被设计为一个完全独立的语言。它的语法被设计得其它语言很不一样，结合了 Haskell，Go 语言，Python 等各种语言语法的缺陷。后来团队里又进来一个研究过 Prolog 逻辑式语言的人，所以他试图在里面加入“逻辑式编程”的元素。总之他们有很宏伟的目标：让这个 DSL “可靠”，“可验证”，成为“描述式语言”……&lt;/p&gt;

&lt;p&gt;他们向团队宣布这个雄心勃勃的计划之后，一个有趣的插曲发生了。听说又要创造一个 DSL，“NaCl 专家”再次怒发冲冠，开始反对这个计划。这一次他拿出了实际行动，自己动手拿 Java 内嵌的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Nashorn_(JavaScript_engine)&quot;&gt;JavaScript 解释器&lt;/a&gt;，做了一个基于 JavaScript 的动态配置系统，只开发了一个星期就可以用了。&lt;/p&gt;

&lt;p&gt;我觉得用 JavaScript 也不失为一个解决方案，毕竟浏览器的 PAC 文件就是用 JavaScript 定义代理规则的，而这种代理规则跟我们的应用非常类似。我虽然没有特别喜欢 JavaScript，但它其中的一些简单构造用在这种场景，是没什么大问题的。&lt;/p&gt;

&lt;p&gt;其实在此之前我也看不下去了，所以自己悄悄做了一个类似的配置系统，拿已有的 JavaScript parser，提取 JavaScript 的相关构造，做了一个解释器，嵌入到系统里，只花了一天时间。但我心里很清楚，一切技术上的努力在政治斗争的面前，都是无足轻重的。我早已经伤不起了，在好心人的帮助下，我离开了这个团队，但暗地里我仍然从精神上支持着“NaCl 专家”继续他的抗争。&lt;/p&gt;

&lt;p&gt;争吵的最后结果，当然是由于领导偏心庇护，否决了“外人”的作法，让两个民科和一个 Prolog 狂人继续开发 Dex。几个月之后，公司的第二个奇葩 DSL 诞生了。它用混淆难读的方式，表达了普通语言里的条件语句和逻辑表达式。他们为它写了 parser，写了解释器，写了文档，开始在公司强行推广。“可靠”，“可验证”，“描述式”的目标，早已被抛到九霄云外。用的人都苦不堪言，好多东西没法表达或者不知道如何表达，出错了也没有足够的反馈信息，每次要写东西就得去找“Dex 之父”们。&lt;/p&gt;

&lt;p&gt;嗯，历史就这样重演了……&lt;/p&gt;

&lt;h3 id=&quot;结论&quot;&gt;结论&lt;/h3&gt;

&lt;p&gt;所以，我对于 DSL 的结论是什么呢？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;尽一切可能避免创造 DSL，因为它会带来严重的理解，交流和学习曲线问题，可能会严重的降低团队的工作效率。如果这个 DSL 是给用户使用，会严重影响用户体验，降低产品的可用性。&lt;/li&gt;
  &lt;li&gt;大部分时候写库代码，把需要的功能做成函数，其实就可以解决问题。&lt;/li&gt;
  &lt;li&gt;如果真的到了必须创造 DSL 的时候，非 DSL 不能解决问题，才可以动手设计 DSL。但 DSL 必须由程序语言专家来完成，否则它还是可能给产品和团队带来严重的后果。&lt;/li&gt;
  &lt;li&gt;大部分 DSL 要解决的问题，不过是“动态逻辑加载”。为了这个目的，你完全可以利用已有的语言（比如 JavaScript），或者取其中一部分构造，通过动态调用它的解释器（编译器）来达到这个目的，而不需要创造新的 DSL。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;（本文建议零售价 ￥30，如果它让你的团队或者公司幸免落坑，请付款 ￥100000 :）&lt;/p&gt;

                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/25/dsl</guid>
<pubDate>Thu, 25 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>关于广告和付费</title>
<link>http://www.yinwang.org/blog-cn/2017/05/24/ads</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;关于广告和付费&lt;/h2&gt;
                            &lt;p&gt;最近有些人给我反应，抱怨说博客的文章上面有广告，问是不是我自己放上去的。现在我统一回答一下，确实是我自己放上去的。我在每篇文章的标题上面和右侧分别放了一个 Google Ads。我使用 Google Ads，是因为那似乎是最方便的一种放广告的方式。也许以后有更好的服务商，那我就可以把 Google 换掉。&lt;/p&gt;

&lt;p&gt;我知道有些人因此说我的闲话，包括我对文章“自愿付款”的做法，都有人说闲话，说我“违反了 Linux 精神”之类 :P 然而我觉得放广告和自愿付款都是很正常的作法，我并不觉得“Linux 精神”或者“开源精神”的意义在于“免费”，完全不收取回报。就像 Stallman 说的，“自由软件”（free software）的 free，意思是“自由”，而不是“免费”。自由软件的作者完全有理由出售自己的代码，得到经济上的回报，这是无可非议的事情。相反，完全大公无私的付出或者打价格战，表面上伟大，其实是有害社会的。&lt;/p&gt;

&lt;p&gt;我的文章都是可以免费看的，付费只是当人们觉得有收获的时候，一种自愿回馈的作法，这并不是强制执行的。想想这是多有良心的店啊，东西摆出来让人随便吃，吃了之后觉得好吃才付钱，觉得不好吃就可以不付钱！:P 广告和付费确实给我带来了少许收入，然而比起工作的薪水，其实只能当个零头。我相信这些抱怨我的人，肯定从来也没有付过费。他们应该想一想，为什么传播谣言的新闻网站，各种开源软件的网站，以及各种他们经常灌水的论坛可以放广告，而传播有益信息的我的主页就不可以这么做？&lt;/p&gt;

&lt;p&gt;总之付费是自愿的，广告你当然也可以不看不点击，甚至可以直接启用“阅读模式”忽略掉。但我需要指出的是这种免费得到了有用信息，没有任何付出，还要说闲话，认为所有东西都应该免费，是一种不大健康的心理，我并不欣赏有人这样想。没有人强迫别人来这里看东西，也没有人强迫任何人为此付费。&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/24/ads</guid>
<pubDate>Wed, 24 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Kotlin 和 Checked Exception</title>
<link>http://www.yinwang.org/blog-cn/2017/05/23/kotlin</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Kotlin 和 Checked Exception&lt;/h2&gt;
                            &lt;p&gt;最近 JetBrains 的 Kotlin 语言忽然成了热门话题。国内小编们传言说，Kotlin 取代了 Java，成为了 Android 的“钦定语言”，很多人听了之后热血沸腾。初学者们也开始注意到 Kotlin，问出各种“傻问题”，很“功利”的问题，比如“现在学 Kotlin 是不是太早了一点？” 结果引起一些 Kotlin 老鸟们的鄙视。当然也有人来信，请求我评价 Kotlin。&lt;/p&gt;

&lt;p&gt;对于这种评价语言的请求，我一般都不予理睬的。作为一个专业的语言研究者，我的职责不应该是去评价别人设计的语言。然而浏览了 Kotlin 的文档之后，我发现 Kotlin 的设计者误解了一个重要的问题——关于是否需要 checked exception。对于这个话题我已经思考了很久，觉得有必要分享一下我对此的看法，避免误解的传播，所以我还是决定写一篇文章。&lt;/p&gt;

&lt;p&gt;可以说我这篇文章针对的是 checked exception，而不是 Kotlin，因为同样的问题也存在于 C# 和其它一些语言。&lt;/p&gt;

&lt;h3 id=&quot;冷静一下&quot;&gt;冷静一下&lt;/h3&gt;

&lt;p&gt;在进入主题之前，我想先纠正一些人的误解，让他们冷静下来。我们首先应该搞清楚的是，Kotlin 并不是像有些国内媒体传言的那样，要“取代 Java 成为 Android 的官方语言”。准确的说，Kotlin 只是得到了 Android 的“官方支持”，所以你可以用 Kotlin 开发 Android 程序，而不需要绕过很多限制。可以说 Kotlin 跟 Java 一样，都是 Android 的官方语言，但 Kotlin 不会取代 Java，它们是一种并存关系。&lt;/p&gt;

&lt;p&gt;这里我不得不批评一下有些国内技术媒体，他们似乎很喜欢片面报道和歪曲夸大事实，把一个平常的事情吹得天翻地覆。如果你看看国外媒体对 Kotlin 的&lt;a href=&quot;http://www.infoworld.com/article/3197337/android/google-endorses-kotlin-for-android-development.html&quot;&gt;报道&lt;/a&gt;，就会发现他们用词的迥然不同：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Google’s Java-centric Android mobile development platform is adding the Kotlin language as an officially supported development language, and will include it in the Android Studio 3.0 IDE.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;译文：Google 的以 Java 为核心的 Android 移动开发平台，加入了 Kotlin 作为官方支持的开发语言。它会被包含到 Android Studio 3.0 IDE 里面。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看明白了吗？不是“取代了 Java”，而只是给了大家另一个“选择”。我发现国内的技术小编们似乎很喜欢把“选择”歪曲成“取代”。前段时间这些小编们也有类似的谣传，说斯坦福大学把入门编程课的语言“换成了 JavaScript”，而其实别人只是另外“增加”了一门课，使用 JavaScript 作为主要编程语言，原来以 Java 为主的入门课并没有被去掉。我希望大家在看到此类报道的时候多长个心眼，要分清楚“选择”和“取代”，不要盲目的相信一个事物会立即取代另一个。&lt;/p&gt;

&lt;p&gt;Android 显然不可能抛弃 Java 而拥抱 Kotlin。毕竟现有的 Android 代码绝大部分都是 Java 写的，绝大部分程序员都在用 Java。很多人都知道 Java 的好处，所以他们不会愿意换用一个新的，未经时间考验的语言。所以虽然 Kotlin 在 Android 上得到了和 Java 平起平坐的地位，想要程序员们从 Java 转到 Kotlin，却不是一件容易的事情。&lt;/p&gt;

&lt;p&gt;我不明白为什么每当出现一个 JVM 的语言，就有人欢呼雀跃的，希望它会取代 Java，似乎这些人跟 Java 有什么深仇大恨。他们已经为很多新语言热血沸腾过了，不是吗？Scala，Clojure…… 一个个都像中国古代的农民起义一样，煽动一批人起来造反，而其实自己都不知道自己在干什么。Kotlin 的主页也把“drastically reduce the amount of boilerplate code”作为了自己的一大特色，仿佛是在暗示大家 Java 有很多“boilerplate code”。&lt;/p&gt;

&lt;p&gt;如果你经过理性的分析，就会发现 Java 并不是那么的讨厌。正好相反，Java 的有些设计看起来“繁复多余”，实际上却是经过深思熟虑的决定。Java 的设计者知道有些地方可以省略，却故意把它做成多余的。不理解语言“可用性”的人，往往盲目地以为简短就是好，多写几个字就是丑陋不优雅，其实不是那样的。关于 Java 的良好设计，你可以参考我之前的文章《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/01/18/java&quot;&gt;为 Java 说句公道话&lt;/a&gt;》。另外在《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/09/18/rust&quot;&gt;对 Rust 语言的分析&lt;/a&gt;》里面，我也提到一些容易被误解的语言可用性问题。我希望这些文章对人们有所帮助，避免他们因为偏执而扔掉好的东西。&lt;/p&gt;

&lt;p&gt;实际上我很早以前就发现了 Kotlin，看过它的文档，当时并没有引起我很大的兴趣。现在它忽然火了起来，我再次浏览它的新版文档，却发现自己还是会继续使用 Java 或者 C++。虽然我觉得 Kotlin 比起 Java 在某些小地方设计相对优雅，一致性稍好一些，然而我并没有发现它可以让我兴奋到愿意丢掉 Java 的地步。实际上 Kotlin 的好些小改进，我在设计自己语言的时候都已经想到了，然而我并不觉得它们可以成为人们换用一个新语言的理由。&lt;/p&gt;

&lt;h3 id=&quot;checked-exceptionce的重要性&quot;&gt;Checked Exception（CE）的重要性&lt;/h3&gt;

&lt;p&gt;有几个我觉得很重要的，具有突破性的语言特性，Kotlin 并没有实现。另外我还发现一个很重要的 Java 特性，被 Kotlin 的设计者给盲目抛弃了。这就是我今天要讲的主题：checked exception。我不知道这个术语有什么标准的中文翻译，为了避免引起定义混乱，下文我就把它简称为“CE”好了。&lt;/p&gt;

&lt;p&gt;先来科普一下 CE 到底是什么吧。Java 要求你必须在函数的类型里面声明它可能抛出的异常。比如，你的函数如果是这样：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileNotFoundException&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(...)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FileNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Java 要求你必须在函数头部写上“throws FileNotFoundException”，否则它就不能编译。这个声明表示函数在某些情况下，会抛出 FileNotFoundException 这个异常。由于编译器看到了这个声明，它会严格检查你对 foo 函数的用法。在调用 foo 的时候，你必须使用 try-catch 处理这个异常，或者在调用的函数头部也声明  “throws FileNotFoundException”，把这个异常传递给上一层调用者。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;blah&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这种对异常的声明和检查，叫做“checked exception”。很多语言（包括 C++，C#，JavaScript，Python……）都有异常机制，但它们不要求你在函数的类型里面声明可能出现的异常类型，也不使用静态类型系统对异常的处理进行检查和验证。我们说这些语言里面有“exception”，却没有“checked exception”。&lt;/p&gt;

&lt;p&gt;理解了 CE 这个概念，下面我们来谈正事：Kotlin 和 C# 对 CE 的误解。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/exceptions.html#checked-exceptions&quot;&gt;Kotlin 的文档&lt;/a&gt;明确的说明，它不支持类似 Java 的 checked exception（CE），指出 CE 的缺点是“繁琐”，并且列举了几个普通程序员心目中“大牛”的文章，想以此来证明为什么 Java 的 CE 是一个错误，为什么它不解决问题，却带来了麻烦。这些人包括了 Bruce Eckel 和 C# 的设计者 &lt;a href=&quot;http://www.artima.com/intv/handcuffs.html&quot;&gt;Anders Hejlsberg&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很早的时候我就看过 Hejlsberg 的这些言论。他的话看似有道理，然而通过自己编程和设计语言的实际经验，我发现他并没有抓住问题的关键。他的论述里有好几处逻辑错误，一些自相矛盾，还有一些盲目的臆断，所以这些言论并没能说服我。正好相反，实在的项目经验告诉我，CE 是 C# 缺少的一项重要特性，没有了 CE 会带来相当麻烦的后果。在微软写 C# 的时候，我已经深刻体会到了缺少 CE 所带来的困扰。现在我就来讲一下，CE 为什么是很重要的语言特性，然后讲一下为什么 Hejlsberg 对它的批评是站不住脚的。&lt;/p&gt;

&lt;p&gt;首先，写 C# 代码时最让我头痛的事情之一，就是 C# 没有 CE。每调用一个函数（不管是标准库函数，第三方库函数，还是队友写的函数，甚至我自己写的函数），我都会疑惑这个函数是否会抛出异常。由于 C# 的函数类型上不需要标记它可能抛出的异常，为了确保一个函数不会抛出异常，你就需要检查这个函数的源代码，以及它调用的那些函数的源代码……&lt;/p&gt;

&lt;p&gt;也就是说，你必须检查这个函数的整个“调用树”的代码，才能确信这个函数不会抛出异常。这样的调用树可以是非常大的。说白了，这就是在用人工对代码进行“全局静态分析”，遍历整个调用树。这不但费时费力，看得你眼花缭乱，还容易漏掉出错。显然让人做这种事情是不现实的，所以绝大部分时候，程序员都不能确信这个函数调用不会出现异常。&lt;/p&gt;

&lt;p&gt;在这种疑虑的情况下，你就不得不做最坏的打算，你就得把代码写成：&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意到了吗，这也就是你写 Java 代码时，能写出的最糟糕的异常处理代码！因为不知道 foo 函数里面会有什么异常出现，所以你的 catch 语句里面也不知道该做什么。大部分人只能在里面放一条 log，记录异常的发生。这是一种非常糟糕的写法，不但繁复，而且可能掩盖运行时错误。有时候你发现有些语句莫名其妙没有执行，折腾好久才发现是因为某个地方抛出了异常，所以跳到了这种 catch 的地方，然后被忽略了。如果你忘了写 catch (Exception)，那么你的代码可能运行了一段时间之后当掉，因为忽然出现一个测试时没出现过的异常……&lt;/p&gt;

&lt;p&gt;所以对于 C# 这样没有 CE 的语言，很多时候你必须莫名其妙这样写，这种做法也就是我在微软的 C# 代码里经常看到的。问原作者为什么那里要包一层 try-catch，答曰：“因为之前这地方出现了某种异常，所以加了个 try-catch，然后就忘了当时出现的是什么异常，具体是哪一条语句会出现异常，总之那一块代码会出现异常……” 如此写代码，自己心虚，看的人也糊涂，软件质量又如何保证？&lt;/p&gt;

&lt;p&gt;那么 Java 呢？因为 Java 有 CE，所以当你看到一个函数没有声明异常，就可以放心的省掉 try-catch。所以这个 C# 的问题，自然而然就被避免了，你不需要在很多地方疑惑是否需要写 try-catch。Java 编译器的静态类型检查会告诉你，在什么地方必须写 try-catch，或者加上 throws 声明。如果你用 IntelliJ，把光标放到 catch 语句上面，可能抛出那种异常的语句就会被加亮。C# 代码就不可能得到这样的帮助。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/exception-highlight.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;CE 看起来有点费事，似乎只是为了“让编译器开心”，然而这其实是每个程序员必须理解的事情。出错处理并不是 Java 所特有的东西，就算你用 C 语言，也会遇到本质一样的问题。使用任何语言都无法逃脱这个问题，所以必须把它想清楚。在《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;》一文中，我已经讲述了如何正确的进行出错处理。如果你滥用 CE，当然会有不好的后果，然而如果你使用得当，就会起到事半功倍，提高代码可靠性的效果。&lt;/p&gt;

&lt;p&gt;Java 的 CE 其实对应着一种强大的逻辑概念，一种根本性的语言特性，它叫做“union type”。这个特性只存在于 Typed Racket 等一两个不怎么流行的语言里。Union type 也存在于 PySonar 类型推导和 Yin 语言里面。你可以把 Java 的 CE 看成是对 union type 的一种不完美的，丑陋的实现。虽然实现丑陋，写法麻烦，CE 却仍然有着 union type 的基本功能。如果使用得当，union type 不但会让代码的出错处理无懈可击，还可以完美的解决 null 指针等头痛的问题。通过实际使用 Java 的 CE 和 Typed Racket 的 union type 来构建复杂项目，我很确信 CE 的可行性和它带来的好处。&lt;/p&gt;

&lt;p&gt;现在我来讲一下为什么 Hejlsberg 对于 CE 的&lt;a href=&quot;http://www.artima.com/intv/handcuffs.html&quot;&gt;批评&lt;/a&gt;是站不住脚的。他的第一个错误，俗话说就是“人笨怪刀钝”。他把程序员对于出错处理的无知，不谨慎和误用，怪罪在 CE 这个无辜的语言特性身上。他的话翻译过来就是：“因为大部分程序员都很傻，没有经过严格的训练，不小心又懒惰，所以没法正确使用 CE。所以这个特性不好，是没用的！”&lt;/p&gt;

&lt;p&gt;他的论据里面充满了这样的语言：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“大部分程序员不会处理这些 throws 声明的异常，所以他们就给自己的每个函数都加上 throws Exception。这使得 Java 的 CE 完全失效。”&lt;/li&gt;
  &lt;li&gt;“大部分程序员根本不在乎这异常是什么，所以他们在程序的最上层加上 catch (Exception)，捕获所有的异常。”&lt;/li&gt;
  &lt;li&gt;“有些人的函数最后抛出 80 多种不同的异常，以至于使用者不知道该怎么办。”……&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注意到了吗，这种给每个函数加上 &lt;code class=&quot;highlighter-rouge&quot;&gt;throws Exception&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch (Exception)&lt;/code&gt; 的做法，也就是我在《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;》里面指出的经典错误做法。要让 CE 可以起到良好的作用，你必须避免这样的用法，你必须知道自己在干什么，必须知道被调用的函数抛出的 exception 是什么含义，必须思考如何正确的处理它们。&lt;/p&gt;

&lt;p&gt;另外 CE 就像 union type 一样，如果你不小心分析，不假思索就抛出异常，就会遇到他提到的“抛出 80 多种异常”的情况。出现这种情况往往是因为程序员没有仔细思考，没有处理本来该自己处理的异常，而只是简单的把下层的异常加到自己函数类型里面。在多层调用之后，你就会发现最上面的函数累积起很多种异常，让调用者不知所措，只好传递这些异常，造成恶性循环。终于有人烦得不行，把它改成了“throws Exception”。&lt;/p&gt;

&lt;p&gt;我在使用 Typed Racket 的 union type 时也遇到了类似的问题，但只要你严格检查被调用函数的异常，尽量不让它们传播，严格限制自己抛出的异常数目，缩小可能出现的异常范围，这种情况是可以避免的。CE 和 union type 强迫你仔细的思考，理顺这些东西之后，你就会发现代码变得非常缜密而优雅。其实就算你写 C 代码或者 JavaScript，这些问题是同样存在的，只不过这些语言没有强迫你去思考，所以很多时候问题被稀里糊涂掩盖了起来，直到很长时间之后才暴露出来，不可救药。&lt;/p&gt;

&lt;p&gt;所以可以说，这些问题来自于程序员自己，而不是 CE 本身。CE 只提供了一种机制，至于程序员怎么使用它，是他们自己的职责。再好的特性被滥用，也会产生糟糕的结果。Hejlsberg 对这些问题使用了站不住脚的理论。如果你假设程序员都是糊里糊涂写代码，那么你可以得出无比惊人的结论：所有用于防止错误的语言特性都是没用的！因为总有人可以懒到不理解这些特性的用法，所以他总是可以滥用它们，绕过它们，写出错误百出的代码，所以静态类型没用，CE 没用，…… 有这些特性的语言都是垃圾，大家都写 PHP 就行了 ;)&lt;/p&gt;

&lt;p&gt;Hejlsberg 把这些不理解 CE 用法，懒惰，滥用它的人作为依据，以至于得出 CE 是没用的特性，以至于不把它放到 C# 里面。由于某些人会误用 CE，结果就让真正理解它的人也不能用它。最后所有人都退化到最笨的情况，大家都只好写 &lt;code class=&quot;highlighter-rouge&quot;&gt;catch (Exception)&lt;/code&gt;。在 Java 里，至少有少数人知道应该怎么做，在 C# 里，所有人都被迫退化成最差的 Java 程序员 ;)&lt;/p&gt;

&lt;p&gt;另外，Hejlsberg 还指出 C# 代码里没有被 catch 的异常，应该可以用“静态分析”检查出来。可以看出来，他并不理解这种静态检查是什么规模的问题。要能用静态分析发现 C# 代码里被忽略的异常，你必须进行“全局分析”，也就是说为了知道一个函数是否会抛出异常，你不能只看这个函数。你必须分析这个函数的代码，它调用的代码，它调用的代码调用的代码…… 所以你需要分析超乎想象的代码量，而且很多时候你没有源代码。所以对于大型的项目，这显然是不现实的。&lt;/p&gt;

&lt;p&gt;相比之下，Java 要求你对异常进行 throws 显式声明，实质上把这个全局分析问题分解成了一个个模块化（modular）的小问题。每个函数作者完成其中的一部分，调用它的人完成另外一部分。大家合力帮助编译器，高效的完成静态检查，防止漏掉异常处理，避免不必要的 try-catch。实际上，像 &lt;a href=&quot;https://github.com/CSharpAnalyzers/ExceptionalReSharper&quot;&gt;Exceptional&lt;/a&gt; 一类的 C# 静态检查工具，会要求你在注释里写出可能抛出的异常，这样它才能发现被忽略的异常。所以 Exceptional 其实重新发明了 Java 的 CE，只不过 throws 声明被写成了一个注释而已。&lt;/p&gt;

&lt;p&gt;说到 C#，其实它还有另外一个特别讨厌的设计错误，引起了很多不必要的麻烦。感兴趣的人可以看看我这篇文章：《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/10/13/c-sharp-disposable&quot;&gt;可恶的 C# IDisposable 接口&lt;/a&gt;》。这个问题浪费了整个团队两个月之久的时间。所以我觉得作为 C# 的设计者，Hejlsberg 的思维局限性相当大。我们应该小心的分析和论证这些人的言论，不应该把他们作为权威而盲目接受，以至于让一个优秀的语言特性被误解，不能进入到新的语言里。&lt;/p&gt;

&lt;h3 id=&quot;结论&quot;&gt;结论？&lt;/h3&gt;

&lt;p&gt;所以我对 Kotlin 是什么“结论”呢？我没有结论，这篇文章就像我所有的看法一样，仅供参考。显然 Kotlin 有的地方做得比 Java 好，所以它不会因为没有 CE 而完全失去意义。我不想打击人们对新事物的兴趣，我甚至鼓励有时间的人去试试看。&lt;/p&gt;

&lt;p&gt;我知道很多人希望我给他们一个结论，到底是用一个语言，还是不用它，这样他们就不用纠结了，然而我并不想给出一个结论。一来是因为我不想让人感觉我在“控制”他们，如何看待一个东西是他们的自由，是否采用一个东西是他们自己的决定。二来是因为我还没有时间和机会，去用 Kotlin 来做实际的项目。另外，我早就厌倦了试用新的语言，如果一个大众化的语言没有特别讨厌，不可原谅的设计失误，我是不会轻易换用新语言的。我宁愿让其他人做我的小白鼠，去试用这些新语言。到后来我有空了，再去看看他们的成功或者失败经历 :P&lt;/p&gt;

&lt;p&gt;所以对我个人而言，我至少现在不会去用 Kotlin，但我并不想让其他人也跟我一样。因为 Java，C++ 和 C 已经能满足我的需求，它们相当稳定，而且我对它们已经很熟悉，所以我为什么要花精力去学一个新的语言，去折腾不成熟的工具，放下我真正感兴趣的算法和数据结构等问题呢？实际上不管我用什么语言写代码，我的头脑里都在用同一个语言构造程序。我写代码的过程，只不过是在为我脑子里的“万能语言”找到对应的表达方式而已。&lt;/p&gt;

&lt;p&gt;（本文建议零售价 ￥15）&lt;/p&gt;

                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/23/kotlin</guid>
<pubDate>Tue, 23 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>什么是现实理想主义者</title>
<link>http://www.yinwang.org/blog-cn/2017/05/17/practical-idealism</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;什么是现实理想主义者&lt;/h2&gt;
                            &lt;p&gt;曾经有人看了我的文章，以为我是一个“理想主义者”，来找我聊天。他说：“你知道吗，我跟你一样喜欢简单优雅的代码。上次我在某公司工作，看到他们的代码乱得不成样子，二话没说给他们重写了，结果有几个小地方跟原来的代码不大一样，后来系统因此当掉了。老板对我说，明天你不用再来上班了！你说我是不是好心没好报啊？”&lt;/p&gt;

&lt;p&gt;虽然我同情他丢了工作，然而我并不认同这种不经同意就推翻重写别人代码的作法。实际上我曾经跟一个老喜欢重写别人代码的人合作，后来整个团队（包括我）都差点被他给弄疯了。所以我对他说：“你不可以这样改别人的代码的！如果我是你老板，可能不会开掉你，却也会给你一个严重警告的。”&lt;/p&gt;

&lt;p&gt;从我们的对话你也许已经发现了，我并不是一个通常人所谓的“理想主义者”。虽然我有很多新颖而美好的想法，然而它们全都深深植根于现实中。我反对不以现实为基础的“理想”，实际上那不叫理想，而只能叫做“空想”。我的直觉和理性会很快的告诉我，哪些事情是可能的，哪些是不大可能的。我往往在早期就能察觉和避免那些最终会失败的“理想主义作法”。&lt;/p&gt;

&lt;p&gt;从我对各种“新语言”，“新理论”和“新技术”的看法，你也许已经发现了我的这个特点，我不再是十年前那个“热爱新奇事物”的王垠。不理解的人甚至会觉得我“守旧”，然而我只是通过理性分析，预见了某些“新技术”的失败。在我的心里，事物和技术并没有新旧之分，只有合理与不合理的差别。&lt;/p&gt;

&lt;h3 id=&quot;如何对待别人的代码&quot;&gt;如何对待别人的代码&lt;/h3&gt;

&lt;p&gt;那么我是如何对待别人的“垃圾代码”的呢？你也许会很惊讶我的做法：我尽量不动它们！&lt;/p&gt;

&lt;p&gt;虽然我喜欢简单优雅的代码，然而对于别人写的代码，就算它再丑再乱，我也不会乱动它。我就像一个外科专家，多次对已有代码进行“换心手术”。这种手术成功的要诀，是制造尽量小的“切口”，刚好可以换掉心脏，而不动其他部位。就算那些地方血管乱绕，堆满各种垃圾，也不要去动它们。&lt;/p&gt;

&lt;p&gt;这是为什呢？因为代码首要的目标应该是“解决问题”（包括“没有 bug”），其次的目标才是“简单优雅”。如果不能解决问题，再优雅又有什么用呢，只不过是玩具而已。对于已经可以解决问题的代码，就算它再乱再复杂，我也是高度尊重的，绝对不敢像这个朋友一样，不假思索就删掉重写。这就像你给别人做换心手术，看到大腿上有些血管是乱的，就把大腿也切开倒腾，你的病人不死才怪呢。&lt;/p&gt;

&lt;p&gt;我自己写代码的时候，“解决问题”和“简单优雅”往往是紧密结合，交织在一起的。如果我写不出简单优雅的代码，我就不能又快又正确的解决问题。所以我的代码往往从一开头就是简单优雅，模块化的。我从很小的函数开始写起，每个函数只解决很小的问题，最终我把它们组合在一起，解决掉整个问题。&lt;/p&gt;

&lt;p&gt;对于别人的代码，情况就很不一样了。很多人写的代码很乱，很复杂，不易理解，看得我头痛，但由于他们在上面花了很多的时间，而且这些代码经过了很长时间的使用，大量现实情况的考验，所以它们已经算是解决了问题。对于这样的代码，我的经验是这样：如果把它删掉完全重写，是很难不犯原作者已经犯过的错误的。就算你自认为水平世界一流，写的代码极其简单和优雅，也不能避免犯错。&lt;/p&gt;

&lt;p&gt;这不是一个智力的问题，而是一个智慧的问题。喜欢删掉别人代码重写的人，也许有很高的智力，却缺乏智慧。代码是用来解决现实问题的，而现实有许许多多的细节，代码需要覆盖现实世界各种不完美的地方。这些不完美也许来自库代码，也许来自操作系统，也许来自网络协议，也许来自用户习惯，也许来自自然界。我们必须承认，很多这些东西我们是没有能力，没有时间，也没有必要去改变的。&lt;/p&gt;

&lt;p&gt;别人已经写好，用了几年的代码，很有可能已经遇到各种现实问题，各种边角情况，原来的作者虽然不像你一样思路清晰，却也为此付出了时间和精力。这些复杂混乱的代码逻辑里面，已经针对现实世界的不完美，做出了基本可行的解决方案。一个有智慧的人，必须能利用这些前人留下来的混乱代码，因为它包含了时间积累下来的财富。&lt;/p&gt;

&lt;p&gt;那么我一般是如何利用别人遗留下来的代码的呢？我的策略包含好几个要点。&lt;/p&gt;

&lt;p&gt;首先，我尽量保持别人的代码原封不动。因为别人的代码解决的问题，很可能不是我当前需要解决的问题。因为看不顺眼而去改别人的代码，不但分散自己的精力，而且有可能制造新的 bug，导致新老代码中同时多处出现 bug，难以追踪和修复。为了保持别人的代码原封不动，却又让自己写的新代码简单优雅，我必须理解原有代码的接口（interface），以及它原有的各种特征，我力求保持它们不变。这就像外科大夫做换心手术，他必须保证已有的血管都连接到正确的地方。&lt;/p&gt;

&lt;p&gt;我喜欢把自己的代码做成一个可替换的，模块化的元件，可以随时在系统里插入或者移除。一旦发现出了问题，我可以随时切换到原来的代码，重新测试，这样我就可以知道问题出在原来的代码，还是出在我的新代码里面。另外，我还会注意避免对已有函数进行换名，这样我可以把自己的修改局限在一个或者少数几个文件里面，避免 Git 的历史里面出现不必要的，让人分心的修改。就算要换名也应该单独作为 commit，而不应该跟逻辑的修改混在一起。&lt;/p&gt;

&lt;p&gt;如果经过多次试验，我发现别人的代码的确需要改，不然我没法继续写新的代码，那么我只好对它进行修改。由于已有的代码复杂混乱，我一般会极其小心的对待它。我不会删掉大片的代码，从头开始写，那几乎注定是要失败的。通常我会先“隔离”出很小的一块代码，对它进行重写。随之立即进行大量的测试和试验，找原作者来帮我检查是否有问题，如此反复……&lt;/p&gt;

&lt;p&gt;那么这块改掉的代码需要小到什么程度呢？我也许就只改写一个 for 循环，把几行代码提出去做成帮助函数，简化一个表达式，把一个类成员变成一个局部变量，改几个局部变量的名字之类的。你可以参考我在《&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;》里提到的各种改进代码的方式。每一个这样的小改动都有可能出错，所以在此之后必须进行严格的验证，确保修改后的代码和原来的代码语义相同。这样反反复复很多次之后，你才能正确的替换掉原来的代码。&lt;/p&gt;

&lt;p&gt;从我对待别人代码的方式，你也许已经发现了，我不是一个通常意义上的理想主义者。我不会为了自己简单优雅的理想，而完全推翻重写别人的代码，因为我知道现实世界的复杂性，我知道这样做注定是要失败的。我对待别人代码的态度，是深深地植根于现实的。通过极其严密的措施，我确保改进后的代码跟原来的代码语义完全相同，尽最大可能避免重复前人的错误，避免制造新的 bug。&lt;/p&gt;

&lt;p&gt;由于我的理想植根于现实，我把自己称为“现实理想主义者”（practical idealist），而不是“理想主义者”（idealist）。我曾经跟纯粹的理想主义者共事，这种人总是嫌别人的代码丑，不经商量就大幅度的删除重写大量代码，结果给团队的开发带来灾难性的后果。我在将来会避免跟这样的人共事。&lt;/p&gt;

&lt;p&gt;通过这个例子，你可能已经发现为什么“现实理想主义”是优于“理想主义”的。下面我来讲一下，为什么“现实理想主义”也超越了完全的“现实主义”。&lt;/p&gt;

&lt;h3 id=&quot;超越现实主义&quot;&gt;超越现实主义&lt;/h3&gt;

&lt;p&gt;既然我不是一个完全的理想主义者，那么是不是说，我就是一个完全的“现实主义者”呢？在我的职业生涯中，我已经多次证明了，我不是一个完全的现实主义者，我能做到现实主义者做不到的事情。我心中的“理想”成分，让我能够看到现实主义者看不到的可能性，而我的“现实”成分，又帮助我为这种可能性找到切实可行的路线。理想和现实的结合，指引我达到现实主义者认为是不可能的目标。&lt;/p&gt;

&lt;p&gt;说到这一点，第一个跳进我脑海里的例子，是我当年在 Google 完成的项目。Google 需要一个可以像 IDE 一样索引 Python 代码的工具，可以支持准确的“跳转到定义”功能。作为现实主义者的团队领导（Steve）对我说，你去拿一个开源的 Python 工具，比如 PyDev，修改之后插入到我们的构架里就可以了。&lt;/p&gt;

&lt;p&gt;当我调研了十多个开源 Python 工具和 IDE 之后，发现它们都不能准确地实现“跳转到定义”。它们的实现方式基本都是字符串匹配而已，所以找出来的“定义”完全不着边际，甚至把字符串里出现的名字都给加亮了。这时候，我的理想成分告诉我，准确的定义查找应该是可能的，只不过现有的工具都不知道怎么实现它而已。为了给 Python 这样的动态语言实现精确的定义索引，就必须实现类型推导，而这是我很在行的事情。于是我决定做一个新的 Python 类型推导器，这样就可以利用它实现精确的跳转功能。&lt;/p&gt;

&lt;p&gt;我把这个想法告诉了 Steve 和其它团队成员，结果作为现实主义者的他们，非常的担心这个项目无法在三个月的实习期内完成。Steve 说：“你知道吗，光是写一个 Python 的 parser 就够写三个月了。我很担心你不能完成任务！” 这时候，我的现实成分开始起作用。我说：“你知道吗，我并不觉得写 Python 的 parser 是一件很难的事情，但我也不觉得它是一件很有意义的事情，所以我会拿一个开源的 parser 来，利用它生成的语法树，然后在上面完成我们需要的功能。”&lt;/p&gt;

&lt;p&gt;结果，我拿了 Jython 里面的 Python parser，然后在上面实现了 PySonar。整个对付 parser 的过程只花了我两天时间，剩下的时间我都在研究和实现最关键，最有趣的部分。我拿了别人已经做好的，自己不想做的东西来，然后加上自己的核心思想，达到了最终的目的。最后，我不但在三个月的时间里完成了 PySonar，而且把它集成到了 Grok 项目里面。&lt;/p&gt;

&lt;p&gt;在这个例子里，现实理想主义者帮助了现实主义者，完成了他们以为不可能的事情。本来 Grok 项目在 Google 处于濒临灭亡的境地，由于 PySonar 的成功实现增大了项目的影响力，团队在 Google 存活了下来，并且开始受到公司的重视，相关人员也获得了提拔。今天 PySonar 仍然在为 Google 的 Python 程序员提供高质量的索引服务，它生成的数据在背后默默支持着 CodeSearch 等内部代码搜索服务。&lt;/p&gt;

&lt;h3 id=&quot;个人兴趣与企业兴趣&quot;&gt;个人兴趣与企业兴趣&lt;/h3&gt;

&lt;p&gt;最后，我想再讲一个跟这个话题相关的故事，它说明现实理想主义者不但是一种个人技术财富，而且是企业的财富。他不但与“企业的兴趣”一点矛盾都没有，反而在很多时候可以帮助甚至拯救公司和团队。这个故事很有趣，但中间部分技术性有点强，看不懂的人可以跳过。&lt;/p&gt;

&lt;p&gt;我曾经在职的某公司，邀请了某位“大牛”来做 VP。经过一段时间的接触，我发现这个人不懂很多东西，尽在瞎指挥。很明显，他并没有把公司的利益放在心上。在多次的瞎指挥之后，有一天他又提出一个“新想法”。他说，我们团队的代码应该实现“模块化管理”。如何实现模块化管理呢？我们把代码按目录结构切分开，分成 30 个“模块”。把每个模块做成一个 Git 代码库（repository），代码库之间通过 Maven 的版本号依赖关系进行连接。每个人负责一两个模块，使用“语义版本号”（&lt;a href=&quot;http://semver.org&quot;&gt;semver&lt;/a&gt;）标注模块的版本。如果修改了代码，就更新对应的版本号，这样依赖于这个模块的代码库就必须做出相应的修改，才能连接到新的模块代码，不然它们就可以继续使用旧的模块代码……&lt;/p&gt;

&lt;p&gt;这个新想法没有经过团队的集体讨论研究，就被 VP 的一个亲信动手实现了。一夜醒来，我们发现代码库被他分成了 30 多个，制定了一系列规章条款，要我们遵守。接下来的事情，我发现自己没法工作了。一天当中有超过半天的时间，我发现自己在为那些 semver 伤脑经。你刚刚更新了所有的代码，才工作了个把小时，正要提交的时候，却发现另外几个模块的版本号更新了！你得手动去看是哪些代码库发生了改变，更新自己 maven 文件里的依赖关系，然后才能进行测试，提交自己的代码。有时候当你提交之前，忽然又有其它的模块版本号发生了改变，所以你前功尽弃，又得去查到底是谁改了他的模块版本号。有很多次，有人没有把版本号完全搞对就提交了代码，结果导致项目 build 失败。&lt;/p&gt;

&lt;p&gt;后来我发现，这种所谓的“模块化”，根本就不是真正的模块化，而 semver 版本号，在这里也并不比 Git 的 hash 更好。模块不应该是按目录结构划分的，而应该是按代码的逻辑结构，而且模块之间不应该有“循环依赖关系”，否则这些模块就不应该被分成模块，而应该合并在一起。另外，semver 根本不是用来干这个事情的，它根本不应该被用于连接同一个项目里的多个模块，它只能被用来引用库代码。每一个 Git commit 的 hash，本身就是一个“全宇宙唯一”的版本号，它包含了代码所处的独一无二的状态。所以 Git 其实自然而然的解决了这种“模块”间版本依赖的问题。所以把代码拆分成 30 多个 Git 代码库，使用 semvar 连接它们，完全是多此一举，而且严重的损害了开发效率。&lt;/p&gt;

&lt;p&gt;观察到这个问题之后，我向团队群发了邮件，告诉他们我觉得这样的做法已经造成了我工作效率严重打折，并且指出了问题的要害。一个来自法国的资深工程师深有同感，也开始抱怨，说自己花了超过一半的时间来折腾这些版本号。然而 VP 听了这些意见，却坚持认为自己的“创新”是有价值的，对我们说：“任何一项伟大的创新，都会受到不理解它的旧势力的阻碍。同志们，困难是暂时的，适应是必须的！” 为了这个问题，我们在 email 里面吵了两个星期之久。任凭我们据理力争，拿出具体的证据证明这种做法不可行，严重的伤害了团队的开发效率，VP 凭着自己的名气和地位，毫不退缩。&lt;/p&gt;

&lt;p&gt;最后无赖之下，我决定采取实际的行动。我写了一个 Python 脚本，它调用 Git 的一些罕见命令，可以自动把多个 Git 代码库合并成一个，并且保留所有的历史 commit 信息。有了这个脚本之后，我可以随时制造出一个合并的代码库。我把这个脚本分享给了团队，告诉他们我随时可以把代码库合并在一起，而且给了他们一个合并后的代码库，作为试验用。我告诉他们，可以试用这个代码库，看它是否解决了 30 个代码库带来的问题。最后法国同事和其它几个人采用了我的代码库，发现不再有之前的头痛问题。&lt;/p&gt;

&lt;p&gt;我们用理论和切实的证据证明了所谓的“模块化代码管理”的不可行。通过对其它公司代码的观察，我们发现 Google 的 Chrome 项目有三千多万行代码，却全都存放在同一个 Git 代码库里。这说明一个 Git 代码库足以支持管理 Chrome 那么大的项目。我们的团队总共才 20 多人，代码不超过十万行，却被强行切分成 30 多个代码库，这是非常荒唐滑稽的。&lt;/p&gt;

&lt;p&gt;最后在工程师们的一致同意下，再加上团队 director 委婉的支持，我用脚本将 30 个代码库合并在了一起，结束了大家的痛苦…… 在此之后，VP 的亲信们还不死心，在合并后的代码库里又做了一些手脚，故意加大工作的复杂性，让我们依赖于他们的“工具”，这些我就不细说了。总之你看到了，这位 VP 的瞎指挥，导致团队浪费很多的时间和精力。如果这种情况不受控制继续下去，整个团队甚至整个公司，都有可能因此走向灭亡。&lt;/p&gt;

&lt;p&gt;我发现很多所谓管理人物，他们到一个新的公司出任要职，其实并没把公司的利益放在心上。他们不是为了公司的发展和成功做出决定，而是为了自己的“仕途”。这些管理者明白，公司就像一艘船，自己表面上在为公司服务，而其实是在利用公司的资源达成自己的目标。由于自己挥霍公司的资源，而不作出实质的贡献，甚至瞎指挥帮倒忙，这艘船在将来很可能会沉没。但作为管理者，自己总是可以在沉船之前跳到另外一艘船上，靠着自己的关系网，不断找到高薪的职位……&lt;/p&gt;

&lt;p&gt;像这样的例子我还有很多。为了团队，为了公司能够达成自己的目标，我多次顶着压力，帮助团队和公司避免不必要的浪费，甚至悬崖勒马。当然很多时候团队在错误的道路上走得太远，看清真相的我却受到压制，没有话语权，所以也爱莫能助，只能听之任之。注意我在这里谈“企业利益”，并不是说我喜欢为资本家卖命。这里的“公司”和“企业”，只是代表一个集体，它包括了公司里所有的员工和股东。&lt;/p&gt;

&lt;p&gt;从这样一个例子，你也可以看到我作为一个“现实理想主义者”的特征。这个 VP 可算是“理想主义”了，他一拍脑袋提出了“新颖”的，其它公司都没想到的工作方式，结果却给大家带来了灾难。我从现实和理性的角度，分析得知这种做法的荒谬，论证了“传统做法”的和理性，与他据理力争，维护公司和团队的利益，再加上团结大多数有职业素养的工程师，最终我们合力战胜了 VP 的瞎指挥，逆转了他给团队和公司带来的伤害，避免了灾难性的后果。&lt;/p&gt;

&lt;p&gt;这样的现实理想主义者，不管是作为员工，作为团队的领导，还是作为公司的统帅，都会身体力行，给他们带来帮助，避免不必要的浪费和弯路，引导企业走上正轨，走向兴旺繁荣。我希望广大 IT 工作者能理解我这里说的东西，把自己的“伟大理想”植根于现实，避免因为自己的轻狂而走向歧途。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你觉得这篇文章对你有帮助，可以自愿&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费&lt;/a&gt;购买，建议零售价：￥30。&lt;/p&gt;
&lt;/blockquote&gt;

                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/17/practical-idealism</guid>
<pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>对中国人的信心</title>
<link>http://www.yinwang.org/blog-cn/2017/05/16/chinese</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;对中国人的信心&lt;/h2&gt;
                            &lt;p&gt;每一次说要回国，都会有一些在美国的中国人劝我不要回，也会有一些已经回国的中国人鼓励我回去。对于一个离开中国十年之久的人，要决定回国确实是一件相当犹豫的事情。几次的反复之后，再加上多年来跟美国各种族人士的接触，我终于发现一个让我安心的结论。我对中国人作为一个民族充满了信心，所以我再也不担心回到中国。&lt;/p&gt;

&lt;p&gt;纵观十多年来我在事业上最开心的时光，都是跟中国人在一起。出国之前我为了挣点路费，加入了一家由归国华人创立的游戏平台公司。我仍然记得两位创始人是用如何的礼遇接待我。面试的时候我就已经告诉他们，我准备几个月之后去 Cornell 读博，只想暂时工作几个月，他们仍然决定接受我作为最早期的员工。不过他们当时也告诫我说：“哎，你去 Cornell 那种地方干嘛？我们两个就是 MIT 毕业的。那些个牛校都不是什么好东西，你会被整得很惨……” 然而由于 Cornell 和“常春藤联盟”的美名，我没有听信他们的话。我并不后悔当初的决定，因为辗转几个地方之后，我成为了今天的我。然而现在想起来，他们说那些话的确是为我好的。&lt;/p&gt;

&lt;p&gt;当时在公司里，同事们水平参差不齐，人们之间却充满了尊重，从来没有人随便 judge 另一个人的能力或者智商。大家都喜欢折腾各种技术，靠着各自的兴趣走到了一起，互相学习。公司初期的环境虽然简朴，人们之间却充满了关怀。我还记得经常跟几个人去外面吃饭，跟一个猫奴同事请教养猫经验。公司 HR 还经常组织我们出去玩，去酒吧休闲，去玩杀人游戏。那时候的生活是简单而充实的…… 然而我的野心和抱负，终于还是让我放弃了那一切的快乐。几个月之后，我按原计划离开了公司，飞到美国，开始了长达十年之久的坎坷旅程。公司为我准备了丰盛的离别宴，每个人都为我祝福。&lt;/p&gt;

&lt;p&gt;可以说在美国的十年，我一直没能再受到这种级别的礼遇。我的抱负像魔鬼一样的驱使着我，为我选择了一条崎岖坎坷的道路。终于有一天，我认为自己练成了绝世的武功，然而我的心却已经为此伤痕累累。就像有个叫杨过的大侠，纵使旁人认为他有天下无敌的功夫，他心里却自知不过是个独臂的怪物而已。在国外，你很难得到真正意义上的尊重。并不是因为中国人是弱势群体，或者因为外国人专门歧视中国人，而是因为外国人的骨子里本来就不具有中国人的教化（或者叫“进化”）程度。&lt;/p&gt;

&lt;p&gt;直到十年后的一天，我进入了一个中国人主导的团队，我的生活才随之改变了。每天吃了午饭，我们一群中国人都会休息好长一段时间，沿着 Mountain View 的小路散步，一路上聊各种事情。从跟他们的交流，我再一次的感觉到在中国时的那种互相尊重。很少有人觉得自己有多了不起，大家都是在玩各种技术。也是在这样一个中国团队，我十年以来第一次遇到了在将来的生活和事业中可以作为朋友的人。&lt;/p&gt;

&lt;p&gt;可惜好景不长，那毕竟不是中国人掌权的公司，很多事情还是不能如愿。我的抱负，对生活的高期望值，再次决定让我离开，登上它觉得有挑战性的道路。我没有听信几个经验丰富的中国同事的劝告，为了对某些技术的兴趣，加入了微软里面一个印度人主导的团队。起初对印度人还没有成见，一直都对瑜伽和佛教有好感，甚至感觉印度 manager 说话很诚恳。然而日久天长，我才发现这是一种跟中国人完全不同的文化。&lt;/p&gt;

&lt;p&gt;印度人并没有中国人骨子里那种谦虚诚实的美德。表现出来的诚恳和谦虚，似乎都只是浮于表面。本来不懂很多东西，却总能说得头头是道，信心十足。这似乎是印度人与生俱来的特殊能力。中国人的谦虚反而成为了可以被他们利用的弱点。每当你表示自己有需要改进的地方，表示领悟到了某些东西，或者表示对其他人的欣赏，都会被作为你经验不足，作为压低你价值的理由。只有那种城府很深，假装自己什么都已经懂了，号称在这个领域有“三十年经验”的人，才会被认为有价值。然而就是这种人，经常制造出潜伏两年之久的 bug，一旦发作就导致灾难性的后果。&lt;/p&gt;

&lt;p&gt;也许是由于自己的国家生活条件恶劣，印度人必须要联合起来，占领美国这块土地。或者也许是因为他们本身有问题，才导致自己国家的生活条件恶劣。他们占据美国公司高层管理地位，很多靠的不是自己的技术和实力，而是靠关系和政治。很多印度人职位很高，然而他们做的东西却没多少技术含量。&lt;/p&gt;

&lt;p&gt;很多国内的中国人不了解情况，看到某些大公司华人高管离职，就感叹中国人输给了印度人，称赞印度人如何的团结，勤奋，有能力。然而事实却是，中国人才是世界上最勤奋，最聪明，但也是最谦虚最善良的民族。试问微软和 Google 的印度 CEO 们，他们亲手做出了什么了不起的东西吗？只不过是手下人做出了东西，自己去领 credit 而已。&lt;/p&gt;

&lt;p&gt;在我看来，硅谷高科技公司的高层被印度人占据，并不表明中国人在硅谷的失势，而是代表着硅谷的衰落。越来越多有能力有志气的中国人离开硅谷，回到中国开创自己的事业。不是因为他们能力不行，而是他们不再愿意过这样受人压制，不能发挥自己才能，发挥了才能却让别人拿 credit 的生活。接受过正规计算机科学教育的中国人不跟你们玩了，我倒要看看印度人怎样用培训班级别的死知识，撑起硅谷的高科技 :)&lt;/p&gt;

&lt;p&gt;印度人是如此，其它种族的人在这方面可能也没有好到哪里去。他们显示出来的文化背后，并不具有可以跟中国文化比美的美德。你也许认为我有点民族主义，可我不是的。民族主义一般都盲目的认为自己的民族很强大很优秀高人一等，其它民族都是劣等民族，应该被欺负甚至被灭绝。然而我的标准不是技术上或者肌肉上的优秀和强大，而是人文上的，我在乎的是他们的人性，对人的关心和尊重。对于不具备这些美德的民族，我只能表达我的遗憾而已。&lt;/p&gt;

&lt;p&gt;我对中国人充满了信心。这种信心不只来源于我们的聪明才智，它更多的来源于我们千年以来传承的美德：诚实，勤奋，谦虚，热爱生活。纵观历史，中华民族从来就是热爱和平，容易满足，乐在自己的生活里的。很少有中国人对称霸世界，侵略其它国家那种事情感兴趣。这就是为什么我们发展了如此博大精深的饮食文化，各种休闲娱乐，可以说是世界首屈一指。就算那些被人指责为“抄袭外国”的网络应用，我们抄过来之后推陈出新，居然可以后来居上，比原版产品还有趣好多倍，充满各种贴心的设计。这是怎么回事？每个对自己民族没有信心的中国人，都应该思考一下自己的真正价值了。&lt;/p&gt;

&lt;p&gt;曾经我们都被灌输，说我们中华民族是伟大的，结果却是很多中国人的心里充满了自卑。你越是告诉他们中国很伟大，他们越是以为外国人厉害，国外什么都好。所以你就只有等他们有了海外流浪的经历之后，再来看中国人，他们也许就会理解中国文化的价值。他们就可以打心眼里产生对中国人的信心，而不再是因为自卑而空喊出来的口号。&lt;/p&gt;

&lt;p&gt;当然了，我并没有把回国的生活想象的过于美好，我肯定也会偶尔遇到困难和不顺心的时候。很显然，不可能每个人都具有我所说的那种美德，也会有很多素质低下的人。显然，国内公司里还是可能有政治斗争和各种不好的现象。对于这些我当然都是有心理准备的。然而由于大部分中国人骨子里面有很好的东西，我相信在国内会遇到很多意气相投的人。&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/16/chinese</guid>
<pubDate>Tue, 16 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>微软的秘密离职协议</title>
<link>http://www.yinwang.org/blog-cn/2017/05/10/microsoft-separation</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;微软的秘密离职协议&lt;/h2&gt;
                            &lt;p&gt;我与微软的谈判，终于以我的“有条件离职”而告终。谈判的大部分内容，是印度 manager 滔滔不绝地试图贬低我，告诉我为什么不值那个钱，为什么我不应该有更高的职称，为什么其他人也可以解决同样的问题，做出同样的东西…… 当然，这里面没有一个是真的。看来微软真是不知好歹，目光短浅的公司，宁愿放弃唯一可以看透产品核心结构，解决其中问题的人，也不愿意给人合理的报酬和职称。或者也许我的代码写得实在太清晰了，所以他们以为不需要我就可以继续开发吧，那我祝他们好运了。我除了重写和简化产品的核心结构，还有对产品总体设计的各种见解，各方面的简化思路，对“高手”们自认为是“难题”的轻松答案…… 这一切都会随着我的离去而消逝。我再一次看到一个产品，由于管理层的自大和愚蠢，而走向昏庸和失败。微软即将发布又一个自己人无法理解其核心构架的产品！&lt;/p&gt;

&lt;p&gt;不就是离职吗，然而微软早已经在 offer letter 里埋下了伏笔，让你走都走不爽。由于入职时间不够一年（7 月份到一年），按照 offer letter，如果我“自愿离职”，微软就有权收回入职时给我的“sign-on bonus”，价值 2 万 5 千美元。在我看来，这个 sign-on bonus 根本就不应该还。微软在谈工资的时候相当狡诈，他们不是直接给一个正式的 offer letter，而是先用不正式的 email 给出一些光秃秃的数字。一直把这个 sign-on bonus 和其它 bonus 加在我的“第一年的收入”上面，以此显示微软给的工资还算差强人意。直到你接受了，给正式 offer letter 的时候，才悄悄加进一些条款，比如说 sign-on bonus 不满一年自愿离职要退还，谈好的股票数目不写进去之类的。不过注意，这必须是“自愿离职”，如果我不是自愿离职，比如被开掉或者裁掉，那就不用还这个钱。&lt;/p&gt;

&lt;p&gt;微软对这个产品设下的计划就像是在打仗，一个目标接着下一个，给每一个目标设定的时间都不切实际的短。再加上做事的方式太笨，浪费很多时间在不必要的事情上，不会使巧劲，所以工程需要的时间总是比估计的时间多出很多。我从来没有发现任何目标是如期完成的。管理层似乎喜欢给大家灌输这样的革命理念：这是一个伟大的产品，大家应该全力以赴，达到伟大的目标！然而微软才给了大家多少报酬呢，别人凭什么为你拼命，而且是拼命干一些傻事。这种不切实际的计划和大跃进似的心理模式，导致很多人超时工作，晚上和周末都会发现团队的各种 email 不断，很多人显得疲惫不堪。大老板是个脾气不好，平时都不正眼看人的意大利老头子，经常看到其它人被他叫去训话，战战兢兢的，不停点头。人们的心里头仿佛都有一种压力，生怕出了岔子被他逮住。&lt;/p&gt;

&lt;p&gt;我虽然不怕这老头，但这几个月为了按时做完事情，仍然是日夜辛劳，付出的额外工作时间的价值，已经远远超过 sign-on bonus 的数额。更不要说我放弃了今年的 performance bonus，而且我已经工作了 9 个月，所以就算要退 sign-on bonus 也不应该全部退，而应该是按比例（9/12=0.75）的样子。因此，我对于“自愿离职”提出了一个很简单的条件，我要求微软放弃收回 sign-on bonus，这样我就给他们签字，表示自愿离职。否则他们就必须通过其他手续开掉我，这样因为不是“自愿离职”，我就不需要退他们 sign-on bonus。&lt;/p&gt;

&lt;p&gt;结果他们“同意”了不收回 sign-on bonus，然而却为此附加了许多的条件，把这些都写进了我的&lt;a href=&quot;http://yinwang.org/resources/microsoft-separation-agreement.pdf&quot;&gt;离职协议&lt;/a&gt;，要我签字。这些条件非常的恶心，特别是第 8 条：从今以后我不得再加入微软，它的子公司，合资企业，以及微软股份超过 50% 的附属公司，如果加入了他们就有权赶我走。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://yinwang.org/resources/microsoft-separation-agreement.pdf&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/microsoft-separation-term8.png&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;很显然，我这辈子再也不会加入微软了。我要是成立了公司，也绝对不会卖给微软。光是想到要用 Windows 工作，要和吹牛和压榨手段极高的印度阿三共事，我就不会再做这样的傻事了。但这应该是我说了算的，现在要我签这样的协议，永久的封锁我进入微软及其子公司，就是在严重侵犯我的合法权益和尊严，这不是明摆着在欺负人是什么？以为不停的收购其它公司，靠这个协议就可以把我饿死了？几个职场经验丰富的朋友看了这个条款，都说从来没见过其它公司使用这样的离职条款，就算被开掉也不可能被这样封锁，这是非常险恶的霸王条款。&lt;/p&gt;

&lt;p&gt;另外，协议还要求我不能鄙视和嘲笑微软，不能协助现在，过去或者将来的微软员工对公司提出抱怨或者顾虑，承认微软没有犯任何错误，不得用任何原因起诉微软，等等封嘴协议。由此可见，虽然美国有所谓“言论自由”，然而你的自由却是被金钱牢牢地控制的。&lt;/p&gt;

&lt;p&gt;当然，我严词拒绝了签这个协议，因为它就像是清朝政府跟洋鬼子们签的不平等条约。我对他们说：“这个协议要我放弃如此多的法定权益，我不能签，给我再多钱也不能签。我完全可以算是放假，等到 7 月满一年的时候再离职，就不需要还你们 sign-on bonus 了。所以你们最好还是把那些恶心的条款给去掉，这样大家都开心。” 然而微软 HR 却回话说：“你的 email 里面已经说你要离职，我们已经同意了，所以等到 7 月不再是一个选择。也就是说，你已经自愿离职了。如果你不签这个协议，我们就要全额收回你的 sign-on bonus。”&lt;/p&gt;

&lt;p&gt;从来没有听说自愿离职可以发个 email，不用签字的。另外，我的 email 里面说的是：“如果你们同意不收回 sign-on bonus，我就离职。” 这是有条件的，微软并没有满足我的条件，而是在此之上又提出了一系列侵犯我法定权益的条件。我不能接受这些条件，所以我也就不会主动离职。看清楚这里的逻辑了吗？后来，我就发现 HR 开始歪曲我的话，想造成一种我已经主动离职的假象，这样他们就可以利用这个 sign-on bonus 的问题，来逼迫我签这个恶心的协议，封我的嘴，并且把我封锁在微软之外。这个算盘打得可真是巧妙。&lt;/p&gt;

&lt;p&gt;与微软 HR 和上司们的谈话，从我面试的时候开始，就已经充满了谎言和欺诈，让我各种不爽。撒谎找借口压低职称和工资，职称比以前公司的还要低，却借口说是“为我好”。开头给的基本工资跟之前的公司一模一样，在我愤然拒绝之后才涨了一点。关于职称的事情找我去“谈”，结果却是在滔滔不绝给我背书讲课，说微软的职称级别系统多么严谨，微软的 senior 需要做多么了不起的工作，为什么连 senior 职称都不给我。号称入职六个月之内给我升职，却完全没有动静。上司们为了树立威信，对自己的经历和成就进行夸大，无中生有。故意不让我和其它团队面试。各种讨价还价贬低人的价值。在 offer letter 上做文章，悄悄塞进隐藏条款。再加上入职后的各种奇葩经历，赶工超时工作，方式太笨工具不可靠导致事情花好几倍时间精力，各种变相不尊重，夸大团队实际能力，拿一些 principal engineer 甚至印度小菜鸟跟我比……&lt;/p&gt;

&lt;p&gt;这一切都让我恶心而厌倦。要不是早已经决定在美国只看最后一个大公司，我是肯定不会加入微软的。没想到就要离开了，还要特大的恶心我一下，留下终生难忘的记忆。微软从一个“不尊重人的官僚大公司”，忽然下滑到了一个“流氓公司”。原来微软对待人才的态度，就是骗进来，能少给钱就少给，设下各种圈套让他升不上去又走不掉，加紧日程增加工作压力，从他身上能榨出多少价值榨多少，榨完之后还说没有做得很好，不给升职。&lt;/p&gt;

&lt;p&gt;我曾经一度讨厌微软和 Windows，后来却由于几个朋友说微软的好话，说他们尊重人才，说 Windows 其实改进了很多了，微软不再是以前的微软，又看到微软做那么多“慈善事业”，似乎成为了良心公司，才决定去试试。今天我终于明白了，微软始终没有变过，它一直是那个邪恶的霸王公司。即使现在风光不再，它的本质从来没有变过。尊重人才，我没有感觉到，而慈善事业，也只不过是一个幌子。美国很多所谓“慈善机构”，不过是逃税工具，受贿工具而已。很多富人都声称自己在做慈善，可是为什么美国还是这么多穷人，活得那么惨？&lt;/p&gt;

&lt;p&gt;Windows 和其它微软软件的质量，也从来没有好起来。微软有过一些好的想法，然而它们的实现，全都糟蹋在水平低劣的印度廉价劳动力手中，糟蹋在他们的各种勾心斗角和政治斗争中了。有真知灼见的人走掉，丢下一堆半成品：C#，PowerShell，还有这个 StorSimple…… 这就是为什么微软的有些东西说起来好听，用起来怎么就那么难用，问题那么多，出了问题还不知道怎么回事。现在除了微软的人还在用 Windows，可能就只有一些半导体公司和传统行业的管理部门了，而这些人自己在家都用苹果。所以可以预见，微软的灭亡应该是迟早的事。&lt;/p&gt;

&lt;p&gt;你可能以为微软是大公司，很多人事上的事情应该规范而大气，然而微软 HR 和 recruiter 对各种事情的处理方式，比起很小的 startup 还要不规范和狡诈，各种不透明，使用隐藏条款，钻法律空子，各种抠门欺诈威胁，甚至肆意歪曲事实。微软不能靠自己的魅力留住人才，就想方设法设置各种讨厌的限制，比如 H1-b 和绿卡程序都用最慢的方式办，拖泥带水让你走不掉，要求不满一年全额退回 sign-on bonus，或者干脆用 L1 签证从印度搬运不能换工作的奴隶过来任他们使唤。想以这样的方式来阻碍员工的流失，可想而知留下来的都是什么样的人。&lt;/p&gt;

&lt;p&gt;虽然这个离职协议的内容包含了“保密”条款，要我不得向其他人透露协议的内容，然而由于我没有签字，所以它没有法律效力，我也没有必要为他们保密。我有权把协议的内容公之于众，以警世人。很多人也许还没见过微软的离职协议吧？因为签了的人就不能再分享它，没有签的人很多也怕得罪微软，所以微软就可以隐藏自己如何对待离职的员工。我没有签字，所以现在大家可以见识一下了。很多人还以为微软是一个仁慈的雇主…… 我要告诫大家，如果有协议让你放弃如此多的合法权益，请不要为了一点钱就签它。这不只会祸害你自己，还会伤害其他跟你同样经历的人。&lt;/p&gt;

&lt;p&gt;你可以在这里下载这个离职协议的&lt;a href=&quot;http://yinwang.org/resources/microsoft-separation-agreement.pdf&quot;&gt;原文&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我已经决定抛开他们不理了，免得继续坏心情。这个工作绝对不是朝九晚五的普通工作，它已经耗费了我九个月的宝贵时间，从早到晚甚至加上周末，让我身心疲惫，没有心情做其他事情，严重影响了我的生活质量。微软的工资只比之前的公司高一点点，工作量和耗费的精力却大了好几倍，这样的工作不值得换。跟微软的 HR 和管理层对话，本身就是对我的一种侮辱，所以我已经将他们的通讯方式完全封锁，微软这个名字应该完全离开我的生活。&lt;a href=&quot;http://www.yinwang.org/blog-cn/2017/05/04/contact&quot;&gt;封锁 Google&lt;/a&gt; 需要费点功夫，封锁微软却完全不费力气，因为它的产品不在我的生活中已经许多年了。微软的中国朋友们，我对你们没有成见，希望我的经历给你们提供有益的信息。祝你们一切都好，有缘我们在别的地方再会。&lt;/p&gt;

&lt;p&gt;后记1：有些人给我来信，指出我的用词“印度阿三”有种族歧视之嫌，怕微软以此来告我，这些人的脑子可能被美国人传染了“政治正确”的毛病，以至于他们已经可以不分敌我。第一，这些人可能没有在美国生活过，没有接触过印度人，不明白大部分印度人存在的人品问题。这些人可以先看看这篇&lt;a href=&quot;http://mp.weixin.qq.com/s/9JKHJ0NXHYs27oGRa3zpgg&quot;&gt;文章&lt;/a&gt;，印度人到底是什么问题，为什么在美国的中国人千万不要跟印度人共事。第二，这些人并不明白什么叫做“种族歧视”。由于印度人的人品问题而不喜欢他们，背地里叫他们“阿三”，这并不算种族歧视。就像不喜欢白人，叫他们“鬼佬”，也不算是种族歧视一样。我们有权不喜欢任何人，这是天赋的，不可剥夺的人权，更不要说我们的厌恶是有理由的。第三，就算可以说我是种族歧视，微软也拿我没办法，因为我是在自己的博客发文，并没有在公司这样称呼他们。第四，我并不认为我有种族歧视，正好相反，微软的很多印度人才有种族歧视之嫌。种族歧视不是口头上的，而是实际待遇上的。印度人勾结起来排挤华人，这是很严重的种族歧视，可比叫“印度阿三”严重多了。第五，种族歧视是一直存在的，而且是没法解决的问题，美国号称“民主”，要消除“种族歧视”，然而美国既不民主，又遍地是种族歧视，根本没人管。所以我并不觉得我的用词有任何不妥，相反，在美国的华人可能会很支持我这么说印度人。现在我高兴了，再说三遍：印度阿三！印度阿三！印度阿三！&lt;/p&gt;

&lt;p&gt;后记2：有人跟我说他在知乎上看到有人黑我，说我伤害了当初内推我去微软的朋友，说我自私过于冒险不顾及内推我的朋友。我的回复：看来知乎这帮人真是找不到其它岔子了，只好找这种风马不及的出来。这是一种常见的诡辩技巧，可以用来影响那些不能理性看待问题，感情用事，容易同情心泛滥的人。这些人不顾真相事实，不针对真正有问题的一方，却找一些偏僻的可以煽情的点，旁敲侧击的攻击没有问题一方。这些人没有看到微软是强势霸权的一方，却想方设法攻击我这个弱者，由此可见他们的心地。微软的行为恶劣，我骂他们怎么能“伤害”了内推我的朋友？这些人觉得我的朋友是什么啊，跟这些“知乎牛人”一样是强权势力的哈巴狗不成？事实是，因为给我推荐了不好的公司，以至于我的权益和精神受到伤害，我的朋友已经对我诚恳的表示歉意。然而很明显他原本是一番好心，加入微软是我自己做出的决定，发生这种事情谁也无法预测，怎么可能怪到推荐人的头上。推荐之后就是我和微软之间的事情，不关他任何事了。我不能怪他，微软也不能怪他。我相信我跟微软之间的过节，不可能对他在微软的事业有任何影响，否则微软还真是邪门了。我建议这位来信的朋友以后不要再看知乎了。这么仔细的阅读知乎的评论，给我转发来自知乎的信息，说明他还没有摆脱这种低劣网站的思维控制。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果你觉得这篇文章对你有帮助，可以自愿&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费&lt;/a&gt;购买，建议零售价：$5。好心的朋友，请不要超过这个数额，我这可不是在募捐，我是在做买卖 :)&lt;/p&gt;
&lt;/blockquote&gt;

                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/10/microsoft-separation</guid>
<pubDate>Wed, 10 May 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>美国企业的装嫩问题</title>
<link>http://www.yinwang.org/blog-cn/2017/05/08/company-culture</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;margin-bottom: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;

                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;美国企业的装嫩问题&lt;/h2&gt;
                            &lt;p&gt;不知道从什么时候开始，美国的大小公司，都开始重视所谓“企业文化”，仿佛企业一定要有自己独特的文化，不然就不够“酷”，就不能吸引人了。没见过世面的大学毕业生，很容易因为某些公司鼓吹的“年轻文化”而加入他们，进去之后才发现不爽。作为一个经历过这一切的人，我觉得有必要把这个问题拿出来专门说一下。&lt;/p&gt;

&lt;p&gt;说到喜欢鼓吹自己企业文化的公司，首先想起来的当然是 Google 了。Google 总是号称“不作恶”（don’t do evil），声称自己虽然是大公司，却仍然保留了 startup 的文化。进入 Google 时，HR 都会告诉你要“Googley”，要接受 Google 的价值观，融入 Google 的文化。在 Google，到处是鲜亮的“Google 色”设计，很多人的办公桌上摆放着稀奇古怪的魔方，各种谜题和玩具，显示自己很聪明或者有创造力。办公室各个角落都有 foosball，台球桌，游戏机，Rock Band 一类的游乐设施。时不时还有人发动 NERF 枪战，一颗颗的泡沫子弹从你头顶上呼啸而过…… 初进 Google，你也许会感叹，这是一个多么年轻的公司，简直跟游乐场一样！&lt;/p&gt;

&lt;p&gt;确实，Google 的文化属于 startup 文化，然而 startup 文化真的好吗？我在好几个真正的 startup 待过，所以我知道他们确实也是那个样子。很多 startup 的办公室采用完全的“开放空间”设计，办公桌之间没有隔离板，同事之间除了某些角度可以用显示器遮一下，基本没有隐私可言。某些 startup 甚至把电脑摆成一排排的，让程序员肩并肩地坐在一起工作，跟中学生上课的教室一样。当然，各种玩具，游戏机，NERF 枪，都是不可少的。很多 startup 在管理上还采用 Agile 方法，每天早上开站会，Scrum，在全公司采用结对编程（pair programming），引入各种新的程序语言（Scala，Clojure，Go，Haskell）和其它“新技术”，经常自己一拍脑门想出与众不同的团队合作方式，就立马开始在全公司推行…… 这些公司很想制造一种“融洽”，“合作”，“年轻”，“创新”的氛围，然而经验告诉我，这样的做法几乎总是得到适得其反的效果。&lt;/p&gt;

&lt;p&gt;这些“新奇”，“年轻”的企业文化，似乎很容易吸引刚走出学校，未经世事的年轻人，然而在一个成熟的人看来，这些公司并没有显示出真正的活力，而是显示出愚蠢和虚伪。事实证明，缺乏隔离措施的所谓“开放空间”办公室，并不如传统的单间办公室或者隔离间（cubicle）。编程需要的是独立思考，思考需要集中注意力，很多人思考时甚至不喜欢别人能直接看见自己。没有隔离和隐私措施的办公室，使得员工之间随时都可以互相干扰，难以集中注意力，这对于写出优雅清晰的代码是很不利的。要是遇到那种成天高谈阔论的人在你旁边，那就更倒霉了，不得不成天戴着耳机工作。有些人时不时地发动 NERF 枪战，不但极大地干扰其他人的正常工作，而且制造一种浮躁虚假的氛围，你甚至可能因此受伤。至于 Agile，站会，试用新语言，采用结对编程，鼓吹 TDD，突发奇想的新管理方式，等等，都是 startup 的通病。很多新公司没有经验，不知道什么是真正好的技术和管理方式，再加上不小心招进来不懂装懂的管理者，所以走一步错一步，浪费大量的资源，一步步地走向失败。&lt;/p&gt;

&lt;p&gt;在我眼里，Google 就像一个上了年纪的大妈，偏偏要染了彩色头发，穿上日本少女装，嗲声嗲气地说话，各种卖萌，让人起鸡皮疙瘩。这是什么问题呢？这里有一个“得体”的问题。一个人的穿着和行为，必须符合他的实际年龄或者更加成熟，才会显得得体和优雅。一个小男孩完全可以穿上笔挺的西装，小大人般的稳重也不会招人厌恶。然而一个大叔或者大妈，穿上少男少女装，嗲声嗲气说话，那就会让人恶心。事实是，不管人的年龄如何，成熟稳重优雅才是正道。年龄和经验应该被作为一种值得尊敬的财富，而不是一种需要隐藏的弱点。我们可以容忍一个人在年轻的时候略显幼稚和浮躁，却难以接受有一定生活经历的人显示出这样的气质，因为我们期望他们已经学会一些东西。&lt;/p&gt;

&lt;p&gt;当然，我并不是说 startup 采用这样的文化就可以接受。其实不管公司成立时间有多短，采用这种“装嫩文化”，都是一样的问题。公司成立的时间虽然短，然而公司里的人却都已经是大学毕业的成年人，所以就算再“年轻”的公司，把公司文化搞得跟中学似的，只会让有经验的人笑话。每一次进入这种刻意制造年轻氛围的公司，或者跟他们面试，我都会发现这公司存在非常奇葩和愚蠢的问题，所以我后来都避免接触这种大肆鼓吹自己文化的公司。&lt;/p&gt;

&lt;p&gt;美国公司这些所谓“企业文化”，都是刻意做出来的表面现象，换句话说就是“装”，或者叫“套路”。无论表面上多么“和谐”和“年轻”，都是假的。公司装嫩的目的，往往在于掩盖他们本质上的问题。把自己的“文化”强加于人，说明他们在本质上是不尊重人的。&lt;/p&gt;

&lt;p&gt;一个好的企业文化，应该是每一个员工自然而然从自己的生活中带来的，而不应该是公司创始人独断专行“制造”出来的。一个好的企业，首先应该对每一个人发自内心的尊重和真正的关心，给他们提供良好的，可以安心工作的环境，提供好的福利，剩下的所谓“文化”，不需要你刻意去制造，自然而然就有了。&lt;/p&gt;

&lt;p&gt;据我了解，这种装嫩现象是美国公司特有的，欧洲和中国的大部分公司都没有这种问题。不过我也知道，由于很多中国人对美国的崇拜心理，再加上一些从这类美国公司海归的中国人，有些国内的 startup 也开始采用类似的装嫩作法。在这里我想告诉广大的中国企业，我们其实没必要模仿美国公司的这种文化，它并不是什么好东西。我也想告诫广大求职者，见到这种鼓吹“年轻文化”的公司，最好提防着点 :)&lt;/p&gt;


                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">2017/05/08/company-culture</guid>
<pubDate>Mon, 08 May 2017 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
