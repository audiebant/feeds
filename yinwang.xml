<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>http://www.yinwang.org/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Mon, 02 Jan 2017 20:38:02 +0800</lastBuildDate>
<item>
<title>新年展望</title>
<link>http://yinwang.org/blog-cn/2017/01/01/new-year</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;新年展望&lt;/h2&gt;
                            &lt;p&gt;2016 过去了，人们都在庆祝，展望一个新的开端。老实说吧，一年的第一天，并不是什么真正的“开端”。理性一点看，1月1号不过是历史长河里很普通的一天。认为这一天特别，就跟很多人迷信尾数为8的电话号码没什么区别，只不过一个是8，一个是1。没有人会忘记过去，好人继续做好事，坏人继续做坏事，幸福和灾难都在继续上演，世界不会焕然一新。懂得幸福的人，每一天都在过节；不懂得幸福的人，过节都在受罪。然而这个时候，确实是总结过去一年，展望将来的好时候，所以我还是决定写一点东西。&lt;/p&gt;

&lt;h3&gt;事业&lt;/h3&gt;

&lt;p&gt;过去的一年是事业上比较平稳的一年，我没有遇到前几年那样严重的，直接危及个人生存的灾难。可以说最近待的两个公司，相对而言都是仁慈的。然而这个标准，对于我来说实在太低了，之前遇到的那几个恶棍公司，在一个法制健全的国家根本就不应该可以存在。新的公司虽然不至于做出那样龌龊的事情，相对而言更加尊重人，然而我却远远没有感觉自己被放到了恰当的位置。在美国，我看不到这在将来有任何希望，因为在我待过的所有美国公司都充满了政治，你必须玩弄权术才能取得高位，这对于靠技术吃饭的人非常不公平。&lt;/p&gt;

&lt;p&gt;多次的经历让我确信了一个事实，那就是美国公司并不真的尊重人才和真知灼见。我见过好些很有才能的人，做的工作不过是给牛皮大王们擦屁股，帮他们升官发财。这种情况不管是大小公司都一样，这是由美国的总体政治和社会环境决定的，不是一个公司在短时间就可以改变的。在技术上的深入见解，很难通过理性的探讨而得到承认，所以我眼睁睁地看着各种项目误入歧途，却由于自己所处的卑微职位，没有政治力量去改变它。&lt;/p&gt;

&lt;p&gt;美国的公司里面，充满了在技术上一知半解或者完全无知，却通过政治手段占据高位的人。期望让他们接纳建议，让项目走上正轨的希望，几乎为零。经常出现的现象是，说出了真话，讲清楚了道理，以为大家已经理解得很清楚了，结果到了最后的关头还是领导说了算，一个人武断做出与大家的共识正好相反，走向失败的错误决定，还说这是“我们的决定”。所有人都心知肚明，但还得按领导说的来办，做一些无用功，甚至给本来简单的事情制造障碍，苦逼得不行。美国的公司里面完全没有民主，不尊重事实。&lt;/p&gt;

&lt;p&gt;当然以上的看法不针对我现在的公司，它其实比很多其他公司要好一些，然而它却没能改变我对美国公司的总体看法。引用一句最近流行的政治词汇，对于美国公司这样的现象，我已经恶心和厌倦了（sick and tired）。我对自己的职业发展，我受到的尊重和收入水平，都非常的不满意。用句玩笑话说，就是做着卖白粉的工作，拿着卖白菜的钱，凭什么啊？目睹身边中国人的职业状况，也不过是疲于奔命，养家糊口而已，各种奴隶一样的思想。我对美国感到希望渺茫，所以未来的几个月，就是我对美国最后的观察期。如果 Trump 上台之后没有明显的好转，我打算在 2017 年的夏天抛弃在美国的事业，回到中国。&lt;/p&gt;

&lt;h3&gt;爱情&lt;/h3&gt;

&lt;p&gt;过去一年的个人生活，充满了颠簸和反复。在美国这样的国家，想要遇到这样一个人，得到肉体和精神的双丰收，建立幸福的家庭，培育心智健全的下一代，似乎是不可能的。虽然得到了短暂的浪漫和肉体的欢愉，然而却难以得到心灵的慰藉和理解。&lt;/p&gt;

&lt;p&gt;对于从小受到美国式教育的人，我感觉到一种不可逾越的隔阂和桎梏。在这些人的心目中，美国的形象太高大上了。有人仍然以为政府是正直善良的，公司是关心职工的，这与现实正好相反。好不容易以为有了一个朋友，却发现自己的心并不被真正的理解，自己的价值并不被真正的尊重。很多的心里话，很多可以写在 blog 上给陌生人看的话，却不可以对她讲，否则很可能会引发冲突，受到压抑。这是什么样的一种感情呢？感觉又遇到一个美国公司的 manager 而已吧……&lt;/p&gt;

&lt;p&gt;美国大部分学校的教育，属于“极左”的思维，不知不觉中搞政治宣传（propaganda），灌输错误的价值观。美国教育家们总是鼓吹“批判思维”（critical thinking），而其实呢，美国教育里面几乎没有批判思维。它是一种洗脑的，奴化的教育，充满了对人的价值的践踏和侮辱，从小教大家逆来顺受。受到这种教育的人，逐渐形成顺从的性格，很难从里面解脱出来。甚至成为它的帮凶，帮助这个扭曲的系统去压制那些说真话的人。从现实的角度出发，我觉得不大可能跟从小受美国教育的人发展感情，我也不希望自己的下一代从小接受美国的“左派教育”。&lt;/p&gt;

&lt;p&gt;在多次的冲突和沟通无效之后，我对这份感情失去了希望。我决定重新开始寻找自己的心灵伴侣…… 哎顺便贴个征婚启事吧，希望早日完成制造王垠军团，拯救人类的目标 :P 想要给自己未来小孩找到优秀而善良的基因的单身女士，可以跟我联系 :) 基本条件：没有在美国接受高中或大学本科教育。&lt;/p&gt;

&lt;h3&gt;政治&lt;/h3&gt;

&lt;p&gt;11月的美国大选，让我深刻的认识到了政治对于个人生活的重要性。我可以不关心政治，然而政治却时刻都在关心我。一个国家政府的本质，决定了人民的生活和心理状态。这种社会心理状态，决定了我的事业，我的朋友，甚至影响到我的感情生活。&lt;/p&gt;

&lt;p&gt;有些人不满意中国政府，然而在深入&lt;a href=&quot;http://www.yinwang.org/tweet.html&quot;&gt;分析&lt;/a&gt;美国当前的政治格局之后，我发现现任（1月20号以前）的美国政府是一个比中国政府不知道腐败多少倍的政府。20 多年以来的美国政府，一直都是世界上最腐败，最邪恶的政府，没有之一。实际上它根本不是一个政府，而是一个由&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/17/all-about-hillary&quot;&gt;流氓和罪犯&lt;/a&gt;组成的阴谋集团。他们最在行的事情，就是在全世界（包括美国本土）阴谋制造灾难，然后诬告别人，自己假装好人。&lt;/p&gt;

&lt;p&gt;一个能够制造出 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/12/01/september-eleven&quot;&gt;9-11&lt;/a&gt; 那样发指罪行，在本国残杀 3000 毫不知情的无辜平民，然后栽赃陷害，继而在国外残杀上百万无辜平民的政府，它幕后的反人类阴谋集团的继续存在，让我看不到美国社会在短时间内有改变的希望。六个月之前就写过对美国的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/19/leaving-united-states&quot;&gt;感觉&lt;/a&gt;，想要离开。我从来没有改变过对美国的看法，只是没有看清楚路线而已，还对它存在一线希望。这次对于政治的研究，让我进一步的深入和肯定了自己的看法，我看到了问题的根源。Trump 上台是美国的大幸。如果美国社会因为 Trump 的努力而走上正轨，我以后也许再过来看看好了。&lt;/p&gt;

&lt;p&gt;鉴于这些原因，我觉得在当今的环境下，在美国发展事业和家庭，都是穷途末路，那根本不是我想要的生活。我在美国已经没有了牵挂，我对它已经完全失去了兴趣，我在美国的生活正式进入倒计时阶段。我向往着回到中国，得到我应有的尊重，得到真正的朋友和爱情，过上真正的生活……&lt;/p&gt;

&lt;p&gt;为了鼓励我早日回国，欢迎已经回国的朋友向我&lt;a href=&quot;mailto://shredderyin@gmail.com&quot;&gt;介绍&lt;/a&gt;现在的中国国情和归国感受。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">new-year</guid>
<pubDate>Sun, 01 Jan 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>9-11 袭击的真相</title>
<link>http://yinwang.org/blog-cn/2016/12/01/september-eleven</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;9-11 袭击的真相&lt;/h2&gt;
                            &lt;p&gt;9-11 袭击一直以来都是一个谜。是谁在幕后策划，它为什么会发生？美国政府对此进行的调查都是遮遮掩掩，很多证据藏起来不给人看，借口说是“国家机密”。这种鬼鬼祟祟的行为非常可疑，所以网络上出现了很多的谣言和“阴谋论”，说这是美国政府的人自己干的。然而这些东西很少有确凿的证据，所以久而久之，人们对真相失去了兴趣。每当跟美国人提到“9-11真相”，他们的反应一般都是，我不相信美国政府可能做出这么邪恶的事情！&lt;/p&gt;

&lt;p&gt;然而最近我发现了这部摄制于 2014 年的纪录片『&lt;a href=&quot;https://www.youtube.com/watch?v=8DOnAn_PX6M&quot;&gt;9-11：新的珍珠港&lt;/a&gt;』，它打破了 9-11 的迷雾。跟『华氏9-11』之类的阴谋论不同，『新珍珠港』出自许许多多追求真相的专家：飞行员，土木工程师，结构工程师，爆破专家，甚至世贸大厦的设计者自己…… 它从严谨的证据，数据和科学的角度出发，通过常识和科学理论，指出了美国政府官方报告与实际现象的严重偏差，从而引导人们认识到这背后的可怕真相。再加上一个&lt;a href=&quot;https://www.youtube.com/watch?v=fAawF22QUMs&quot;&gt;前 CIA 特工的证实&lt;/a&gt;，还有一些&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的回忆，我发现『新珍珠港』里面的大部分猜想都是正确的。&lt;/p&gt;

&lt;p&gt;大家都没猜错，9-11 确实是美国政府自己策划和执行的。然而具体的细节和操作，其实比我们想象的还要可怕和残忍许多，以至于知道了之后你可能会做噩梦……&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;9-11 是美国政府，军方，CIA 联合策划的，用于发动战争的幌子（false-flag）&lt;/li&gt;
&lt;li&gt;撞击世贸大厦的不是波音客机，而是有两种可能：

&lt;ul&gt;
&lt;li&gt;军方遥控的大型无人机（drone）&lt;/li&gt;
&lt;li&gt;根本没有飞机，而是激光全息成像或者电脑动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大楼不是因为飞机撞击和燃烧而垮掉，而是通过可控爆破（controlled demolition）&lt;/li&gt;
&lt;li&gt;可控爆破使用的是美国军方特有的武器：纳米铝热炸弹 （nano thermite bomb）&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;下面我就把这些片子里面最震撼我的部分摘要一下：&lt;/p&gt;

&lt;h3&gt;可控爆破（Controlled Demolition）&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/8DOnAn_PX6M?t=9621&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/demolition-evidence.png&quot; width=&quot;400&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2001 年袭击发生的当天，我看了电视就觉得这很不可思议：飞机撞了楼的上面，下面楼体看起来完好无损，为什么整栋楼后来会从上到下，垂直坍塌下去，一瞬间就消失了？当时媒体给我们的解释是，世贸大厦建造时钢筋用得太少，强度不够，所以被飞机撞伤了结构，再加上飞机燃料的高温，就散架了。你看&lt;a href=&quot;https://www.youtube.com/watch?v=ZD69sP51u-s&quot;&gt;帝国大厦&lt;/a&gt;当年被 B-52 轰炸机撞了都没事，因为它钢筋用得多…… 我当时还真的被忽悠了！&lt;/p&gt;

&lt;p&gt;现在各种证据都显示，世贸大厦的钢架结构其实非常结实稳固，根本不亚于帝国大厦。飞机自身的动能和燃料的温度，都远远不够软化世贸大厦的结构。在 9-11 之前，世界上从来没有一栋钢结构的大厦因为着火而垮塌过。有的大楼着了火，全部烧焦了也都还站在那里。就算你要塌，也不能那么规整地垂直塌下来啊，总要偏一点吧？而且由于材料的阻力，下降速度不可能那么快。你再仔细看它坍塌的视频，就发现这跟拆楼所用的“可控爆破”一模一样，楼体以自由落体的速度，不偏不倚垂直塌下去，就像完全不受阻力一样。这是一架波音飞机撞上去完全不可能达到的效果。唯一能达到这个效果的作法，是使用许许多多的炸弹，在非常精确的时间点引爆，也就是可控爆破的做法。&lt;/p&gt;

&lt;p&gt;『新珍珠港』提供了充足的证据，证明这是经过预谋和精密设计的可控爆破。&lt;/p&gt;

&lt;h3&gt;纳米铝热炸弹（Nano-Thermite Bomb）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/911-molten-steel.png&quot; width=&quot;172&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/911-thermite.png&quot; width=&quot;210&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/911-bodies.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;据另一些视频（&lt;a href=&quot;https://www.youtube.com/watch?v=rnbMjAN7Bws&quot;&gt;视频1&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=GOb92R34jxo&quot;&gt;视频2&lt;/a&gt;）的介绍，为了更有效的弄垮这三栋楼，他们使用的是铝热炸弹，而不是普通的 TNT 之类的炸药。这符合一位&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的口述，在第一个爆炸之后，他看到有橙色的，熔化的钢水从楼的表面流下去。经过 CIA 特工&lt;a href=&quot;https://youtu.be/fAawF22QUMs?t=1498&quot;&gt;证实&lt;/a&gt;，以及化学专家的&lt;a href=&quot;http://www.taliban-norge.no/wp-content/uploads/2013/04/%E4%BB%8E%E4%B8%96%E8%B4%B8%E4%B8%AD%E5%BF%83911%E7%81%BE%E9%9A%BE%E4%B8%AD%E7%9A%84%E5%B0%98%E5%9F%83%E7%89%A9%E9%87%8C%E5%8F%91%E7%8E%B0%E7%83%88%E6%80%A7%E7%82%B8%E8%8D%AF.pdf&quot;&gt;采样研究报告&lt;/a&gt;，这种炸弹是美国军方研制的一种非常先进的武器，成分是纳米铝热材料。这东西在 400 多度的普通温度就可以被激发，进行异常剧烈的铝热反应，产生 3000 多度的高温。这是火山喷发出来的熔岩温度（700-1200 度）的 2-4 倍。难怪有人把它称为“&lt;a href=&quot;http://m.akjunshi.com/article/117609_4.html&quot;&gt;来自地狱的火焰&lt;/a&gt;”，因为自然界很难产生这么高的温度，飞机的燃料也完全不可能到达这种温度。&lt;/p&gt;

&lt;p&gt;也就是这种东西熔化了大量的钢铁和水泥，导致整座大楼垮塌。后来这些熔岩一样的钢材和水泥，滞留在世贸大厦的废墟下面，三个月之后才冷却下去。这就是为什么死了 2800 人，最后只发现不到 300 具完整的尸体，因为大部分人都被炸得粉碎，或者被蒸发掉了！由于铝热炸弹对于人类极其残忍，联合国已经在 1980 年通过『禁止和限制使用，燃烧武器的议定书』，禁止在战争中使用铝热炸弹。然而这次更为超级的“纳米铝热炸弹”，竟然被用在了本国平民身上，其心狠手辣之程度，让人毛骨悚然。&lt;/p&gt;

&lt;h3&gt;无人机（drone）猜想&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/911-boeing-diagram.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;两架飞机撞击大楼的时速大概是 580 mph（英里/小时）。而波音客机在低空的最高时速（VMO）只可能有 400 mph。这两架飞机在低空超过了波音 767 在高空的巡航速度（529 mph）。在低空飞行时，空气阻力会很大。波音 767 的引擎不可能提供这么大的推力。就算你有办法超过 VMO，机身也会被空气阻力给拖散架。很多开了几十年客机，成千上万小时经验的飞行员都说，速度超过 VMO 150 mph 以上，是根本无法控制的。没有人可以这样高速低空飞行，准确的操纵波音客机去撞大楼。&lt;/p&gt;

&lt;p&gt;另外，客机的外壳都是很轻的铝合金材料，强度完全不是世贸大厦外面那层钢架的对手，所以根本不应该可以完全撞进去，至少应该有一部分掉在外面。所以有人猜想，这两架飞机很可能根本不是客机，而是美国军方遥控的，具有加强机身和特殊引擎的军用无人机（drone）。另外经过&lt;a href=&quot;https://www.youtube.com/watch?v=o551CQFAMKI&quot;&gt;视频分析&lt;/a&gt;，也发现在飞机撞上大楼之前，楼体上有闪光出现，说明可能有炸弹同时爆炸，给飞机开路。&lt;/p&gt;

&lt;p&gt;关于这个问题，航空界人士联合起来，进行了一次深入的&lt;a href=&quot;https://www.youtube.com/watch?v=-Laaq44SDgg&quot;&gt;调查&lt;/a&gt;，搜集了许多的雷达，录音数据，发现“客机撞大楼”，确实有很多不符合数据的地方。另外，美国军方之前有一个项目叫 Operation Northwoods，使用无人机跟在客机下面，击毁客机，然后假冒成客机，继续飞行…… 有些专家觉得，这就是 9-11 发生的事情。&lt;/p&gt;

&lt;h3&gt;全息成像和电脑动画猜想&lt;/h3&gt;

&lt;p&gt;另外一些飞行专家指出(&lt;a href=&quot;https://www.youtube.com/watch?v=YQBlv7sZGVE&quot;&gt;视频&lt;/a&gt;)，遥控大型客机高速去撞大楼，也是非常困难而且开销太大。另外，波音客机在如此的低空高速飞行，所有人都应该能听到震耳欲聋的飞机噪音，音量应该超过摇滚音乐会最前排，而现场的新闻报道，&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的口述，都没有任何这样的迹象。所以他们怀疑这两架所谓的“飞机”，可能根本就不存在。他们猜想，美国军方可能采用了激光全息成像制造幻觉。&lt;/p&gt;

&lt;p&gt;然而我觉得，激光全息技术发展到今天，也不可能在半空中制造出一个飞机那么大的物体，因为要在半空中制造出不透明的物体，要求你能够改变光线在任意位置的传播方向，那似乎是不可能的。其实有一个更容易的办法可以达到这个效果。你想一想，飞机撞大楼发生在仅仅一秒种之间，为什么有几个人运气就那么好，摄像机正好对准那个方向，拍到了那个镜头？&lt;/p&gt;

&lt;p&gt;所以我觉得这些视频的来源很值得怀疑。也许这些正好拍到飞机的人，全都是这个阴谋的参与者，而他们的视频，全都是事先用电脑动画合成好的，只不过到时候拿出来作为现场录像。这种做法成本很低，然后只需要在大楼里面装上炸弹就可以了。&lt;/p&gt;

&lt;h3&gt;借口：无能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/personnel-excuse.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;美国政府和军方，喜欢采用“无能”作为借口，来解释他们“故意”的行为。在袭击发生当天，美国空军特别组织了一次训练，把几乎所有的战斗机都调到很远的地方去，只剩下 4 架战机防守东部领空。而且在这之前不久，他们对国防部的人员进行了重大调整，换了几个新手担当重任，结果出事的时候发现只能找到新手，但新手根本不知道该怎么办。另外，还有故意报错方位之类的事情。&lt;/p&gt;

&lt;p&gt;这看似犯了“错误”，然而其实是一种非常狡猾的制造借口的方式。这样飞机撞了楼之后，他们就可以说：“哎呀，不是我们不想拦截他们，只是措手不及……” 美国政府在&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/20/hillary-emailgate&quot;&gt;本加西&lt;/a&gt;恐怖袭击发生的时候，也是同样的作法。&lt;/p&gt;

&lt;h3&gt;借口：对民航飞机不设防&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/washington-missle.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;美国政府的另一个借口，是说军方的防空设施只能防御战斗机和导弹之类的东西，而不能防御被劫持的客机。然而事实是，在通常情况下，如果客机偏离规定的航道，并且没有应答的时候，FAA 会立即通知五角大楼，在几分钟之内派出战斗机去拦截民航飞机。另外华盛顿特区附近，有一个“特别空中管制区”，任何飞机要进去必须事先经过许可，不然就会被打下来。附近不但有好几个空军基地，海军基地，还有专门的地对空导弹，随时可以打下飞向五角大楼或者白宫“禁飞区”的可疑飞行物。所以显然，这种理论完全站不住脚。除非美国政府自己有阴谋，这种事情根本不可能发生。&lt;/p&gt;

&lt;p&gt;另外，从这个&lt;a href=&quot;https://www.youtube.com/watch?v=-Laaq44SDgg&quot;&gt;视频&lt;/a&gt;里的雷达和对话记录，你可以发现 FAA 和空军基地在接到劫机报告的时候，在故意放任，踢皮球，比电话客服还漫不经心。这是报告劫机，本来应该是肾上腺素上升的时刻，然而接听人最后一句话居然是慢条斯理的：“…… 好的，我看看我们能做些什么…… 请问还有什么其它事情可以帮助您吗？” 这不是明摆着是怎么回事了吗！&lt;/p&gt;

&lt;h3&gt;各种其他漏洞和疑点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;世贸大厦垮塌之后，还没有进行任何调查，就立即有卡车和挖掘机开始运走它的废墟。这是匆忙销毁证据的做法。&lt;/li&gt;
&lt;li&gt;FBI 和媒体报告说飞机上的人给家人打了电话，而在那个高度和速度，手机是不可能有信号的。&lt;/li&gt;
&lt;li&gt;五角大楼被撞之后的形状，不像是被波音 757 那么大的飞机撞的，完全看不见飞机残骸。附近建筑上的 80 多个摄像头的监控录像都被 FBI 藏起来，无法证实波音 757 真的去了那里。&lt;/li&gt;
&lt;li&gt;五角大楼被撞的那个位置，不久前花了两亿多美元进行了加固，而“飞机”其它可以死更多人的位置不撞，正好撞了那个非常牢固的地方。&lt;/li&gt;
&lt;li&gt;93 号航班坠毁的地点，看不到飞机的残骸和应该有的火焰。&lt;/li&gt;
&lt;li&gt;被指控的那几个恐怖分子，当天根本没在任何机场的监控录像里出现过。&lt;/li&gt;
&lt;li&gt;恐怖分子的飞行教练指出，这人开小飞机都不合格，完全不可能有能力操纵波音客机这种超级复杂的庞然大物。&lt;/li&gt;
&lt;li&gt;坠毁飞机的残骸，从来没有经过重新组装还原的“航空界标准”调查过程。&lt;/li&gt;
&lt;li&gt;五角大楼一名官员作证，显示国防部早就知道有飞机要撞五角大楼，却故意不打下来。然而他作证的录音被 FBI 从网站上去除，在官方报告也没有记录。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;死亡人数仍然在增加&lt;/h3&gt;

&lt;p&gt;9-11 给成千上万的人带来了灾难。由于 9-11 死亡的人数，直到今天都还在增加。由于世贸大厦的建筑材料里面有大量的石棉（asbestos，一种呼吸道致癌物），再加上铝热炸弹里面不知道有什么有毒物质，纳米物质，所以现场附近的人，估计有 40 万人患上了不同程度的呼吸道，食道，肺，肝和肾脏疾病。&lt;/p&gt;

&lt;p&gt;到今天，37000 名当时战斗在一线的救援人员里面，已经有 5000 多人被诊断患了癌症，有 1100 人死亡，医疗开销总数已经超过 3 亿美元。这些人被发现患有 70 多种癌症，其中有很多罕见的癌症，几乎没有办法治疗。然而，这 40 多万受到健康威胁的人里面，只有不到 1 万人收到了政府的“幸存者补助”。 (&lt;a href=&quot;http://www.newsweek.com/2016/09/16/9-11-death-toll-rising-496214.html&quot;&gt;Newsweek 报道&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;世界上最阴险的政府&lt;/h3&gt;

&lt;p&gt;所有的证据和现象都表明，这是美国政府自编自导自演的一出戏。他们制造这样惨绝人寰的灾难，是为了有借口可以发动伊拉克战争。另外，世贸大厦的主人也是这次阴谋的参与者之一。他在出事之前买了很多的保险，后来拿到了 40 多亿美元的赔偿，很是赚了一笔。&lt;/p&gt;

&lt;p&gt;成千上万不知情的人在大楼里，被事先准备好的塞满整栋楼的铝热炸弹，炸得粉身碎骨，连完整的尸体都找不到。很多人被完全蒸发掉了，就跟掉进了火山口一样…… 想到这里，我不禁毛骨悚然。这比我们之前想象的飞机撞大楼，还要残忍许多倍，跟日本人的南京大屠杀有得一拼。这要心理多变态的人，才会想出这样的做法！&lt;/p&gt;

&lt;p&gt;美国政府里的某些人为了赚黑心钱，可以随时把本国平民作为炮灰来用。再加上因此发动的伊拉克战争，导致上百万无辜平民死亡，这真是天大的灾难！珍珠港，9-11，&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/20/hillary-emailgate&quot;&gt;本加西&lt;/a&gt;，San Bernardino…… 这些袭击都是同样的性质：幌子。天天在叫要打击恐怖分子，结果最可怕的恐怖分子，就坐在白宫里面！小布什是坏人大家都知道。不过大家都还被蒙在鼓里，以为克林顿，希拉里，奥巴马是好人。看看这个片子，醒过来吧。&lt;/p&gt;

&lt;p&gt;另外，看看这个希拉里谈伊朗的&lt;a href=&quot;https://www.youtube.com/watch?v=xvhBoF_pCHo&quot;&gt;视频&lt;/a&gt;。她说：“我希望他们（伊朗）来袭击我们。我们甚至可以去挑起他们来袭击我们。这样我们就有正当的理由向他们开战了！” 明白了吗？其实她就是会制造 9-11 的那种人。难怪揭发 9-11 真相的 CIA 特工 &lt;a href=&quot;https://www.youtube.com/watch?v=_dvxnqe6Eew&quot;&gt;Susan Lindauer 说&lt;/a&gt;：“投票给希拉里，就等于投票给第三次世界大战。就是有那么严重！”&lt;/p&gt;

&lt;p&gt;当今的美国政府里面，窝藏着世界上最阴险的犯罪团伙。犯下这样极端残忍的滔天罪行，居然还可以藏这么深这么久，让人们继续以为他们是道德高尚的好人，也真是无人能比了。人们对 9-11 真相的无知是很危险的。由于他们的无知，这些野心家可以制造任何他们想要的假象，可以诬陷任何好人，继续屠杀本国民众，同时让他们的战争和侵略行为合法化。我希望 Trump 的政府能改变这种情况，让 9-11 的真相大白于天下，把这些十恶不赦的罪犯们早日送上断头台。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">september-eleven</guid>
<pubDate>Thu, 01 Dec 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>给 Julian Assange 捐款</title>
<link>http://yinwang.org/blog-cn/2016/11/22/assange-donation</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;给 Julian Assange 捐款&lt;/h2&gt;
                            &lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/assange-quote1.jpg&quot; width=&quot;600&quot;&gt;&lt;/p&gt;

&lt;p&gt;“每一次我们目睹非正义的现象而不行动，我们的人格就变得被动和麻木。最后，我们完全失去了能力去保护我们自己和我们爱的人。” --Julian Assange&lt;/p&gt;

&lt;p&gt;今天我给 &lt;a href=&quot;https://wikileaks.org&quot;&gt;WikiLeaks&lt;/a&gt; 创始人 Julian Assange 捐了款，用于帮助支付他的律师费用。WikiLeaks 是众多政府丑闻被曝光，受到群众监督的直接原因。它曝光出来的民主党和希拉里 email，唤醒了很多美国人，他们认识到这些人的真面目，导致了这次美国大选奇迹的出现。邪恶腐败的官僚，战争军火贩子们，被群众投票推翻。美国当局害怕事实和证据，害怕人民的力量，所以他们想方设法要消灭 WikiLeaks。&lt;/p&gt;

&lt;p&gt;Assange 是人类自由的斗士，然而他却被美国当局及其伙伴们追杀和诬陷。在美国当局的指使下，英国和瑞典警方无端指控，非法拘留 Assange，却没有任何证据。瑞典警方的逮捕令甚至不是法官批准的，而是受了某个政客的指使，是完全不合法的。他们唯一的目的就是把 Assange 抓住之后送到美国，然后施加迫害。因为这个原因，Assange 躲在厄瓜多尔驻英国领事馆，长达 4 年之久，承受各种压力，不能外出，相当于在坐牢。联合国已经根据国际人权法，判决对 Assange 的指控是非法的，他应该拥有自由，然而美国当局及其盟友却不遵守人权法，继续无端指控。另外，他还有被美国政府派遣的特务&lt;a href=&quot;https://www.youtube.com/watch?v=ZuQW0US2sJw&quot;&gt;暗杀&lt;/a&gt;的危险。&lt;/p&gt;

&lt;p&gt;美国仍然是世界上最强大的国家之一，它能否正义和自由，关系到全世界各国人民的利益。然而一直以来，美国政府的做法都很让人失望，而且带坏了很多其他国家。我希望 Trump 领导下的新美国政府，能让美国洗心革面，给世界做一个好榜样。&lt;/p&gt;

&lt;p&gt;Assange 的这个基金，是用于支付律师费用，用于对抗这些毫无证据的非法指控，目前并没有收到很多的捐款。我呼吁大家（包括在中国的朋友们）给他捐款，帮助他重新获得自由。捐款地址是：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://justice4assange.com&quot;&gt;https://justice4assange.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/assange-donation.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">assange-donation</guid>
<pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>希拉里的真实面目</title>
<link>http://yinwang.org/blog-cn/2016/11/17/all-about-hillary</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;希拉里的真实面目&lt;/h2&gt;
                            &lt;p&gt;很多人都不知道，他们的偶像希拉里，其实是世界上最腐败，最可怕，最危险的政客之一，犯下各种各样的严重罪行，多次被法庭审讯。她是美国历史上第一个被送上刑事法庭审问的第一夫人，她的丑闻真是比黑手党大哥还要多。在这次大选之前，她就应该已经在监狱里了，根本不应该可以参加竞选。&lt;/p&gt;

&lt;p&gt;YouTube 上的很多视频，揭露了希拉里的真实面目。它们在大选之前早就出现了，本来每个人在投票之前都应该看看这些负面视频（当然也应该看看 Trump 的）。可惜很多人都没有看，或者视而不见。我以前也没看过这些东西，当我发现它们的时候，我毛骨悚然……&lt;/p&gt;

&lt;p&gt;下面就是其中我觉得最可怕的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;短片：自成为第一夫人以来，希拉里撒谎，犯罪，丑闻的详细列表。看看你数得清不？可怕的事情是，其中包括收取贿赂，利用克林顿的总统职权赦免大毒枭，赦免多名恐怖分子，销毁证据，栽赃陷害和恐吓无辜官员，等等。(&lt;a href=&quot;https://www.youtube.com/watch?v=a-xjiXfJ58Q&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;纪录片『希拉里』。时长一个半小时的纪录片，可以被看成是第一个短片的完整版和补充，包含了大量的历史录像，证据和证人口述。它完整的展现了希拉里这个人的本性。(&lt;a href=&quot;https://www.youtube.com/watch?v=3BUUy1C0_4g&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;曾经被她丈夫克林顿强奸和性骚扰的女性，讲述希拉里当年是如何侮辱她们，做克林顿的帮凶，并且掩盖他犯罪的真相。注意这些女性并不是克林顿的“外遇”，她们不是自愿的，这真的是犯罪行为。 (&lt;a href=&quot;https://www.youtube.com/watch?v=NvoRcPXURwg&quot;&gt;视频1&lt;/a&gt;) (&lt;a href=&quot;https://www.youtube.com/watch?v=IuMcayh1etM&quot;&gt;视频2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;卧底记者偷拍内幕：希拉里竞选团队出钱雇佣精神病人，去 Trump 演讲场所挑衅，故意引起暴力冲突，施加陷害，策划游行暴乱，目的就是把 Trump 搞臭。 (&lt;a href=&quot;https://www.youtube.com/watch?v=5IuJGHuIkzY&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;希拉里支持者暴力挑衅和攻击 Trump 支持者，制造暴乱，甚至袭击警察。 (&lt;a href=&quot;https://www.youtube.com/watch?v=vY-ewgX4oIU&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;克林顿基金会的真相。克林顿基金会（Clinton Foundation）表面上是一个慈善机构，而其实是一个用于变相收取贿赂的“灾难资本主义”机构。它不但是克林顿夫妇收取巨额贿赂的渠道，贪污超过 90% 的捐款，给受灾地区带去更多的灾难，而且是给贩毒集团和恐怖分子洗钱的重要通道。(&lt;a href=&quot;https://www.youtube.com/watch?v=7LYRUOd_QoM&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;现在的美国，因为克林顿，希拉里，小布什，奥巴马这样的人，早已不再是自由民主的国家，它是一个腐败瘫痪的机器，它是被流氓和罪犯统治的国家。用一个好听点的词，这叫做“官僚资本主义”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Crony_capitalism&quot;&gt;crony capitalism&lt;/a&gt;），也就是腐败的官员和奸商勾结，通过不正当手段（比如贿赂）谋取暴利，让广大民众和小商业者受害的社会。好像在哪里听说过呢？中国的历史教科书告诉我们，中国在解放前就是官僚资本主义，民不聊生。现在美国终于沦落到了同样的地步，病入膏肓，濒临崩溃。&lt;/p&gt;

&lt;p&gt;这些沉睡的人们，还生活在“美国梦”的幻觉里面，仍然以为美国是自由的国家。就像 Matrix 里面的人一样，你的理念，你相信的“事实”，只不过是媒体制造的幻觉。这些被叫做“事实”的信息，从各种感官进入人的头脑，被不加判断的接受。以至于看见了真正的事实都故意不相信，继续活在梦里。就像 Matrix 里面的躯体一样，被当成这台巨大机器的电池，榨干之后就被无情的倒掉。醒来面对现实是痛苦的，但未来会是美好的，真正美好的。&lt;/p&gt;

&lt;p&gt;希望有些人看了这些视频之后能醒过来。你们不应该为希拉里的失败而悲伤甚至愤怒，反而应该感到万分的幸运。因为希拉里是一个非常危险，非常狡猾，心狠手辣的罪犯，她一旦成为美国总统，不仅对于美国，而且对于全世界都是一种致命的威胁。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">all-about-hillary</guid>
<pubDate>Thu, 17 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>C 编译器优化过程中的 Bug</title>
<link>http://yinwang.org/blog-cn/2016/10/12/compiler-bug</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;C 编译器优化过程中的 Bug&lt;/h2&gt;
                            &lt;p&gt;一个朋友向我指出一个最近他们发现的 GCC 编译器优化过程（加上 -O3 选项）里的 bug，导致他们的产品出现非常诡异的行为。这使我想起以前见过的一个 GCC bug。当时很多人死活认为那种做法是正确的，跟他们说不清楚。简言之，这种有问题的优化，喜欢利用 C 语言的“未定义行为”（undefined behavior）进行推断，最后得到奇怪的结果。&lt;/p&gt;

&lt;p&gt;这类优化过程的推理方式都很类似，他们使用一种看似严密而巧妙的推理，例如：“现在有一个整数 &lt;code&gt;x&lt;/code&gt;，我们不知道它是多少。但 &lt;code&gt;x&lt;/code&gt; 出现在一个条件语句里面，如果 &lt;code&gt;x &amp;gt; 1&lt;/code&gt;，那么程序会进入未定义行为，所以我们可以断定 &lt;code&gt;x&lt;/code&gt; 的值必然小于或者等于 1，所以现在我们利用 &lt;code&gt;x ≤ 1&lt;/code&gt; 这个事实来对相关代码进行优化……”&lt;/p&gt;

&lt;p&gt;看似合理，然而它却是不正确的，你能看出来这样的推理错在何处吗？我一时想不起来之前具体的例子了（如果你知道的话告诉我）。上网搜了一下相关话题，发现这篇 Chris Lattner (LLVM 和 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;Swift 语言&lt;/a&gt; 的设计者) 写于 2011 年的&lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;文章&lt;/a&gt;。文中指出，编译器利用 C 语言的“未定义行为”进行优化，是合理的，对于性能是很重要的，并且举出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check(int *P) {
  int dead = *P;
  if (P == 0)
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这例子跟我之前看到的 GCC bug 不大一样，但大致是类似的推理方式：这个函数依次经过这样两个优化步骤（RNCE 和 DCE），之后得出“等价”的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE(int *P) {
  int dead = *P;
  if (false)  // P 在上一行被访问，所以这里 P 不可能是 null
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE_and_DCE(int *P) {
  //int dead = *P;    // 死代码消除
  //if (false)        // 死代码
  //  return;         // 死代码
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的推理方式是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先，因为在 &lt;code&gt;int dead = *P&lt;/code&gt; 里面，指针 &lt;code&gt;P&lt;/code&gt; 的地址被访问，如果程序顺利通过了这一行而没有出现未定义行为（比如当掉），那么之后 &lt;code&gt;P&lt;/code&gt; 就不可能是 null，所以我们可以把 &lt;code&gt;P == 0&lt;/code&gt; 优化为 &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;因为条件是 &lt;code&gt;false&lt;/code&gt;，所以整个 if 语句都是死代码，被删掉。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dead&lt;/code&gt; 变量赋值之后，没有被任何其它代码使用，所以对 &lt;code&gt;dead&lt;/code&gt; 的赋值是死代码，可以消去。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;最后函数就只剩下一行代码 &lt;code&gt;*P = 4&lt;/code&gt;。然而经我分析，发现这个优化转换是根本错误的做法（unsound 的变换），而不只是像他说的“存在安全隐患”。现在我来考考你，你知道这为什么是错的吗？值得庆幸的是，现在如果你把这代码输入到 Clang，就算加上 -O3 选项，它也不会给你进行这个优化。这也许说明 Lattner 的这个想法后来已经被 LLVM 团队抛弃。&lt;/p&gt;

&lt;p&gt;我写这篇文章的目的其实是想告诉你，不要盲目的相信编译器的作者们做出的变换都是正确的，无论它看起来多么的合理，只要打开优化之后你的程序出现奇葩的行为，你就不能排除编译器进行了错误优化的可能性。Lattner 指出这样的优化完全符合 C 语言的标准，这说明就算你符合国际标准，也有可能其实是错的。有时候，你是得相信自己的直觉……&lt;/p&gt;

&lt;p&gt;（文中提出的两个问题，欢迎来信讨论，或者在两星期之后等待答案。）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">compiler-bug</guid>
<pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>对 Rust 语言的分析</title>
<link>http://yinwang.org/blog-cn/2016/09/18/rust</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;对 Rust 语言的分析&lt;/h2&gt;
                            &lt;p&gt;Rust 是一门最近比较热的语言，有很多人问过我对 Rust 的看法。由于我本人是一个语言专家，实现过几乎所有的语言特性，所以我不认为任何一种语言是新的。任何“新语言”对我来说，不过是把早已存在的语言特性（或者毛病），挑一些出来放在一起。所以一般情况下我都不会去评论别人设计的语言，甚至懒得看一眼，除非它历史悠久（比如像 C 或者 C++），或者它在工作中惹恼了我（像 Go 和 JavaScript 那样）。这就是为什么这些人问我 Rust 的问题，我一般都没有回复，或者一笔带过。&lt;/p&gt;

&lt;p&gt;不过最近有点闲，我想既然有人这么热衷于这种新语言，那我还是稍微凑下热闹，顺便分享一下我对某些常见的设计思路的看法。所以这篇文章虽然是在评论 Rust 的设计，它却不只是针对 Rust。它是针对某些语言特性，而不只是针对某一种语言。&lt;/p&gt;

&lt;p&gt;由于我这人性格很难闭门造车，所以现在我只是把这篇文章的开头发布出来，边写边更新。所以你要明白，这只是一个开端，我会按自己理解的进度对这篇文章进行更新。你看了之后，可以隔一段时间再回来看新的内容。如果有特别疑惑的问题，也可以发信来问，我会汇总之后把看法发布在这里。&lt;/p&gt;

&lt;h3&gt;变量声明语法&lt;/h3&gt;

&lt;p&gt;Rust 的&lt;a href=&quot;https://doc.rust-lang.org/book/variable-bindings.html&quot;&gt;变量声明&lt;/a&gt;跟 Scala 和 Swift 的很像。你用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的构造来声明一个新的变量。大部分时候 Rust 可以推导出变量的类型，所以你不一定需要写明它的类型。如果你真的要指明变量类型，需要这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x: i32 = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我看来这是丑陋的语法。本来语义是把变量 x 绑定到值 8，可是 x 和 8 之间却隔着一个“i32”，看起来像是把 8 赋值给了 i32……&lt;/p&gt;

&lt;p&gt;变量缺省都是不可变的，也就是不可赋值。你必须用一种特殊的构造&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来声明可变变量。这跟 Swift/Scala 的 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;var&lt;/code&gt; 的区别是一样的，只是形式不大一样。&lt;/p&gt;

&lt;h3&gt;变量可以重复绑定&lt;/h3&gt;

&lt;p&gt;Rust 的变量定义有一个比其它语言更奇怪的地方，它可以让你在同一个作用域里面“重复绑定”同一个名字，甚至可以把它绑定到另外一个类型：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x: i32 = 1;
x = 7;
let x = x; // 这两个 x 是两个不同的变量

let y = 4;
// 30 lines of code ...
let y = &quot;I can also be bound to text!&quot;;
// 30 lines of code ...
println!(&quot;y is {}&quot;, y);      // 定义在第二个 let y 的地方
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Yin 语言最初的设计里面，我也是允许这样的重复绑定的。第一个 y 和 第二个 y 是两个不同的变量，只不过它们碰巧叫同一个名字而已。你甚至可以在同一行出现两个 x，而它们其实是不同的变量！这难道不是一个很酷，很灵活，其他语言都没有的设计吗？后来我发现，虽然这实现起来没什么难度，可是这样做不但没有带来更大的方便性，反而可能引起程序的混淆不清。在同一个作用域里面，给两个不同的变量起同一个名字，这有什么用处呢？自找麻烦而已。&lt;/p&gt;

&lt;p&gt;比如上面的例子，在下面我们看到一个对变量 &lt;code&gt;y&lt;/code&gt; 的引用，它是在哪里定义的呢？你需要在头脑中对程序进行“数据流分析”，才能找到它定义的位置。从上面读起，我们看到 &lt;code&gt;let y = 4&lt;/code&gt;，然而这不一定是正确的定义，因为 &lt;code&gt;y&lt;/code&gt; 可以被重新绑定，所以我们必须继续往下看。30 行代码之后，我们看到了第二个对 &lt;code&gt;y&lt;/code&gt; 的绑定，可是我们仍然不能确定。继续往下扫，30行代码之后我们到了引用 &lt;code&gt;y&lt;/code&gt; 的地方，没有再看到其它对 &lt;code&gt;y&lt;/code&gt; 的绑定，所以我们才能确信第二个 let 是 &lt;code&gt;y&lt;/code&gt; 的定义位置，它是一个字符串。&lt;/p&gt;

&lt;p&gt;这难道不是很费事吗？更糟的是，这种人工扫描不是一次性的工作，每次看到这个变量，你都要疑惑一下它是什么东西，因为它可以被重新绑定，你必须重新确定一下它的定义。如果语言不允许在同一个作用域里面重复绑定同一个名字，你就根本不需要担心这个事情了。你只需要在作用域里面找到唯一的那个 &lt;code&gt;let y = ...&lt;/code&gt;，那就是它的定义。&lt;/p&gt;

&lt;p&gt;也许你会说，只有当有人滥用这个特性的时候，才会导致问题。然而语言设计的问题往往就在于，一旦你允许某种奇葩的用法，就一定会有人自作聪明去用。因为你无法确信别人是否会那样做，所以你随时都得提高警惕，而不能放松下心情来。&lt;/p&gt;

&lt;h3&gt;类型推导&lt;/h3&gt;

&lt;p&gt;另外一个很多人误解的地方是类型推导。在 Rust 和 C# 之类的语言里面，你不需要像 Java 那样写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;int x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样显式的指出变量的类型，而是可以让编译器把类型推导出来。比如你写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;  // x 的类型推导为 i32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译器的类型推导就可以知道 &lt;code&gt;x&lt;/code&gt; 的类型是 i32，而不需要你把“i32”写在那里。这似乎是一个很方便的东西。然而看过很多 C# 代码之后你发现，这看似方便，却让程序变得不好读。在看 C# 代码的时候，我经常看到一堆的变量定义，每一个的前面都是 var。我没法一眼就看出它们表示什么，是整数，bool，还是字符串，还是某个用户定义的类？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;var correct = ...;
var id = ...;
var slot = ...;
var user = ...;
var passwd = ...;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我需要把鼠标移到变量上面，让 Visual Studio 显示出它推导出来的类型，可是鼠标移开之后，我可能又忘了它是什么。有时候发现看同一片代码，都需要反复的做这件事，鼠标移来移去的。而且要是没有 Visual Studio，用其它编辑器，或者在 github 上看代码或者 code review 的时候，你就得不到这种信息了。很多 C# 程序员为了避免这个问题，开始用很长的变量名，把类型的名字加在变量名字里面去，这样一来反而更复杂了，却没有想到直接把类型写出来。所以这种形式的类型推导，看似先进或者方便，其实还不如直接在声明处写下变量的类型，就像 Java 那样。&lt;/p&gt;

&lt;p&gt;所以，虽然 Rust 在变量声明上似乎有更灵活的设计，然而我觉得 C 和 Java 之类的语言那样看似死板的方式其实更好。我建议不要使用 Rust 变量的重复绑定，避免使用类型推导，尽量明确的写出类型，以方便读者。如果你真的在乎代码的质量，就会发现大部分时候你的代码的读者是你自己，而不是别人，因为你需要反复的阅读和提炼你的代码。&lt;/p&gt;

&lt;h3&gt;动作的“返回值”&lt;/h3&gt;

&lt;p&gt;Rust 的文档说它是一种“&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#expressions-vs-statements&quot;&gt;大部分基于表达式&lt;/a&gt;”的语言，并且给出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut y = 5;
let x = (y = 6);  // x has the value `()`, not `6`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;奇怪的是，这里变量 &lt;code&gt;x&lt;/code&gt; 会得到一个值，空的 tuple，&lt;code&gt;()&lt;/code&gt;。这种思路不大对，它是从像 OCaml 那样的语言照搬过来的，而 OCaml 本身就有问题。在 OCaml 里面，如果你使用 &lt;code&gt;print_string&lt;/code&gt;，那你会得到如下的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;print_string &quot;hello world!\n&quot;;;

hello world!
- : unit = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，&lt;code&gt;print_string&lt;/code&gt; 是一个“动作”，它对应过程式语言里面的“statement”。就像 C 语言的 &lt;code&gt;printf&lt;/code&gt;。动作通常只产生“副作用”，而不返回值。在 OCaml 里面，为了“理论的优雅”，动作也会返回一个值，这个值叫做 &lt;code&gt;()&lt;/code&gt;。其实 &lt;code&gt;()&lt;/code&gt; 相当于 C 语言的 void。C 语言里面有 void 类型，然而它却不允许你声明一个 void 类型的变量。比如你写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;int main()
{
  void x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序是没法编译通过的（试一试？）。让人惊讶的是，古老的 C 的做法其实是正确的，这里有比较深入的原因。如果你把一个类型看成是一个集合（比如 int 是机器整数的集合），那么 void 所表示的集合是个空集，它里面是不含有任何元素的。声明一个 void 类型的变量是没有任何意义的，因为它不可能有一个值。如果一个函数返回 void，你是没法把它赋值给一个变量的。&lt;/p&gt;

&lt;p&gt;可是在 Rust 里面，不但动作（比如 &lt;code&gt;y = 6&lt;/code&gt; ）会返回一个值 &lt;code&gt;()&lt;/code&gt;，你居然可以把这个值赋给一个变量。其实这是错误的作法。原因在于 &lt;code&gt;y = 6&lt;/code&gt; 只是一个“动作”，它只是把 6 放进变量 y 里面，这个动作发生了就发生了，它根本不应该返回一个值，它不应该可以出现在 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 的右边。就算你牵强附会说 &lt;code&gt;y = 6&lt;/code&gt; 的返回值是 &lt;code&gt;()&lt;/code&gt;，这个值是没有任何用处的。更不要说使用空的 tuple 来表示这个值，会引起更大的类型混淆，因为 &lt;code&gt;()&lt;/code&gt; 本身有另外的，更有用的含义。&lt;/p&gt;

&lt;p&gt;你根本就不应该可以写 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 这样的代码。只有当你犯错误或者逻辑不清晰的时候，才有可能把 &lt;code&gt;y = 6&lt;/code&gt; 当成一个值来用。Rust 允许你把这种毫无意义的返回值赋给一个变量，这种错误就没有被及时发现，反而能够通过变量传播到另外一个地方去。有时候这种错误会传播挺远，然后导致问题（运行时错误或者类型检查错误），可是当它出问题的时候，你就不大容易找到错误的起源了。&lt;/p&gt;

&lt;p&gt;这是很多语言的通病，特别是像 JavaScript 或者 PHP 之类的语言。它们把毫无意义或者牵强附会的结果（比如 undefined）到处传播，结果使错误很难被发现和追踪。&lt;/p&gt;

&lt;h3&gt;return 语句&lt;/h3&gt;

&lt;p&gt;Rust 的设计者似乎很推崇“面向表达式”的语言，所以在 Rust 里面你不需要直接写“return”这个语句。比如，这个&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#early-returns&quot;&gt;例子&lt;/a&gt;里面，你可以直接这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn add_one(x: i32) -&amp;gt; i32 {
    x + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回函数里的最后一个表达式，而不需要写 return 语句，这是函数式语言共有的特征。然而其实我觉得直接写 return 其实是更好的作法，像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo(x: i32) -&amp;gt; i32 {
    return x + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编程有一个容易引起问题的作法，叫做“不够明确”，总想让编译器自动去处理一些问题，在这里也是一样的问题。如果你隐性的返回函数里最后一个表达式，那么每一次看见这个函数，你都必须去搞清楚最后一个表达式是什么，这并不是每次都那么明显的。比如下面这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    println!(&quot;{}&quot;, add_one(7));
}

fn add_one(x: i32) -&amp;gt; i32 {
  if (x &amp;lt; 5) {
      if (x &amp;lt; 10) {
        // 做很多事...
        x * 2
      } else {
        // 做很多事...
        x + 1
      }
  } else {
    // 做很多事...
    x / 2
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 if 语句里面有嵌套，每个分支又有好些代码，而且 if 语句又是最后一个语句，所以这个嵌套 if 的三个出口的最后一个表达式都是返回值。如果你写了“return”，那么你可以直接看有几个“return”，或者拿编辑器加亮一下，就知道这个函数有几个出口。然而现在没有了“return”这个关键字，你就必须把最后那个 if 语句自己看清楚了，找到每一个分支的“最后表达式”。很多时候这不是那么明显，你总需要找一下，而且这件事在读代码的时候总是反复做。&lt;/p&gt;

&lt;p&gt;所以对于返回值，我的建议是总是明确的写上“return”，就像第二个例子那样。Rust 的文档说这是“poor style”，那不是真的。有一个例外，那就是当函数体里面只有一条语句的时候，那个时候没有任何歧义哪一个是返回表达式。&lt;/p&gt;

&lt;p&gt;这个问题类似于重复绑定变量和类型推导的问题，属于一种“用户体验设计”问题。无论如何，编译器都很容易实现，然而不同样式的代码，对于人类阅读的工作量，是很不一样的。很多时候最省人力的做法并不是那种看来最聪明，最酷，打字量最少的办法，而是写得最明确，让读者省事的办法。人们常说，代码读的时候比写的时候多得多，所以要想语言好用省事，我们应该更加重视读的时候，而不是写的时候。&lt;/p&gt;

&lt;h3&gt;数组的可变性&lt;/h3&gt;

&lt;p&gt;Rust 的数组可变性标记，跟 Swift 犯了一样的错误。Swift 的问题，我已经在之前的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;文章&lt;/a&gt;有详细叙述，所以这里就不多说了。简言之，同一个标记能表示的可变性，要么针对数组指针，要么针对数组元素，应该只能选择其一。而在 Rust 里面，你只有一个地方可以放“mut”进去，所以要么数组指针和元素全部都可变，要么数组指针和元素都不可变。你没有办法制定一个不可变的数组指针，而它指向的数组的元素却是可变的。&lt;/p&gt;

&lt;p&gt;请对比下面两个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let m = [1, 2, 3];      // 指针和元素都不可变
    m[0] = 10;              // 出错
    m = [4, 5, 6];          // 也出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let mut m = [1, 2, 3];  // 指针和元素都可变
    m[0] = 10;              // 不出错
    m = [4, 5, 6];          // 也不出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;内存管理&lt;/h3&gt;

&lt;p&gt;Rust 号称实现了非常先进的内存管理机制，不需要垃圾回收（GC）或者引用计数（RC）就可以“静态”的管理内存的分配和释放。然而仔细思考之后你就会发现，这很可能是不切实际的梦想（或者广告）。内存的分配和释放（如果要及时释放的话），本身是一个动态的过程，无法用静态分析来实现。现在你说可以通过一些特殊的构造，特殊的指针和传值方式，静态的决定内存的回收时间，真的有可能吗？&lt;/p&gt;

&lt;p&gt;实际上在 IU 的时候，我有一个类似的梦。我曾经向我的教授们（Friedman，Dybvig）提出过 N 多种不需 GC 和 RC 就能静态管理内存的办法，结果每一次都被他们给我的小例子给打败了，以至于我很难相信有任何人可以想到比 GC 和 RC 更好的方法。&lt;/p&gt;

&lt;p&gt;Rust 那些炫酷的 move semantics, borrowing, lifetime 之类的概念加在一起，不但让语言变得复杂不堪，我感觉并不能从根本上解决内存管理问题。很多人在 blog 里面为这些概念热情洋溢地做宣传，显得自己很懂一样，拿一些玩具代码来演示，可是从没看到任何人说清楚这些东西为什么可以从根本上解决问题，能用到复杂一点的代码里面去。所以我觉得这些东西有“皇帝的新装”之嫌。&lt;/p&gt;

&lt;p&gt;连 Rust 自己的&lt;a href=&quot;https://doc.rust-lang.org/book/ownership.html#meta&quot;&gt;文档&lt;/a&gt;都说，你可能需要“fight with the borrow checker”。为了通过这些检查，你必须用很怪异的方式来写程序，随着问题复杂度的增加，就要求有更怪异的写法。如果用了 lifetime，很简单一个代码看起来就会是这种样子。真够烦的，我感觉我的眼睛都没法 parse 这段代码了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo&amp;lt;&#39;a, &#39;b&amp;gt;(x: &amp;amp;&#39;a str, y: &amp;amp;&#39;b str) -&amp;gt; &amp;amp;&#39;a str {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上一次我看 Rust 文档的时候，没发现有 lifetime 这概念。文档对此的介绍非常粗略，仔细看了也不知道他们在说些什么，更不要说相信这办法真的管用了。对不起，我根本不想去理解这些尖括号里的 &lt;code&gt;&#39;a&lt;/code&gt; 和 &lt;code&gt;&#39;b&lt;/code&gt; 是什么，除非你先向我证明这些东西真的能解决内存管理的问题。实际上这个 lifetime 我感觉像是跨过程静态分析时产生的一些标记，要知道静态分析是无法解决内存管理的问题的，我猜想这种 lifetime 在有递归函数的情况下就会遇到麻烦。&lt;/p&gt;

&lt;p&gt;实际上我最开头看 Rust 的时候，它号称只用 move semantics 和好几种不同的指针，就可以解决内存管理的问题。可是一旦有了那几种不同的指针，就已经复杂不堪了，比 C 语言还要麻烦，而且显然不能解决问题。Lifetime 恐怕是后来发现有新的问题解决不了才加进去的，可是我不知道他们这次是不是又少考虑了某些情况。&lt;/p&gt;

&lt;p&gt;Rust 的设计者显然受了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_logic&quot;&gt;Linear Logic&lt;/a&gt; 一类看似很酷的逻辑的启发和熏陶，想用类似的方式奇迹般的解决内存和资源的回收问题。然而研究过一阵子 Linear Logic 之后我发现，这个逻辑自己都没有解决任何问题，只不过给对象的引用方式施加了一些无端的限制，这样使得对象的引用计数是一个固定的值（1）。内存管理当然容易了，可是这样导致有很多程序你没法表达。&lt;/p&gt;

&lt;p&gt;开头让你感觉很有意思，似乎能解决一些小问题。到后来遇到大一点的实际问题的时候，你就发现需要引入越来越复杂的概念，使用越来越奇葩的写法，才能达到目的，而且你总是会在将来某个时候发现它没法解决的问题。因为这个问题很可能从根本上是无法解决的，所以每当遇到有超越现有能力的事情，你就得增加新的“绕过方法”（workaround）。缝缝补补，破败不堪。最后你发现，除了垃圾回收（GC）和引用计数（RC），内存管理还是没有其它更好更简单的办法。&lt;/p&gt;

&lt;p&gt;当然我的意见也许不是完全准确，可我真是没有时间去琢磨这么多乱七八糟，不知道管不管用的概念（特别是 lifetime），更不要说真的用它来构建大型的系统程序了。有用来理解这些概念，把程序改成奇葩样子的时间，我可能已经用 C 语言写出很好的手动内存管理代码了。如果你真的看进去理解了，发现这些东西可以用的话，告诉我一声！不过你必须说明原因，不要只告诉我“皇帝是穿了衣服的” :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;本来想写一个更详细的评价的，可是到了这个地方，我感觉已经失去兴趣了，困就一个字啊…… Rust 比 C 语言复杂太多，我很难想象用这样的语言来构造大型的操作系统。而构造系统程序，是 Rust 设计的初衷。说真的，写操作系统那样的程序，C 语言真的不算讨厌。用户空间的程序，Java，C# 和 Swift 完全可以胜任。所以我觉得 Rust 的市场空间恐怕非常狭小……&lt;/p&gt;

&lt;p&gt;（如果你喜欢这些内容，请付费5美元或者30人民币，谢谢！）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">rust</guid>
<pubDate>Sun, 18 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>支付宝的身份验证问题</title>
<link>http://yinwang.org/blog-cn/2016/09/16/alipay</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;支付宝的身份验证问题&lt;/h2&gt;
                            &lt;p&gt;我看到有人继续在向我之前的支付宝账号付费。其实现在的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费二维码&lt;/a&gt;已经改成了我父亲的账号，原因是因为支付宝的身份验证问题。&lt;/p&gt;

&lt;p&gt;我的支付宝账号是在国内的时候开通的，支付宝收到的博文付费，都是准备转给家人的。开始收费之后，向家人的账号转了一些钱。支付宝似乎有很严格的防盗验证，我开头不熟悉怕出问题，所以做了几个试验，把钱分成好几次转。最后一次的时候，发现支付宝说需要验证我的身份，还打开手机的相机，要做“人脸验证”。让我左边转一点，右边转一点…… 我的身份证是15年前办的了，当然现在不像了！最后验证没有通过，于是支付功能就被锁定了，再也无法向家人转账。解锁的方法只有联系客服，可是客服电话打了老半天，根本没人接……&lt;/p&gt;

&lt;p&gt;由于这个原因，我不能再用我自己的支付宝账号收费。开通新的账号又需要银行卡验证，而我的国内手机和U盾都丢了…… 国内的银行系统就是这么麻烦。&lt;/p&gt;

&lt;p&gt;所以没办法，只好把我父亲的支付宝二维码放了上去。请大家以后不要再向我的账号付费，直接转账给我父亲就可以了。谢谢！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">alipay</guid>
<pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>测试的道理</title>
<link>http://yinwang.org/blog-cn/2016/09/14/tests</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;测试的道理&lt;/h2&gt;
                            &lt;p&gt;在长期的程序语言研究和实际工作中，我摸索出了一些关于测试的道理。然而在我工作过的每一个公司，我发现绝大多数人都不明白这些道理，很多团队集体性的采用错误的做法而不自知。很多人把测试当成一种主义和教条，进行过度的测试，不必要的测试，不可靠的测试，并且把这些错误的做法传授给新手，造成恶性循环。本来目的是提高代码质量，结果不但没能达到目的，反而降低了代码质量，增大了工作量，大幅度延缓工程进度。&lt;/p&gt;

&lt;p&gt;我也写测试，但我的测试方式比“测试教条主义者”们的方式聪明很多。在我心目中，代码本身的地位大大的高于测试。我不忽视测试，但我不会本末倒置，过分强调测试，我并不推崇测试驱动开发（TDD）。我知道该测试什么，不该测试什么，什么时候该写测试，什么时候不该写，什么时候应该推迟测试，什么时候完全不需要测试。因为这个原因，再加上高强的编程能力，我多次完成别人认为在短时间不可能完成的任务，并且制造出质量非常高的代码。&lt;/p&gt;

&lt;h3&gt;测试的道理&lt;/h3&gt;

&lt;p&gt;现在我就把这些自己领悟到的关于测试的道理总结一下，其中有一些是鲜为人知或者被误解的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要以为你处处显示出“重视代码质量”的态度，就能提高代码质量。总有些人，以为自己知道“单元测试”（unit test），“集成测试”（integration test）这样的名词，就很懂编程，就可以教育其他人。可惜，光有态度和口号是不解决问题的，你还必须有实战的技巧，深入的见解和智慧，必须切实地知道应该怎么做。代码的质量不会因为你重视它就得到提升，也不会因为你采取了措施（比如测试，静态分析）就一定会得到改善。你必须知道什么时候该写测试，什么时候不该写测试，需要写测试的时候，要写什么样的测试。其实，提高代码质量唯一可行的手段不是写测试，而是反复的提炼自己的思维，写简单清晰的代码。如果你想真的提高代码质量，我的文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;』是一个不错的出发点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;真正的编程高手不会被测试捆住手脚。是的，你身边那个你认为“不很在乎测试”的家伙，也许是个比你更好的程序员。我喜欢把编程比喻成开赛车，而测试就是放在路边用来防撞的轮胎护栏……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-a66eb34628e32634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;护栏有时候是很有用，可以救命的，然而一个合格的车手，绝对不会一心想着有护栏保护，测试在编程活动中的地位也应该就是这样。优秀的车手会很快看见优雅而简单的路径，恰到好处地掌握速度和时机，直奔终点而去。护栏只是放在最危险的地段，让你出了意外不要死得太惨。护栏并不能让你成为好的车手，不能让你取得冠军。绝大多数时候，你的安全只有靠自己的技术，而不是护栏，你永远有办法可以撞死自己。测试的作用也是一样，即使有了很多的测试，代码的安全仍然只掌握在你的手里。你永远可以制造出新的 bug，而没有测试可以检测到它……&lt;/p&gt;

&lt;p&gt;通常情况下，一个合格的车手是根本碰不到这些护栏的，他们心里想的是更高的目标：快点到达终点。相比之下，一个不合格的车手，他经常撞到赛道外面去，所以在他的心里，护栏有着至高无上的地位，所以他总是跟别人宣扬护栏的重要性。他开车的时候为了防止犯错，要在他经过的路径两边密密麻麻摆上护栏，甚至把护栏摆到赛道中间，以确保自己的转弯幅度正确。他在护栏之间跌跌撞撞，最后只能算是勉强到达终点。鼓吹测试驱动开发的人，就是这种三流车手，这种人写再多的测试也不可能倒腾出可靠的代码来。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在程序和算法定型之前，不要写测试。TDD 的教条者喜欢跟你说，在写程序之前就应该先写测试。为什么写代码之前要写测试呢？这只是一种教条。这些人其实没有用自己的脑子思考过这个问题，而只是人云亦云，觉得这样“很酷”，符合潮流，或者以为这样做了别人就会认为自己是高手。实际上在程序框架完成，算法定型之前，你都不需要写测试。如果你想知道代码是否正确，用人工方式运行代码，看看结果足以。&lt;/p&gt;

&lt;p&gt;如果你发现编程初期需要保证的性质纷繁复杂，如此之多，不写测试你就没信心的话，那你还是想办法先提高下基本的编程技术吧：多做练习，简化代码，让代码更加模块化，看看我的『编程的智慧』或者『SICP』一类的东西。写测试并不能提高你的水平，正好相反，过早的写测试会捆住你的手脚，让你无法自由的修改代码和算法。如果你不能很快的修改代码，不能用直觉感觉到它的变化和结构，而是因为测试而处处卡顿，你的头脑里就不能产生所谓“&lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology&quot;&gt;flow&lt;/a&gt;)”，就不能写出优雅的代码来，结果到最后你什么也没学会。只有在程序不再需要大幅度的改动之后，才是逐渐加入测试的时候。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要为了写测试而改变本来清晰的编程方式。很多人为了满足“覆盖”（coverage）的要求，为了可以测试到某些模块，或者为了使用 mock，而把本来简单清晰地代码改成更加复杂而混淆的形式，甚至采用大量 reflection。这样一来其实降低了代码的质量。本来很简单的代码，一眼看去就知道是否正确，可是现在你一眼看过去，到处都是为了方便测试而加进去的各种转接插头，再也无法感觉到代码。这些用来辅助测试的代码，阻碍了你对代码进行直觉思维，而如果你不能把代码的逻辑完全映射在头脑里（进而产生直觉），你是很难写出真正可靠的代码的。&lt;/p&gt;

&lt;p&gt;有些 C# 程序员，为了测试而加入大量的 interface 和 reflection，因为这样可以在测试的时候很方便的把一片代码替换成 mock。结果你就发现这程序里每个类都有一个配套的 interface，还需要写另外一个 mock 类，去实现这个 interface。这样一来，不但代码变得复杂难以理解，而且还损失了 Visual Studio 的协助功能：你不再能按一个键（F12）就直接跳转到方法的定义，而需要先跳到对应的 interface 方法，然后再找到正确的实现。所以你不再能够在代码里面快速的跳转浏览。这种方便性的损失，会大幅度降低头脑产生整体理解的机会。而且为了 mock，每一个构造函数调用都得换成一个含有 reflection 的构造，使得编译器的静态类型检查无法确保类型正确，增加运行时出错的可能性，出错信息还难以理解，得不偿失的后果。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要测试“实现细节”，因为那等同于把代码写两遍。测试应该只描述程序需要满足的“基本性质”（比如 sqrt(4) 应该等于 2），而不是去描述“实现细节”（比如具体的开平方算法的步骤）。有些人的测试过于详细，甚至把代码的每个实现步骤都兢兢业业的进行测试：第一步必须做A，第二步必须做B，第三步必须做C…… 还有些人喜欢给 UI 写测试，他们的测试里经常这样写：如果你浏览到这个页面，那么你应该在标题栏看见这行字……&lt;/p&gt;

&lt;p&gt;仔细想一下就会发现，这种作法本质上不过是把代码（或者UI）写了两遍而已。本来代码里面明白写着：先做A，再做B，再做C。UI 描述文件里面明白写着：标题栏里面是这些内容。你有什么必要在测试里把它们全都再检查一遍呢？这根本没有增加任何可靠性：你在代码里会犯错，你把同样的逻辑换种形式再写一遍，难道就不会错了吗？&lt;/p&gt;

&lt;p&gt;这就像某些脑子秀逗的人，他出门时总是担心门没锁好，关门之后要推推拉拉好几次，确认门是锁上了的。还没走几步，他仍然在怀疑门没锁好，又走回去推推拉拉好几次，却始终不能放心 :P 这种做法非但不能保证代码的正确，反而给修改代码制造了障碍。理所当然，你把同一段代码写了两遍，每当要修改代码，你就得修改两次！这样的测试就像紧箍咒一样，把代码压得密不透风。每一次修改代码，都会导致很多测试失败，以至于这些测试都不得不重写。本质上就是把代码修改了两遍，只不过更加痛苦一些。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并不是每修复一个 bug 都需要写测试。很多公司都流传一个常见的教条，就是认为每修复一个 bug，都需要为它写测试，用于确保这个 bug 不再发生。甚至有人要求你这样修复一个 bug：先写一个测试，重现这个 bug，然后修复它，确保测试通过。这种思维其实是一种生搬硬套的教条主义，它会严重的减慢工程的进度，而代码的质量却不会得到提高。写测试之前，你应该仔细的思考一个问题：这个 bug 有多大可能会在同一个地方再次发生？很多低级错误一旦被看出来之后，它就不大可能在同一个地方再次出现。在这种情况下，你只需手工验证一下 bug 消失了就可以。&lt;/p&gt;

&lt;p&gt;为不可能再出现的 bug 大费周折，写 reproducer，构造各种数据结构去验证它，保证它下次不会再出现，其实是多此一举。同样的低级错误就算再出现，也很可能不在同一个地方。写测试不但不能保证它不再发生，而且浪费你很多时间。这测试在每次 build 的时候都会消耗时间，每次编译都因为这些测试多花几分钟，累积起来之后，你就发现工程进度明显减慢。只有当发现已有的测试没有抓住程序必须满足的重要性质时，你才应该写新的测试。你不应该是为这个 bug 而写测试，而是为代码的性质而写测试。这个测试的内容不应该只是防止这个 bug 再次发生，而是要确保 bug 所反映出来的，之前缺失的“性质”得到保证。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免使用 mock，特别是多层的 mock。很多人写测试都喜欢用很多 mock，堆积很多层，以为只有这样才能测试到路径比较深的模块。其实这样不但非常繁琐费事，而且多层的 mock 往往不能产生足够多样化的输入，不能覆盖各种边界情况。如果你发现测试需要进行多层的 mock，那你应该考虑一下，也许你需要的不是 mock，而是改写代码，让它更加模块化。如果你的代码足够模块化，你不应该需要多层的 mock 来测试它。你只需要为每一个模块准备一些输入（包括边界情况），确保它们的输出符合要求。然后你把这些模块像管道一样连接起来，形成一个更大的模块，测试它也符合输入输出要求，以此类推。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要过分重视“测试自动化”，人工测试也是测试。写测试，这个词往往隐含了“自动运行”的含义，也就是假设了要不经人工操作，完全自动的测试。打一个命令，它过一会就会告诉你哪些地方有问题。然而，人们往往忽略了“人工测试”。他们没有意识到，人工去试验，去观察，也是一种测试。所以你就发现这样的情况，由于自动测试在很多时候非常难以构造（比如，如果你要测试一段复杂的交互式GUI代码的响应），很多人花了很多时间，利用各种测试框架和工具，甚至遥控 WEB 浏览器去做一些自动操作，花太多时间却发现各种不可靠，没法测到很多东西。&lt;/p&gt;

&lt;p&gt;其实换一个思路，他们只需要花几分钟的时间，就可以用人工的方式观察到很多深入的问题。过分的重视测试自动化的原因，往往在于一个不切实际的假设，他们假设错误会频繁的再次发生，所以自动化了可以省下人的力气。但是其实，一旦一个 bug 被修好，它反复出现的机会不会很大的。过分的要求测试自动化，不但延缓了工程进度，让程序员恼火，效率低下，而且失去了人工测试的精确性。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免写太长，太耗时的测试。很多人写测试，叽里呱啦很长一串，到后来再看的时候，他已经不记得自己当时想测什么了。有些人本来用很小的输入就可以测试到需要的性质，他却总喜欢给一个很大的输入，下意识的以为这样更加靠谱，结果这测试每次都会消耗大量的 build 时间，而其实达到的效果跟很小的输入没有任何区别。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个测试只测试一个方面，避免重复测试。有些人一个测试测很多内容，结果每次那个测试失败，都搞不清楚到底是哪个部件出了问题。有些人为了“放心”，喜欢在多个测试里面“附带”测某些他认为相关的部件，结果每次那个部件出问题，就发现好多个测试失败。如果一个测试只测一个方面，不重复测同一个部件，那么你就可以很快的根据失败的测试，发现出问题的部件和位置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免通过比较字符串来进行测试。很多人写测试的时候，喜欢通过打印出一些东西，然后使用字符串比较的方式来决定输出是否符合要求。一个常见的做法是把输出打印成格式化的 JSON，然后对比两个文本。甚至有人 JSON 都不用，直接就比较 printf 输出的结果。这种测试是非常脆弱的。因为字符串输出的格式往往会发生微小的变化，比如有人在里面加了一个空格之类的。把这种字符串作为标准输出，进行字符串比较，很容易因为微小的改动而使大量测试失败，导致很多的测试需要做不必要的修改。正确的做法，应该是进行结构化的比较，如果你要把标准结果存成 JSON，那么你应该先 parse 出 JSON 所表示的对象，然后再进行结构化的对比。PySonar2 的测试就是这样的做法，所以相当的稳定。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“测试能帮助后来人”的误区。每当指出测试教条主义的错误，就会有人出来说：“测试不是为了你自己，而是为了你走了以后，以后进来的人不犯错误。” 首先，这种人根本没有看清楚我在说什么，因为我从来没有反对过合理的测试。其次，这种“测试能帮助后来人”，其实是没有经过实践检验，站不住脚的说法。如果你的代码写得很乱，就算你测试再多，后来人也无法理解，反倒被莫名其妙的测试失败给弄得更糊涂，不知道是自己错了还是测试错了。我已经说过了，测试不能完全保证代码不被改错，实际上它们防止代码被改错的作用是非常弱的。无论如何，后来人都必须理解原来的代码的逻辑，知道它在做什么，否则他们不可能做出正确的修改，就算你有再严密的测试也一样。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;   举一个亲身的例子。我在 Google 做出 PySonar 之后，最后一个测试都没写。第二次我回到 Google，我的上司 Steve Yegge 对我说：“你走了之后，我改了一些你的代码，真是太清晰，太好把握了，修改你的代码是一种快乐！” 这说明什么问题呢？我并不是说你可以不写测试，但这个例子说明，测试对于后来人的作用，并不是你有些人想象的那么大。创造清晰的代码才是解决这个问题的关键。&lt;/p&gt;

&lt;p&gt;   这种怕人突然走了，代码无法维护的想法，导致了一些人对测试过分的重视，但测试却不能解决这种问题。相反，如果测试太繁琐，做不必要的测试，反而容易让员工不满，容易走人，去加入在这方面更加有见地的公司。有些公司以为有了测试，就可以随便打发人走，这种想法是大错特错的。你需要明白的一个事情是，代码永远是属于写出它的那个人的，就算有测试也一样。如果核心人物真的走了，就算你有再多的测试也没用的，所以解决的方法就是把他们留住！一个有远见的公司总是通过其他的手段解决这个问题，比如优待和尊重员工，创造良好的氛围，使得他们没那么快想走。另外，公司必须注意知识的传承，防止某些代码只有一个人理解。&lt;/p&gt;

&lt;h3&gt;案例分析&lt;/h3&gt;

&lt;p&gt;有人会疑问，我凭什么可以给别人讲这些经验，我自己为此有什么成功的案例呢？所以现在来讲讲我做过的几个东西，以及我亲眼目睹的测试教条主义者们的失败案例。&lt;/p&gt;

&lt;h4&gt;Google&lt;/h4&gt;

&lt;p&gt;很多人可能听说过我在 &lt;a href=&quot;http://www.yinwang.org/blog-%EF%BC%8Ccn/2014/12/31/google-story&quot;&gt;Google&lt;/a&gt; 做的 PySonar。当时 Google 的队友们战战兢兢，说这么高难复杂的东西要从头做起，几乎是不可能的。特别是某位队友，一开头就吵着要我写测试，一直吵到最后，烦死我了。他们为什么这么担心呢？因为对 Python 做类型推导是非常高难度的代码，需要相当复杂的数据结构和算法，需要精通 Python 的语义实现。&lt;/p&gt;

&lt;p&gt;作为一个训练有素的专家，我没有在乎他们的咋呼，没有信他们的教条。我按照自己的方式组织代码，进行精密的思考，设计和推理，最终在三个月之内做出了非常优雅，正确，高性能，而又容易维护的代码。PySonar 到现在仍然是世界上最先进的 Python 类型推导和索引系统，被多家公司采用，用于处理数以百万计的 Python 代码。，&lt;/p&gt;

&lt;p&gt;如果我当时按照 Google 队友的要求，采用已有的开源代码，或者过早的写了测试，别说无法在三个月的实习时间之内完成这个东西，就算折腾好几年也没有可能。&lt;/p&gt;

&lt;h4&gt;Shape Security&lt;/h4&gt;

&lt;p&gt;这种思维方式最近的成功实例，是给 Shape Security 做的一个先进的 JavaScript 混淆器（obfuscator）和对集群（cluster）管理系统的改进。不要小看了这个 JS 混淆器，它的混淆能力要比 uglify 之类的开源工具强很多，也快很多。它不但包含了 uglify 的变量换名等基本功能，而且含有专门针对人类和编译器的复杂化，使得没人能看出一点线索这个程序到底要干什么，让最先进的 JS 编译器也无法把它简化。&lt;/p&gt;

&lt;p&gt;其实这个混淆器也是一种编译器，只不过它把 JavaScript 翻译成不可读的形式。在这个项目中，由于失之毫厘就可以差之千里，我采用了从 Chez Scheme 编译器学过来的，非常严密的测试方法。对每一个编译器的步骤（pass），我都给它设计一些正好可以测到这个步骤的输入代码（比如，具有函数定义的，for循环，try-catch的，等等）。Pass 输出的代码，经过 JavaScript 解释器执行，把结果跟原来程序的执行结果对比。每一个测试程序，经过每一个 pass，输出的中间结果都跟标准结果进行对比，如果错了就表明那个 pass 有问题，出错的小程序会指出大概是哪一个部分出了问题。遵循小巧，不冗余，不重复的原则，我总共只写了40多个非常小的 JavaScript 程序。由于这些测试涵盖了 JavaScript 的所有构造而且几乎不重复，它们能够准确的定位到错误的改动。最后，这个 JS 混淆器能够正确的转换像 AngularJS 那么大的项目，确保语义的正确，让人完全无法读懂，而且能有效地防止被优化器（比如 Closure Compiler）简化掉。&lt;/p&gt;

&lt;p&gt;相比之下，过度鼓吹测试和可靠性的人，并没能制造出这么高质量的混淆器。其实在我进入团队之前，里面的两三位高手已经做了一个混淆器，项目延续了好多个月。这片代码一直没能发布给客户用，因为它的换名部件总是会在某些情况下输出错误的代码，修改了好多次仍然会出错。不是100%的正确，这对于程序语言的转换器来说，是不可接受的。换名只是我的混淆器里的一个步骤，它还包含大概十个类似的步骤，可以把代码进行各种转换。&lt;/p&gt;

&lt;p&gt;在实现换名器的时候，队友们让我直接拿他们以前写的换名代码过来，把 bug 修好就可以。然而看了代码之后，我发现这代码没法修，因为它采用了错误的思路，缝缝补补也不可能达到100%的正确，而且明显效率低下，所以我决定自己重写一个。由于轻车熟路，我只花了一下午的时间，就完成了一个正确的换名器，它完全符合 JavaScript 的语义，各种奇葩的作用域规则，而且结构非常简单。说白了，这个换名器也是一种&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot;&gt;解释器&lt;/a&gt;。对解释器的深刻理解，让我可以很容易的写出任何语言的换名器。&lt;/p&gt;

&lt;p&gt;不幸的是，历史再次重演了 ;) 队友们听说我花一下午重写了一个换名器，非常紧张，咋呼地跟我说：“你知道我们的换名器是花了多少个月的时间做出来的吗？你知道我们写了多少测试来保证它的正确性吗？你现在一下午做出来一个新的，你如何能保证它的正确！” 我不知道他们怎么好意思说出这样的话来，因为事实是，他们花了这么多个月，耗费这么多人力，写了这么多的测试，做出来的换名器却仍然有 bug，没法用。当我把我写的测试和几个大点的 open source 项目（AngularJS, Backbone 等）放进他们的换名器之后，就发现有些地方出问题了，而所有的测试和 open source 项目通过我的换名器，却得到完全正确的代码。另外经过性能测试，我的换名器速度要快四倍的样子。所以就像 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2014/02/18/dijkstra-interview&quot;&gt;Dijkstra&lt;/a&gt; 所说：“最优雅的程序往往也是最高效的。”&lt;/p&gt;

&lt;p&gt;结束这个项目之后，我换了一个团队（cluster团队），这个团队的人要好很多，低调而且幽默。Shape Security 的产品（Shape Shifter）里面包含一个高可靠（HA）集群管理系统，它可以通过网络，选举 leader，构建一个高容错的并行处理集群。这个集群管理系统一直以来都是公司里很复杂，却是可靠性要求最高的一个部件，一旦出问题就可能有灾难性的后果。确实，它当时可靠性非常高，从来没出过问题。但由于历史原因，它的代码过度复杂而缺乏模块化，以至于很难扩展来应付新的客户需求。我进入这个新团队的任务，就是对它进行大规模的简化，模块化和扩展，让它满足新的需求。&lt;/p&gt;

&lt;p&gt;在这个项目中，由于代码的改动幅度很大，在同事和部门领导的理解，信任和支持下，我们决定直接抛弃已有的测试，完全靠严格而及时的 code review，逻辑推理，推敲讨论，手工试验来保证代码的正确。在我修改代码的同时，一位更熟悉已有代码的队友一直通过 git 默默监视着我的每一次改动，根据他自己的经验来判断我的改动是否偏离了原来的语义，及时与我交流和讨论。由于这种灵活而严格的方式，工程不到两个月就完成了。改进后的代码不但更加模块化，更可扩展，适应了新的需求，而且仍然非常可靠。假设部门领导是“测试教条主义者”，不允许抛弃已有的测试，这样的项目是绝对不可能如期完成的。然而在当今世界遇到这样领导的机会，恐怕十个人里面不到一个吧。&lt;/p&gt;

&lt;h4&gt;Coverity&lt;/h4&gt;

&lt;p&gt;最后，我举一个由于测试方式不当而非常失败的案例，那就是 Coverity 的 Java 静态分析产品。我承认 Coverity 的 C 和 C++ 分析器也许是非常好的，然而 Java 的分析器，很难说。当我进入 Coverity 的时候，同事们已经忍受了整整一年的管理层的威逼和高压，超时过劳工作，写出了基本的新产品和很多的测试。可是由于技术债太多，再多的测试也没能保证产品的可靠性。&lt;/p&gt;

&lt;p&gt;我的任务就是利用我深入的 PL 知识，不停的修补前人留下来的各种蹊跷 bug。有些 bug 需要运行20多分钟之后才出现，一次还看不出是怎么回事，所以修起来非常耗时。有时候我只好趴在电脑前面养神，时不时的睁眼看看结果。Coverity 是如此的在乎测试，他们要求每修复一个 bug 你就必须写出新的测试。测试必须能够如实的重现 bug 的现象，修复之后测试必须能够通过。这看似一个很在乎代码质量的做法，然而它不但没能保证产品的稳定可靠，而且大幅度的减慢了工程进度，并且造成员工的疲惫和不满。&lt;/p&gt;

&lt;p&gt;有一次他们分配给我一个 bug：在分析一个中型项目的时候，分析器似乎进入了死循环，好几个小时都不能完成。因为 Coverity 的全局静态分析，其实就是某种图遍历算法。当这个图里面有回路的时候，你就必须小心，如果不问青红皂白就递归进去，就可能进入死循环。避免死循环的办法很简单，你构造一个图节点的集合（Set），然后把它传递到函数里面作为参数。 每当访问一个节点，你先检查这个节点是否已经在这个集合里，如果在你就直接返回，否则你就把这个节点加入到集合里，然后递归处理这个节点的子节点。它的 C++ 代码大概就像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void traverse(Node node, Set&amp;lt;Node&amp;gt; &amp;amp;visited)
{
  if (visited.contains(node)) {
    return;
  } else {
    visited.add(node);
    process_node(node, visited);   // 里面会递归调用 traverse
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看代码之后我发现，代码其实没有进入“死循环”，而是进入了指数复杂度的计算，所以很久都不能完成。这是因为写这函数的人不小心，或者没有理解 C++ 的函数参数缺省是传值（做拷贝）而不是传引用，所以他忘了打那个“&amp;amp;”，所以函数被递归调用的时候不是传递原来的集合，而是做了一个拷贝。每一次递归调用&lt;code&gt;traverse&lt;/code&gt;，visited 都得到一个新的拷贝，所以返回之后，visited 的值就恢复到之前的状态，就像 node 被自动 remove 了一样。所以这个函数仍然会在某种情况下再次访问这个节点。这样的代码不会进入死循环，然而在某种特殊的图结构下，这会造成指数级的时间复杂度（请想一下这是什么样的一种图）。&lt;/p&gt;

&lt;p&gt;本来很明显的一个图论算法问题，加一个“&amp;amp;”就修好了，手工试验也发现问题消失了。然而 Coverity 的测试教条主义者们（包括写出这 bug 的那人自己），吵着闹着，严肃命令我必须写出测试，构造出可以造成这种后果的数据结构，确保这个 bug 不会再重新出现。&lt;/p&gt;

&lt;p&gt;为一个我根本不会犯的错误写测试，而且它不可能再次发生，这不是很搞笑吗？就算你写了测试，也不能保证同样的事情不再发生。如果你不小心漏掉“&amp;amp;”，下次同样的问题还会发生，并且发生在另外的地方，而你却没有给那块代码写测试，所以给这个 bug 写测试，并不能防止同样的问题再次发生。这就像一个技术不过关的赛车手，他在别人不大可能撞车的地方撞了车，然后就要求赛场在那个地方装上轮胎护栏。可是下一次，这个车手又会在另一个其他人都不会撞车地方撞车……&lt;/p&gt;

&lt;p&gt;稍微有点图论常识，熟悉 C++ 基本概念的人，都不会犯这种错误。防止这种问题，只有靠个人的技术和经验，而不能靠测试。防止它再次发生的最好办法，恐怕是开个会把这个问题讲清楚，让大家理解，下次不要再犯。所以给这个 bug 写测试，完全是多此一举。跟队友们讲解了这个原理，他们听了之后，仿佛什么都没有听到一样，仍然强硬的要求：“可是你还是得写这个测试，因为这是我们的规定！你知道要是出了 bug，送一个销售工程师去客户那里，要花多少钱吗……” 无语了。&lt;/p&gt;

&lt;p&gt;Coverity 的 Java 分析，就是经常因为这种测试教条主义，使得项目进展及其痛苦和缓慢，却仍然 bug 百出。Coverity 的其他的问题，还包括我上面指出的，写重复的测试，一个测试测太多东西，使用字符串比较来做测试，等等。你恐怕很难想象，一个制造旨在提高代码质量的产品的公司，自己代码的质量是这样维护的 :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;由于绝大多数人对测试的误解如此之深，测试教条主义的流毒如此之广，导致许许多多优秀的程序员沉沦在繁琐的测试驱动开发中，无法舒展自己的长处。为了大家有一个轻松，顺利又可靠的工作环境，我希望大家多多转发这篇文章，改变这个行业的陋习。我希望大家在工程中理性的对待测试，而不是盲目的写测试，只有这样才能更好更快的完成项目。&lt;/p&gt;

&lt;p&gt;（由于这篇文章包含了我很多年的经验和深入的见解，希望你觉得有收获的话为此付费。建议价格是5美元，或者30人民币。【&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费方式&lt;/a&gt;】）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tests</guid>
<pubDate>Wed, 14 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Tesla autopilot 引起致命车祸</title>
<link>http://yinwang.org/blog-cn/2016/07/10/tesla-autopilot-fatal-crash</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Tesla autopilot 引起致命车祸&lt;/h2&gt;
                            &lt;p&gt;好一段时间没关心 Tesla 了，今天才发现他们的 autopilot 终于引起了&lt;a href=&quot;http://www.pbs.org/newshour/rundown/deadly-tesla-crash-exposes-confusion-over-automated-driving&quot;&gt;致命的车祸&lt;/a&gt;。这场 Model S 撞上18轮大卡车的车祸，发生于5月7号，距今已经两个月了。 Tesla 把这事隐瞒了两个月之久，直到现在美国国家公路交通安全管理局（NHTSA）开始调查此事，才迫不得已公之于众。由于 Tesla 没有及时向政府监管部门报告事实，政府正在考虑对 Tesla 公司采取法律行动。&lt;/p&gt;

&lt;p&gt;本来都懒得再提 Tesla 这公司的名字，但是由于 Tesla 对于这起车祸态度极不端正，不但隐瞒事实，而且继续找各种借口为 autopilot 开脱罪名，让这玩具级别的技术继续危害无辜开车人的安全，很多人（包括新闻机构）对此的分析很多都抓不住关键，所以我不得不再出来说几句。&lt;/p&gt;

&lt;p&gt;死者名叫 &lt;a href=&quot;http://www.legacy.com/obituaries/ohio/obituary.aspx?pid=179994314&quot;&gt;Joshua Brown&lt;/a&gt;，40岁，曾作为炸弹专家，服役美国海军11年之久。退役以后成立了自己的技术公司，近段时间热衷于 Tesla 的电动车技术，还建立了一个 YouTube 频道，用于演示自己的 Tesla 车子。所以可以说，Joshua 对 Tesla 的 autopilot 使用方法已经很熟悉了。然而这不幸的事件，恰恰就发生在这个专家用户和热心人身上。&lt;/p&gt;

&lt;p&gt;Tesla 方面称，那天 Joshua 行驶在佛罗里达州一条中间有隔离带的公路上，符合规定的启用了 autopilot。行车途中，前方有一辆18轮卡车左转，由于卡车车厢是白色的，后面的天空也是白色，所以 autopilot 没发现这个卡车，没有进行刹车，最后 Model S 撞上卡车，车主身亡。白色卡车衬托在白色天空上，所以 autopilot 就把卡车当成空气，这是个什么情况……&lt;/p&gt;

&lt;p&gt;先不说这技术有什么问题，出了这种事情，Tesla 对此&lt;a href=&quot;https://www.teslamotors.com/en_GB/blog/tragic-loss&quot;&gt;反应&lt;/a&gt;让人非常的失望。不但没有基本的自我检查，反而各种狡辩，把责任全都推到用户身上。首先，他们从统计的角度，说明 Tesla 车引起死亡的比例，比其它车子小很多。然后旁敲侧击地想说明，就算是那人自己开车，也不能避免这种车祸。最后他们再三的强调，autopilot 的说明书已经声明，功能还不成熟，如果看到要出事而没有及时接管，你们自己负责！&lt;/p&gt;

&lt;p&gt;这些都是 Tesla 老一套的诡辩方法。首先，Tesla 的死亡比例比其它车要小，并不能掩盖 autopilot 存在严重问题的事实。死亡比例小可能跟 Tesla 的技术没有很大关系，Tesla 是新公司，车都很新所以不容易出机械故障，而且买 Tesla 的都是有钱人，受过良好的教育，懂技术，所以一般不会乱开。那这种死亡比例，跟老牌子的车比是不公平的。其他牌子的车总数比 Tesla 多太多了，很多车子都十几二十年老掉牙，开车的各种人都有，酒鬼也有，老汉也有，罪犯也有，当然事故比例就上去了。如果你只看其它牌子最近几年的新车和豪华车，死亡比例拿来算一下，就很小。&lt;/p&gt;

&lt;p&gt;如果你光看 autopilot 导航的总里程数，事故比例恐怕就上去了，因为很多 Tesla 用户可能没有启用 autopilot，或者用的很少。Autopilot 不是第一次引起车祸了，之前我的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/01/10/tesla-autopilot&quot;&gt;另一篇文章&lt;/a&gt;已经提到，由于它的视觉技术不成熟，引发了许多险些发生车祸的情况，而且最近引起了好多次真正的车祸。要知道微小的比例落在一个人头上，就等于100%的不幸。等你因为 autopilot 而受害，才会发现 Tesla 摆出来的那些统计数字，对你其实毫无意义。也许，它确实造福了全人类，可惜死伤的人是你或者你的家人，而且那是因为 autopilot 极其弱智的判断错误…… 你会因为统计数字很安全而饶了 Tesla 吗？&lt;/p&gt;

&lt;p&gt;另外 Tesla 喜欢旁敲侧击的指出 autopilot 的驾驶能力高于人类，而事实并不是那样。你怎么能证明人开车不能避免这车祸？Tesla 说：“驾驶员和 autopilot 都没有看到卡车。” 你们怎么知道驾驶员没有看见卡车？那可是18轮的大卡车！说白色的侧面车厢映在白色的天空，所以人看不见它，这不是搞笑吗。&lt;/p&gt;

&lt;p&gt;一个东西是白色的，不等于它是看不见的，一个不透明的东西会挡住后面的景物，这一点人是很清楚的。白色的物体也会有反光，纹理会跟天空不一样，人可以通过这种反光感知它的存在。卡车不止有白色的侧面，还有黑色的轮子，车头上有烟囱，车窗，油箱，…… 各种其它颜色的附件。为了让其他人在夜间能看到车厢的大小，大卡车必须在车厢的八个角上都安装红色的警示灯，这些灯在白天不亮的时候也看得见的。就算天空是白色，人也是不可能看不见它，把卡车当成空气的。所以我猜真实情况是，驾驶员发现 autopilot 判断错误，想接管过来，但已经来不及了。要知道这个反应时间也许不到一秒！人死了，当然死无对证。&lt;/p&gt;

&lt;p&gt;从多次的事故现象中，我分析出这样一个规律，虽然 Tesla 声称 Model S 上装备了雷达和声呐，但是 autopilot 的操作却似乎仅靠摄像头的“像素”，通过神经网络进行图像分析，所以它才会连18轮大卡车这么巨型的东西都没有发现，在路上看到个树影还以为是障碍物…… 这些都是人根本不会犯的奇葩错误。我请大家不要对自动驾驶技术过于乐观，急于求成。机器视觉在某些地方是很有用的技术，然而它要能被用于自动驾车，还有非常长的路要走。&lt;/p&gt;

&lt;p&gt;Tesla 确实警告过人们，说这个技术还不成熟，你必须把手一直放在方向盘上，准备随时接管，然而这并不能免除 Tesla 的责任。首先，Tesla 根本就不应该把不成熟的技术发布出来，而且大肆宣传，搞得大家以为它很先进很可靠似的，争相试用。其次，说明书上的警告，在法律上也许是没有效力的。你要求别人随时接管，那么你必须在可能判断错误的时候给出警示，而且给人足够的响应时间，才能算是合理。&lt;/p&gt;

&lt;p&gt;Autopilot 的设计是有严重问题的。它操纵着车子，却不给人解释自己看见了什么，准备进行什么操作，在道路情况超越了自己能力的时候，也不给人提示，以至于人根本不知道它出了问题，不能及时接管。要知道，车在直走的时候，autopilot 是否判断正确，人往往是看不出来的。一辆没有 autopilot（只有普通  cruise  control）的车子，跟一辆启用了  autopilot 的车子，在匀速直线运动的时候，人是无法察觉出任何区别的。可是人知道 autopilot 会自动刹车，而普通的  cruise  control 不能，所以人就会期望有 autopilot 的车子会刹车。等你发现它一声不吭，前面有障碍物却没有刹车，才会知道它有判断错误，可是那个时候就已经晚了。&lt;/p&gt;

&lt;p&gt;所以在这种情况下，Tesla 虽然事先有“免责声明”，把责任全都推在用户头上，在法庭上其实仍然可以败诉，因为他们对用户提出的要求是不切实际的，没有人能够在上述 autopilot 判断错误情况下及时的接管过来。我建议这起车祸死者的家属把 Tesla 告上法庭，要求巨额赔偿。我也建议所有 Tesla 的车主，为了对自己和他人的生命负责，请关闭 autopilot 这个功能！Tesla 根本就不懂如何设计自动驾驶系统，技术不过硬，设计有缺陷，基本就是个玩具。生命很宝贵，用自己的生命来给所谓的“新技术”做试验品，是不值得的。&lt;/p&gt;

&lt;p&gt;珍爱生命，远离 autopilot！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tesla-autopilot-fatal-crash</guid>
<pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Google Maps的设计问题</title>
<link>http://yinwang.org/blog-cn/2016/07/05/google-maps</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Google Maps的设计问题&lt;/h2&gt;
                            &lt;p&gt;我开车的时候喜欢用 Google Maps 导航。虽然我对 Google 这公司挺有意见，然而 Google Maps 确实是好东西。比较过其他几个导航软件（Waze，Scout Maps）之后，我发现 Google Maps 在大部分时候还是表现最好的一个。&lt;/p&gt;

&lt;p&gt;然而这并不等于它的设计是没有问题的。Google Maps 时不时的会改变设计，有些地方改进了，另外一些地方却可能被改得还不如以前。我已经不止一次的向 Google Maps team 提出反馈意见。&lt;/p&gt;

&lt;p&gt;现在我就把最近烦扰我的一个问题讲一下。我已经通过 app 给 Google Maps team 发送了 feedback，但我希望这种设计问题引起足够的重视，所以也在这里说一下。&lt;/p&gt;

&lt;p&gt;这个最近发现的问题是，Google Maps 显示的公路号码字体太小。它把州际公路（interstate）之类的公路号码，显示成路牌上的样式。比如下面的这个 Interstate 880，被显示成带有弧形花边，红蓝底色的路牌样式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-d0dfc31379ac5331.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这看似美观，平时在手机上看貌似没什么问题，然而在开车的时候你就会发现，里面的号码很难看清楚。其原因是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把带有这个花边的路牌嵌入到导航提示里面之后，由于整个路牌的高度和旁边字体的高度一样，公路号码“880”的字体，比旁边的字小了很多（请比较“880”和“North”的大小）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开车的时候，手机架在机座上，离眼睛有一定距离，而且由于车速很快，你只有不超过一秒钟的安全时间可以去瞄手机。所以我经常发现瞄一眼是根本没法看清楚这个花边里面的号码（880）的，你得盯着手机看好一会儿。有时候我把头凑近手机，都很不容易看清楚。这对于开车的人是一个不小的干扰，可能会引起交通事故。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;湾区的很多高速公路号码只差一个数字，比如 280，380，680，880…… 这么小的字体，很容易看不清楚这号码到底是哪一个！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;实际上你观察一下真正的路牌，就会发现公路号码的字体，跟旁边文字的比例，并不是像 Google Maps 上那个样子。请观察下图中的路牌，号码“280”和“101”的字体，和旁边的文字“SOUTH”，“TO”，“NORTH”，“San Francisco”其实是一样大，甚至更大一些。加上 INTERSTATE 的盾形花边，这个标志的尺寸比旁边的文字要大很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-43f9258afbc7373a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;所以 Google Maps 一片好心，想把公路号码做得很“形象”和“直观”，做得像路牌的样子，结果比例不对，帮了倒忙。对此我提出的建议是：&lt;/p&gt;

&lt;p&gt;方式1：不要把公路号码显示为路牌的样式，直接使用像“I-440”这样的文本来显示路名。很少有人会在乎公路号码的样式是否美观，他们只在意是否能清楚地看到号码，所以这可能是最好的选择。很多其他导航软件和专用 GPS 设备（比如 Waze，Garmin）都是直接采用文本显示公路号码。&lt;/p&gt;

&lt;p&gt;方式2：保留路牌样式，但是需要把路牌的尺寸增加到真正的路牌字体比例，也就是说让路牌里的号码跟旁边的字体大小一样。这个方式放到 Google Maps 的导航提示里面，恐怕会让导航提示的宽度变大，占用更多屏幕空间，所以虽然也许可行，但可能不如第一种方式。&lt;/p&gt;

&lt;h3&gt;其它一些问题&lt;/h3&gt;

&lt;p&gt;当然，字体大小并不是我发现的 Google Maps 唯一的问题。它还有其他一些小问题，有一些我已经向 Google Maps 的 team 提供了反馈，已经修复，还有一些仍然存在。现在我把这些小问题指出来，其中一些相当的讨厌：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[已修复] Google Maps 曾经在一段时间采用这样一种设计：当它通过对交通信息进行分析，得知有另一条时间更短的路线，它会弹出一个窗口，询问用户是否要选择这条更快的路（Yes/No?）。这个窗口有十几秒的延时，到时间之后如果你没有按屏幕，窗口会自动消失，并且自动选择新的路线。&lt;/p&gt;

&lt;p&gt;缺省选择新的路线，是一个很不合理的设计。在开车的时候，你必须集中注意力在路上，几乎没有时间去相应弹出的窗口。而且这个窗口字体和按钮都很小，开车人可能根本没时间去读里面的内容，即使读了也不容易按中正确的按钮。到时间没有动作，导航系统自动切换到新的路线，而不是保留用户最初的选择。未经允许改变用户的路线选择，可以说是一个反人类的设计。&lt;/p&gt;

&lt;p&gt;我及时向 Google Maps 团队提供了强烈的反馈，这个问题已经改变。现在缺省的选择是保留原来的路线。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[还存在] Google Maps 有时候会忽然重新计算并且改变原来的路线。改变的原因也许是因为开车人没有按原路线走，然而这有可能不是开车人的意愿。举一个例子，从南湾地区去三藩市方向，有两条高速公路可以走：280 和 101。白天我一般会选择 280，因为 280 车不多，而且风景优美一些。我会在 Google Maps 界面选择 280 的路线。&lt;/p&gt;

&lt;p&gt;然而当我开出停车场，在第一个路口由于 GPS 的方向还未适应过来，我有可能转错方向。这个时候 Google Maps 会根据我的方向重新计算路线，这时候它很有可能自动把整个路线换成走 101，而不再是 280。由于最初的方向错误而换掉整体要走的高速公路，是非常不合理的。你以为它会按你原来的选择走 280，结果最后发现它把你带到了 101 的入口……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">google-maps</guid>
<pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>养生节目带来的危害</title>
<link>http://yinwang.org/blog-cn/2016/06/28/yangsheng</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;养生节目带来的危害&lt;/h2&gt;
                            &lt;p&gt;国内总是流行各种各样的“养生节目”，深受中老年人的欢迎。比如我爸妈，有时无聊了，就会转发给我一些养生节目，比如这个：『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』。这节目说，有人得了过敏性鼻炎，喷嚏鼻涕不断，严重脱发，头都半秃了，虚弱无力，性能力衰退…… 最后专家得出结论，是因为他每天早上喝一杯凉水导致的！&lt;/p&gt;

&lt;p&gt;据我观察，这些养生节目里面的理论，基本可以归为两种：好的和新的。可惜好的理论都不新，新的理论都不好。&lt;/p&gt;

&lt;h3&gt;好的理论&lt;/h3&gt;

&lt;p&gt;第一类理论，就是把人们早已熟悉的，久经考验的常识，比如早晚要刷牙之类的，拿来包装成“新理论”。这些理论当然错不到哪里去，然而却是每个人从小都已熟知的。现在挂着“专家”头衔的人出来一宣传，这些斯通见惯的常识，忽然间被老人家们当成了最新的研究成果。&lt;/p&gt;

&lt;p&gt;我遇到的这种例子挺多的。有时候父母给我发个信息，说你要注意这个那个习惯啊，不然会得什么什么样的病…… 这本来就是我从小就已经知道并且照办的事情，而且我还记得当年这东西就是我爸妈教给我的。现在让这帮“养生专家”一忽悠，倒像个新鲜事，又拿出来讲一遍，好像别人不知道一样…… “专家”的威力就是这么强大 :P&lt;/p&gt;

&lt;h3&gt;新的理论&lt;/h3&gt;

&lt;p&gt;第二类理论，就是胡编乱造出一些“新理论”，却没有经过科学实验证实。『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』就属于这一种情况。通常这种理论把问题的原因归结为某一个生活习惯（比如早上喝一杯凉水），而忽略所有其它引起问题的因素。这些理论的问题在于，它们通过臆断，得出错误的“因果关系”。&lt;/p&gt;

&lt;p&gt;据我了解，过敏性鼻炎，脱发等问题，很多都是因为基因遗传，跟人平时的生活习惯几乎没有关系。现在有一个人出现了过敏性鼻炎和脱发，而且碰巧这人早上起来喜欢喝一杯凉水，于是专家就得出一个可笑的结论：一定是喝凉水引起了过敏性鼻炎和脱发。&lt;/p&gt;

&lt;p&gt;养生专家们很喜欢把健康问题跟某些不起眼的习惯挂钩，这样就可以创造一些惊人的理论，却无法验证其真实性。他们可以说，就是因为你这个小小的习惯，导致了如此严重的健康问题。这样一来，他们就可以告诉你吃什么，不吃什么，做什么，不做什么。每过一段时间，这些人都会换一套不同的说法，让你感觉有新东西出来，却没发现这些其实跟之前的说法自相矛盾。老年人记性不好，看不出破绽，有些人为了健康不惜一切，仿佛活着就是为了不停地研究如何才能继续活着…… 这就是这帮养生专家和养生节目得以生存的关键。&lt;/p&gt;

&lt;p&gt;得出喝凉水引起了鼻炎，脱发，身体虚弱这样的结论，且不说它看起来有没有可能，你必须先经过科学实验。你不能只看一个人，因为数据量太小，很可能是偶然巧合，没法建立因果关系。所以实验必须要有两组人进行对照，就是所谓“对照实验”。一组人早上喝一杯凉水，另外一组人不喝。过一段时间，分析这两组人里面出现上述问题的人的比例，如果喝凉水的人大部分出现了问题，而不喝凉水的人大部分没有出现问题，你才有可以得出“喝凉水导致鼻炎和脱发”这样的结论。&lt;/p&gt;

&lt;p&gt;显然，这个节目里的专家并没有经过实验，而是引用（滥用）『黄帝内经』里面的各种阴阳理论。说早上阳气上升，喝一杯凉水把阳气给浇灭了，怎么能不得病哪！这显然是完全不科学，不负责任的说法。实际上这套阴阳理论是如此的模棱两可，跟占星学如出一辙，你可以利用这些说法来解释世界上的几乎任何现象！不管遇到好事还是坏事，同样的一句话，可以同时支持两种完全相反的结果。为什么它可以这样呢？因为这些说法本来模棱两可，所以不同的人从不同的角度去解释它，发现都是说得通的。&lt;/p&gt;

&lt;p&gt;这些养生节目，经常把严重身体问题的起因，归结为某些生活上的小习惯，吃什么，不吃什么之类，很容易让人忽略真正的起因，更加严重的因素，这属于一种误导。中老年人看了这些节目，往往盲目的认为坚持或者改变生活上的一些小习惯，就可以避免或者修正一些严重的身体疾患，结果耽误了真正科学研究出来的补救办法。在这种意义上，养生节目是有危害性的。我建议中老年人少看这种节目，多跟真正的医生了解科学的医疗知识。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">yangsheng</guid>
<pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>欧盟草拟法案，对机器人征税</title>
<link>http://yinwang.org/blog-cn/2016/06/24/robot-tax</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;欧盟草拟法案，对机器人征税&lt;/h2&gt;
                            &lt;p&gt;据路透社报道，欧盟正在草拟一个关于机器人的&lt;a href=&quot;http://www.reuters.com/article/us-europe-robotics-lawmaking-idUSKCN0Z72AY&quot;&gt;法案&lt;/a&gt;。由于机器人以及智能机器的使用，可能带来空前严重的失业问题，这项法案要求所有使用智能机器人的公司，如实向政府汇报由于机器人的使用，而节省下来的人的工资，然后政府据此征收社会安全税，给人发放相应的福利。这个法案跟我的一个想法类似：每当机器人取代一个人的工作，使用机器人的公司就有义务要养活那个人。&lt;/p&gt;

&lt;p&gt;很多机器人公司在抱怨，说这会阻碍机器人行业的发展，然而我觉得这正是欧盟关爱人民的表现。对机器人的使用进行征税，对于社会的安全和幸福是非常有必要的。用机器人代替人的劳动，导致人失业，却不安顿好失业者的生活，属于一种掠夺或者抢劫的行为。这不但会大幅度降低社会幸福感，而且会导致社会安全问题，比如犯罪率上升等等。&lt;/p&gt;

&lt;p&gt;人的权益应该是崇高致上的，所有损害人的切身利益的做法，都应该付出代价，哪怕这会阻碍技术的发展。要记住，技术是为人服务的。如果技术给人和社会带来的不是幸福，而是困苦甚至灾难，那我们就应该理智的延缓甚至取消技术的发展，或者为此征税来维护人的权益。&lt;/p&gt;

&lt;p&gt;世界上聪明人太多了，却缺乏智慧的人。欧盟的这一法案让我看到了希望。我希望世界上所有国家，特别是美国和中国，都意识到这个问题。大部分的社会财富集中在极少数人手中，这样的社会是不会幸福的。就算你钱再多也一样，你只会看到一片荒凉，到处是饥饿而势利的人。你不再会有朋友，只有对你的钱感兴趣的人…… “&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们都应该明白这个道理。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">robot-tax</guid>
<pubDate>Fri, 24 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>两个计划的变动</title>
<link>http://yinwang.org/blog-cn/2016/06/22/plan-change</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;两个计划的变动&lt;/h2&gt;
                            &lt;p&gt;我有两个计划的变动，一个是关于离开美国，另一个是关于写书计划。&lt;/p&gt;

&lt;h3&gt;离开美国计划的推迟&lt;/h3&gt;

&lt;p&gt;有些人可能发现了，之前写的『关于离开美国的决定』，其实算是一时冲动的结果。我对美国的意见不会变化，然而生活还是需要折中考虑，一步一步的来。我不喜欢美国的制度，绝大部分原因是因为过去几年的经历，以及亲眼目睹作为“美国人”的女朋友的一些经历。&lt;/p&gt;

&lt;p&gt;美国在对于劳动者的福利和保护方面确实很不好，很多时候可以说是任凭雇主欺压员工，没有法律保障。然而一个现实的问题是，我们现在没有能力改变它。我离开中国十年了，一点都不了解现在的中国社会，也没有任何现实可行的计划让我的生活有所保障。父母对此也不大支持。在这样的情况下回国，就有点像没有带好降落伞就跳出一架引擎发出怪响的飞机 :P&lt;/p&gt;

&lt;p&gt;前几年的遭遇虽然很惨，觉得根本不应该发生在我身上的事情，居然都发生了，可是我毕竟已经度过了最困难的时候。老实说，现在这个公司其实对人挺好，特别是现在的团队的同事特别好。我在这里其实已经有了一些同类的朋友，我有女朋友，女朋友的爸爸妈妈，弟弟妹妹，…… 他们都很关心我，这是很宝贵的财富。过度的思考以前的不幸，让我没有看到离开的代价，这个代价是非常大的。&lt;/p&gt;

&lt;p&gt;所以在看好前面的每一步之前，我不得不推迟所谓的“离开美国计划”，不能冲动行事。当然我会继续观察国内和其它国家的情况，看好了之后也许会有动作。当然我感谢大家的支持。由于这篇文章和之前的『未来计划』，有一些现在和以前的同事都表示很关心，我也新结识了一些有相似经历和思想的人。他们找我聊天，表示关心和支持，聊得挺投机的。&lt;/p&gt;

&lt;p&gt;所谓同类相吸，我觉得这些人和我，已经建立起一种互相支持的氛围。所以如果你喜欢我的想法，也可以联系我。也许有一天，我们这些意气相投的人会走到一起来……&lt;/p&gt;

&lt;h3&gt;写书计划的取消&lt;/h3&gt;

&lt;p&gt;之前我有感于计算机科学教育不求甚解，以讹传讹的现状，想写本书来传播我所掌握的精华。然而面对社会的现状，我不得不取消这个计划。取消的原因不是因为写不出来或者没有时间写，而是因为我发现并不是每个人都应该得到真知。卖知识是一种非常不划算的生意。有些信息太过宝贵，远不是一本书的价钱可以买得到的，甚至不是大学四年的学费可以付得起的。我不愿意让它们落到阴险的人或者敌对势力手里。&lt;/p&gt;

&lt;p&gt;这里面是有一个故事的…… 曾经有个人看了我的文章联系我，加了我的 QQ。他对 PL 的东西很感兴趣，我觉得他挺聪明又好学，就给他讲了很多。不过我也看出来，他并不是科班出生，没经过名师指导，民科一样瞎弄，所以很多概念都是乱的，喜欢把问题搞复杂，但我还是耐心地给他解释。后来他的问题越来越多，暴露出的知识缺陷和误解也越来越多，始终没有说出有价值的见解。&lt;/p&gt;

&lt;p&gt;直到一天，有个朋友跟我说，这人在知乎上黑我，我才恍然大悟。原来他一边在 QQ 上请教我，同时却背地里在知乎上评论我，说：“王垠就是吹得厉害，某些很基本的东西他其实都不懂。有一次我问他那什么什么，结果他吹了一通，最后也没说清楚……”&lt;/p&gt;

&lt;p&gt;事实是，由于一段时间以来他不停地问问题，从我这得到了太多有价值的信息，却没有任何付出。这人是敌是友还不知道呢，所以我决定对他留一手。没想到他一边跟我虚心请教的样子，一边却在知乎上跟小白们显示牛逼，背地里黑我，把我没告诉他的事情，说成是我不懂，把我没给他看的代码，说成是我不会写……&lt;/p&gt;

&lt;p&gt;这个人在知乎上很有名。为了给他留点面子和醒悟的机会，我就不点名了。然而我奉劝这类人，请不要在知乎上制造自己的名气，贬损其它人了。在网络上的名气和真实世界里的地位，是有非常大差别的。人们不会因为你在知乎上排名很高，就在现实工作中给你重要的职位。只有在真实的人际关系中踏踏实实做事，诚实为人，得到现实中人们的认可，才会得到真正的尊重。&lt;/p&gt;

&lt;p&gt;出现了这样的人，让我非常的心寒，我深刻地认识到，并不是所有人都是我想象中那么善良。我无偿的把经过千辛万苦，跋山涉水得来的宝贵财富，给了一个阴险的小人。这种人很聪明，然而却缺乏洞察力和深刻的思维。让他们得到了这样的东西，这些人就会到处张扬，最后不知情的人还以为是什么天才。我用自己泛滥的爱心和拯救世界的愿望，帮助了一些别有用心的人，结果只会让世界变得更糟。&lt;/p&gt;

&lt;p&gt;我不止一次的遇到这样的人，所以现在要分析什么技术问题，都得很小心点，不让人轻易得到背后的思想。鉴于这个原因，我决定取消写书的计划。我不愿意把深刻的思想用书的形式送给所有人，可是我又不会像某些作者那样随便写点肤浅的东西，所以我只好不写了。&lt;/p&gt;

&lt;p&gt;就像武林高手不把绝招轻易传授一样，在技术的领域也是一样。真正的精华，只能在完全确信对方的身份和人品之后，在互惠互利的情况下，才能部分的指点。只有这样才能够平衡世界上的善恶两种势力，让强大的力量只帮助那些善良的人，最终达到一个更好的世界。我的几个教授，包括 Dan Friedman 和 Kent Dybvig 都是这样做的，对未经深入了解的人保留很多秘密，我现在终于理解了为什么。&lt;/p&gt;

&lt;p&gt;这就是为什么有陌生人发 email 问我深入的问题，一般都没有回复。就算是同事我也会在潜意识里分成不同的信任级别，并不是每个人我都会跟他畅谈技术。你必须认识我，而且人品必须好，我才有可能跟你探讨问题。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">plan-change</guid>
<pubDate>Wed, 22 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>IT业给世界带来的危机</title>
<link>http://yinwang.org/blog-cn/2016/06/20/it-and-society</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;IT业给世界带来的危机&lt;/h2&gt;
                            &lt;p&gt;昨天写了文章之后，回忆起这几年在湾区的经历，觉得自己是一个很不幸的人。然而就在今天，我的自怜奇妙的转换成了另一种感情，因为我看到了更不幸的人……&lt;/p&gt;

&lt;p&gt;正在女朋友 Cinny 的父母家吃饭，忽然窗外来了一个人。仔细一看，是个约莫十来岁年纪的漂亮白人女孩，她说：“亲爱的，你们想要一些刚从树上摘下来的新鲜李子吗？” 据女朋友妈妈介绍，她是邻居的女儿。之后我尝了一个李子，颜色已经黑透了，非常新鲜非常甜！&lt;/p&gt;

&lt;p&gt;随后我和 Cinny 出去散步。在她家的对面，耸立着两栋高大华丽的豪宅，看那样子，价值恐怕超过200万美元。两栋豪宅的中间，夹着一间样式非常不搭调的便宜小矮屋。这屋子周围被篱笆围了起来，可以看见里面种了很多的植物。在那门口的无花果树下，赫然出现这样的一个牌子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-fbcae0ac0fa13486.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;它说：“请不要摘我的无花果。我失去了我的工作，需要依靠自己种的食物为生。我是一个生物学家，如果你知道有任何的工作，请告诉我。谢谢！” 这树上还挂着好几个类似的牌子，从它们看来，这位生物学家已经失业一年了……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-18fdd10a61af7c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Cinny 说，吃饭时给我们送果子来的女孩，就是这家的孩子。我想起她甜美的笑容，不禁一阵心酸！哎，谁才是真正可怜的人？我之前在无病呻吟些什么啊……&lt;/p&gt;

&lt;p&gt;这些年来湾区的 IT 业大量的扩张，Apple，Google 等公司不停地在附近建新的办公楼。IT 业的过度发展，导致了其它行业的衰落，让附近土生土长的居民生存困难。本来公司的扩张应该引起经济的流通，社区的繁荣，人气的高涨，结果每当像 Google 这样的公司提供免费餐饮，附近就会有多少店铺关门，又有多少人失业，成为一片荒漠……&lt;/p&gt;

&lt;p&gt;是的，大家节省外出买饭的时间能为公司赚很多钱，自己也节省了不少开支。但是这些公司真的回报了社会吗？新闻早已经曝光，这些大公司利用美国税法的漏洞，每一家每年都导致政府少收上亿美元的税钱。没有收到税，就没法给这些丢了工作的人发福利，以至于他们落魄到这种地步。&lt;/p&gt;

&lt;p&gt;Cinny 告诉我，这家人可能也要卖掉房子，搬到别州去了。之前有好些邻居已经搬走了，其中有一些以前在附近开小店，卖很好吃的东西。现在这些儿时的美好回忆，都已经不在了……&lt;/p&gt;

&lt;p&gt;我们一直盲目的以为技术会改善人们的生活，很多人总是试图做一些 O2O 服务，甚至研制机器人和自动车，这样可以代替许多人的劳动。如果这些技术真的能代替繁重或者危险的劳动，那确实好。可是如果发明这些技术的公司不回报社会，反而想办法钻法律的漏洞避税，那就变得有害了。在创造这些技术的同时，我们有想过因为它们而失去工作，而又因为公司不交税，不回报社会而变卖房产，颠沛流离的无辜人们吗？&lt;/p&gt;

&lt;p&gt;作为一个 IT 人，我们不得不思考，这是不是一种无情的掠夺，我们是不是害虫？当我们帮助雇主掠夺了别人的工作之后，我们自己会不会就是下一个被社会抛弃，丢掉工作的人？“&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们在思考如何发展自己事业的同时，也应该思考如何回报社会了。否则我们面对的将是一片毫无生气的荒原，我们不会再看到幸福的笑脸……&lt;/p&gt;

&lt;p&gt;有人说这一切都是资本主义造的孽，而不能怪 IT 业。不过由于 IT 存在高度的“智能”和“自动”，它已经开始给资本主义的社会关系带来灾难性的影响。有位大胡子说，无产阶级是资本主义的掘墓人，那么我说，IT 业就是资本主义的定时炸弹，它离爆炸的那一天已经不远了。&lt;/p&gt;

&lt;p&gt;我想我们应该都能做点什么…… 话说，如果你知道湾区有招生物学家的工作，请联系我！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">it-and-society</guid>
<pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>关于离开美国的决定</title>
<link>http://yinwang.org/blog-cn/2016/06/19/leaving-united-states</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;关于离开美国的决定&lt;/h2&gt;
                            &lt;p&gt;很多人看了我的『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/05/14/future&quot;&gt;未来计划&lt;/a&gt;』之后联系我，热心的给我提供线索和帮助。记得差不多两年以前，我因为某些人的卑鄙作法而突然丢了工作，导致签证出现问题。在那个危机关头，也有很多人伸出援助之手。在此我对这些人一并表示由衷的感谢。&lt;/p&gt;

&lt;p&gt;虽然我口头上自嘲，实际上生活过得并不差，吃好穿好住好，还有漂亮妹纸陪 :) 只是由于美国社会的不合理，我没法发挥自己的能力，没有得到我应有的回报。由于我深入的洞察力和卓越的实现能力，一个建议就可以避免团队走很多弯路，我给曾经任职的每个公司提供的价值都超过百万美元，可是我没有看到合理的回报。所以现在的生活跟我的实际能力，显然差距太远。&lt;/p&gt;

&lt;p&gt;我觉得现在是该离开美国的时候了。虽然我拿着某知名低调大公司一个不错的 offer，其实我早已对美国彻底失望了，我不准备接受这个工作。一个具有卓越才能的人，在这个国家有过如此悲催的遭遇，才能一直得不到发挥，处处被压制，只能说明这个国家存在非常严重的问题。美国不再是一个尊重人才的国家，它已经被野心家和吹牛扯淡的官僚政客所控制。这次很多人推荐给我美国公司的工作，各种热门公司都有。可是简单了解他们的“文化”之后，我都失去了兴趣，放弃了跟他们面试的机会。我感谢这些人，然而我的心已经不在美国。&lt;/p&gt;

&lt;p&gt;对美国的失望不止因为事业的不顺，我已经彻底厌倦了美国的生活。人们都说美国是个大农村，好山好水好寂寞，这是千真万确的。一个人的时候很无聊，两个人的时候也没有好到哪里去。我交往了一年多的新女朋友从小在美国长大，是个“融入了美国文化”的，漂亮时尚的 ABC 妹纸。跟她在一起久了，也没有感觉好到哪去。到后来约会都不知道该干什么了，因为想不到附近还有什么有意思的地方值得常去的！同事们所谓的休闲，也就是爬山一类的事情，爬一次还好，多两次就发现没意思了，正所谓好山好水好寂寞嘛 :) 在这个文化和人心的沙漠，无论你是否单身，都无法摆脱那黑压压的孤独感。&lt;/p&gt;

&lt;p&gt;在中国吃个夜宵，穿上短裤拖鞋走过两个灯火通明，人行道宽敞的路口，就发现人来人往，什么都有。在美国吃个夜宵？在黑洞洞的大马路上开十几分钟的车，若隐若现的 plaza 中间忽然出现一家还亮着灯的饭店，旁边的商店饭店都早已关门，鬼屋一样的死寂。你朋友圈出现的烤串照片，说“咱美国也有吃夜宵的地方啦”，就是这样的背景，没有气氛和文化，只有味道一般般的烤串。这还是近两年才出现的，不知道哪天又因为某大公司为鼓励员工熬夜工作在内部开设夜宵而倒闭也说不准。到了荒漠中的夜宵店，走近一看，门口停着几辆车，站着十几个人。店家没好气的对你说：“等待时间大概是半小时！”&lt;/p&gt;

&lt;p&gt;整个国家的设施和道路被设计来方便开车，大片的面积被停车场占据，拉大了人与人的距离，也许是美国如此无聊的一个原因。你不可能悠闲的牵着女友散个步，然后顺便买点东西吃。商店和饭店都被道路分成一小块一小块的，人行道非常狭窄，只能走一个人，或者干脆没有人行道，旁边的车以每小时40英里的速度在你耳边呼啸而过。近在眼前的商店你也没法步行到达，必须钻进那铁盒子才能安全地开到另一个地方，然后又得经过一番找车位的折腾。有时候车位全满，你还需要绕来绕去的“蹲坑”甚至“跟踪行人”，看别人走了你才能趴进去。这样一番折腾之后，本来休闲的心情，全都因为各种紧张而消失殆尽。&lt;/p&gt;

&lt;p&gt;当然生活缺乏休闲精神，只是美国生活的一方面。最不满意的其实还是工作的不如意。有些人跟我说，等有了绿卡之后就会感觉自由一些了，然而我很怀疑这种说法。要说绿卡，我得来可以很容易的，我的女朋友从小就是美国公民，而且她很愿意跟我结婚 :P 我不是那么喜欢结婚的人，所以肯定不会为了绿卡而结婚。然而就算我拿到了绿卡，那又能怎样呢？美国公司混进管理层的人，往往不是靠能力，而是靠关系，而且对于中国人相当的排斥，就算你有绿卡，有美国公民身份也一样。有真知灼见的人的意见，往往被下层和中层领导所掩盖，完全得不到被上层领导赏识的机会。&lt;/p&gt;

&lt;p&gt;绿卡，可以说是美国用于敲诈外国人，让他们提供廉价劳动的强有力工具。很多人为了绿卡，连续好几年忍辱负重，拿着低廉的薪水，扛着巨大的压力，做着比美国人繁重的工作，到后来人都老了，头都秃了。可是绿卡会给你自由吗？有了绿卡你就不再能去其它国家定居，否则绿卡会被收回，而且在另一个国家赚的钱还得给美国缴税。美国政府这如意算盘打得可真好，利用绿卡把别人套牢在自己国家做苦力。我看到许多有绿卡，甚至有美国公民身份的华人，我并不觉得他们过得很好。一个很实在的例子，我的女朋友就是美国公民，我知道美国政府和公司对她并不好。美国不是一个关爱人民的国家，实际上它跟奴隶社会非常的接近，所以就算你成为美国公民又能怎样？很多人跟我提到要先解决“身份问题”，我很讨厌“身份问题”这个词。身为中国的主流社会，跑到这里来跟偷渡客难民似的，没有“身份”，好像没有自己的国家一样……&lt;/p&gt;

&lt;p&gt;来了美国十年了，基本上受了十年的罪。开头受了美国教育的欺骗，以为在美国能够静心的做研究，然后以为在美国可以发展自己的事业。可是到如今，一场场的骗局都已经揭穿，这一切都已经看透了。并不是我不能“融入”美国社会，而是我根本不屑于融入它。跟美国人聊天感觉就两个字，假和蠢。一百年前罗素（&lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Russell&quot;&gt;Bertrand Russell&lt;/a&gt;）就说过，美国是商人开的国家，美国的大学教授只是商人的仆人而已，商人只知道竞争，直到不需要竞争的时候还仍然在竞争，为所谓“生存压力”惶惶不得终日。他的话直到今天都还是对的。哈佛，斯坦福之类的学校尽培养一些商人和政客，吹牛的本事大。利用别人的劳动和发明，把功劳挂在自己头上，然后别人就以为自己是“成功人士”。&lt;/p&gt;

&lt;p&gt;美国人深深地为自己的文化感到自卑，所以一有机会就附庸风雅，显示自己跟欧洲的渊源关系。星巴克的咖啡中杯不叫“medium”，非要用个意大利词叫“grande”。从法语引进的词，非得要古板的按法语发音，漱喉咙一样，你按英语发音他们还指证你说这是法语~ 美国人互相之间的关怀，比起世界上很多其他国家都要差很多，特别是比欧洲国家要差非常多，甚至比日渐势利的中国都要差一些。中国社会的一些倒退作法，包括利益熏心，学术腐败，都是被美国传染而来的。&lt;/p&gt;

&lt;p&gt;美国人的教育和意识形态里鼓吹的贪婪，导致了这个国家的人民生活越来越艰难，所以就算它科技再发达，总体再有钱又能怎样？这个国家的财富对你已经不再有意义。亿万富翁们可以合法避税，收入过十亿的大公司利用税收法漏洞，把巨额收入报在不收企业税的百慕大一类的小国，结果总共只交不到3%的税，反倒让挣血汗钱的工薪阶层缴税超过收入的35%。90%以上的财富集中在10%的极少数人手里，社会最底层的人没有工作，政府却利用各种借口（比如因为你仍然有自己的房子）不提供社会福利和医疗保障。当技术的进步导致的不是人民的安逸和享受，而是进一步的失业率扩大，人民工作更辛苦，压力更大，生活困苦，医疗，福利和下一代的教育条件恶化，技术再发展又有什么意义？我怎么总觉得美国在走苏联或者纳粹德国的老路…… 我不能让自己的下一代诞生于这样的国家！&lt;/p&gt;

&lt;p&gt;很多中国人不理解欧洲国家的悠闲，觉得欧洲人太懒，在技术上落后于美国，真是天大的误解。很多欧洲人看到了技术发展会带来这样的后果，所以他们很明智的决定，不要研究什么智能机器了，继续让人去干很多事情。没工作的人也有很好的福利，养小孩上大学都不要钱，无忧无虑。上班的人就算是饭店服务员，都有各种法律保障，工作条件有保证，休息时间有保证，最低工资有保证，根本不用像美国的服务员一样，需要靠小费为生。欧洲劳动法不承认美国社会流行的所谓“at-will employment”，即雇主或者雇员都可以在任何时候无条件终止雇佣关系而无需提前通知或者警告，所以雇员不用担心随时会被炒鱿鱼。这就是为什么欧洲人过得比美国人开心，在欧洲国家生活比美国有趣。&lt;/p&gt;

&lt;p&gt;所以我已经决定要离开美国，这是思考了很久很久以后才做出的决定。我的下一站，当然是我的家。我会歇至少半年不工作，陪伴我的父母，会见我的老友。同时我可能静下心来思考未来的事业。我目前的想法是做一个自由职业者。我不再愿意成为某个公司的正式员工，继续做底层的编程工作。由于我的造诣和深入见解，我更愿意给一些公司做“顾问”性质的指导和初期的建模设计，而不成为那些公司的一员。由于我对各种技术深入精髓的理解，以及对于设计的见解，我可能会成立自己的咨询公司，面向企业，对各种 IT 技术提供分析和指导，或者对企业提供技术培训服务，就像著名的 &lt;a href=&quot;https://www.nngroup.com&quot;&gt;Nielsen Norman Group&lt;/a&gt;。同时我也会花时间来发展自己的核心技术，包括 Yin 语言和最近对于数据库系统和存储系统的深度探索。&lt;/p&gt;

&lt;p&gt;总是有人跟我说国内的环境不好，说得跟水深火热似的，可是我觉得那只是片面观察和危言耸听。我觉得我还不至于在国内活不下去。我喜欢中国，并不因为它是我的国家，或者被政治书教的，这是通过与美国和其它国家比较得出的结论。中国的文化更加接近欧洲，而不像美国。这些国家经历了历史与战火，经历了无产阶级革命，就算失败之后，社会平等关爱的思想已经进入了很多人的心。两年前在国内待了两个月，我过街可能被车撞，在地摊上可能吃到地沟油或者毒牛奶，可是我却显然过得舒心很多，轻松很多，浪漫很多。我一点也不贪恋美国的秩序和设施的高质量。社会分配制度的不合理，文化的贫瘠，压迫，剥削，歧视和人心的险恶，使得那一切的安逸都失去了意义。当然将来我也可能周游世界其他国家，比如热爱休闲的欧洲各国，然而中国会永远是我的根据地和故乡。&lt;/p&gt;

&lt;p&gt;由于回国会带来一笔不小的安家开支，在这里我再次鼓励大家为一些高价值的文章付款，比如『怎样写一个解释器』，『编程的哲学』等。每篇文章的收费大概是5美元。之前已经付费的人就不用了，如果你不喜欢或者觉得没有收获的话也请不要付费，我不想欠别人人情。请注意你的付款并不是在无偿募捐或者施舍，这也不是在进行众筹投资，这只是你在为你使用了的好东西付款。我的文章比起很多教科书都要精辟，价值显然比5美元大很多。所以如果你从中收获了益处，按照经济学的原理，你确实是应该付费的。这种费用只针对特定的文章，付费之后并不等于我以后所有的作品你都应该免费获得。付费时请注明是在为哪篇文章付费。谢谢你的理解和支持！&lt;/p&gt;

&lt;p&gt;【&lt;a href=&quot;http://paypal.me/yinwang0&quot;&gt;PayPal付款链接&lt;/a&gt;】&lt;/p&gt;

&lt;p&gt;支付宝二维码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-87cccd26dde8490a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/200&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">leaving-united-states</guid>
<pubDate>Sun, 19 Jun 2016 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
