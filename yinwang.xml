<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>http://www.yinwang.org/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Wed, 12 Apr 2017 07:48:17 +0800</lastBuildDate>
<item>
<title>一个人的罢工</title>
<link>http://yinwang.org/blog-cn/2017/04/11/strike</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;一个人的罢工&lt;/h2&gt;
                            &lt;p&gt;世界上有一种邪恶，叫做“不计回报的付出”。&lt;/p&gt;

&lt;p&gt;看了我上一篇&lt;a href=&quot;http://www.yinwang.org/blog-cn/2017/04/06/update&quot;&gt;文章&lt;/a&gt;之后，可能有人在笑我，既然受到那样不合理的礼遇，干嘛还要再等几个月，等到被微软完全榨干价值才回国？我也是这么想的，所以我已经于昨天开始，无声无息地开始了“一个人的罢工”，我已经停止对微软提供一切工作和服务。罢工会一直进行到微软提供合理的工资，或者裁掉本人为止。&lt;/p&gt;

&lt;p&gt;可以说，微软用极其低廉的价钱，已经从我这里得到了多出许多倍的价值。我写出的代码，其难度和质量，是微软的 principal 级别难以做到的，然而我却拿着 SDEV2 的职称和 senior 的工资。由于职称工资严重的不符合本人水平，随之带来的是尊严的失去。随着时间的推移，我越来越感觉到这个公司的贪婪和狡诈。&lt;/p&gt;

&lt;p&gt;在微软，你没有受到专家的礼遇。事情做的越好越多，越是有人催你做更多的事。你没有感觉到欣赏，感激和尊敬。你只感觉到有人在不断地提醒你：工期将近。为了满足事先设定的日程计划，很多时候你必须加班，周末加班，晚上加班，为了达到所谓的“计划”。&lt;/p&gt;

&lt;p&gt;经济学告诉我们，一分钱一分货。公司付给人固定的工资，他们就应该得到固定数量的服务，而不应该得到更多。设定很紧的工期，导致了很多人过度工作，超时工作。特别像我这样的专家，在短时间内做出太多的价值，却拿跟普通人一样的回报，这使得经济规律失去平衡。&lt;/p&gt;

&lt;p&gt;这种“不计回报的付出”，使得资本家用极少的金钱买到太多的价值。这不仅导致自身的贬值，而且还会导致其他人的失业，所以这种行为损人而不利己。由于这个原因，我必须立即停止对微软提供廉价服务。&lt;/p&gt;

&lt;p&gt;由于这个举措，我可以在两个月之内返回中国。在中国，我将拒绝一切类似不公平的交易，以及任何不尊重人的价值的行为。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">strike</guid>
<pubDate>Tue, 11 Apr 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>更新</title>
<link>http://yinwang.org/blog-cn/2017/04/06/update</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;更新&lt;/h2&gt;
                            &lt;p&gt;几个月没有更新了，有些人来问我为什么，我也没有回他们。显然我不会因为有人来问就写东西，我写东西完全是因为我自己想写，它不受任何人的影响，不管是好心人还是别有用心的。不过现在回答一下，我没写文章是因为我在忙着写很好玩，很有价值的代码。&lt;/p&gt;

&lt;p&gt;我知道这个博客的影响力很大，但我对此所产生的“名气”一点都不在乎。以前公司的同事有时见到我，说：“我听说你在网上很有名啊！介绍几个粉丝来我们公司，我们就走向成功啦！” 我听了苦笑一声。因为对于我来说，“网上有名”其实是一种贬低。想利用我的名气，说明他们不理解我最重要的价值。可能是好心的恭维，然而这种不理解真正价值的恭维，听着很不是滋味。我给公司提供的实实在在的价值，有目共睹，有些人却只能看到名气，这也许说明他们的内心也只有名和利这些东西吧。我王垠没有粉丝，也不需要粉丝。&lt;/p&gt;

&lt;p&gt;虽然我不在乎甚至讨厌“名气”，但我确实在乎“影响力”。我在乎它，是因为很多人能够看到我的文字和想法，这些会对这些人以至于整个社会产生深远的影响。至于这些改变是不是归功到我身上，我根本不在乎。我在乎的是，我的想法真正的改变了很多人的思维，改善了社会风气，最后使我自己也获益。所以也许我最初就不该用自己的真名，而应该使用一个笔名，这样也不至于给我的事业带来影响。但既然这已经发生了，我也只有认命了。我死都不怕，还怕招揽几个恶名吗。实际上名声很难掩盖我真实的能力，就像黄药师的名声，也很难给他造成实际的影响。当然，我的能力是盖世无双的，我可以心平气和的说出这句话，不带半点虚荣。这不需要任何人的认可，因为世界上已经没有任何人有资格来认可我。&lt;/p&gt;

&lt;p&gt;这种奇妙的能力，不但最初在 Google 得到了体现，在 Coverity，Sourcegraph，Shape Security，一次次的巧妙发挥，最近又再一次的在微软得到了发扬光大。我不得不说，微软是少有的踏踏实实，用心做技术的公司，很少有瞎指挥的情况。也只有这样的公司，才可能从最底层开始做独立的技术。在微软，我的团队的产品是一种企业级存储设备，名叫 StorSimple。这东西看似跟我的特长程序语言（PL）关系不大，然而我从来就没有局限于 PL，我的洞察力深入到了计算机科学的各个领域。这是一种艺术，是不局限于领域的才能。任何我接触到的东西，都被揭示出其本质，揭开肤浅复杂的表面现象，被改造得更加简单，更加可靠和精密。&lt;/p&gt;

&lt;p&gt;在微软，我从头构造的基于 B+ 树的核心数据结构，被巧妙地集成到一个复杂的含有大量并发同步问题的系统里面，正在经受企业级数据的千锤百炼，从来没出过差错。存储设备是一个几乎完全不可以出 bug 的领域，因为一旦用户的数据因此丢失或者发生错误，后果将是灾难性的，不可逆转的，不是重启一下机器就可以了结的。用户会离你而去，再也不会回头，这跟飞机因质量问题而坠毁的后果差不多。&lt;/p&gt;

&lt;p&gt;不客气的说，我做的这玩意还真是这产品的核心部件，你可以把它想成是一个“云”里的文件系统（file system）。这是之前走掉的一个 architect 留下来的精(Lan)品(Tanzi)，复杂不堪，还可以用，但它简陋的数据结构无法支持大规模的数据量。把它精确地换成像 B+ 树这么复杂的数据结构，就像做个心脏置换手术，不能出一点差错，不能影响其它组件的运行。这是微软这方向上经验丰富的 principal engineer 们联手也难办到的事情。因为这个原因，再加上它至关重要的核心地位，所以 architect 走后一直没人敢碰这块代码。哎，为什么每次我都接手这样的事情……&lt;/p&gt;

&lt;p&gt;光是写一个没有 bug 的 B+ 树，其实都够让绝大部分的程序员汗颜，更不要说把它集成到 StorSimple 的“异构云”（hybrid cloud）构架里面去。有个写过 B+ 树的 principal engineer 喜欢跟我咋呼要“先写测试”，可我就是直接两天把代码给写出来了，然后再写了一个测试，就已经到了无懈可击的地步。代码优雅而通用化，不带有任何业务逻辑，可以原封不动用到其他地方，比如数据库索引。像 B+ 树这么复杂的数据结构，你还真是很难把它写得简单正确还通用，但我洞察到了精髓，所以稍加思索就办到了。这是我平生第一次写 B+ 树。&lt;/p&gt;

&lt;p&gt;微软有一些厉害的 principal engineer，他们的 B+ 树代码我看过了。实话说吧，虽然可以用，但非常繁复没法看，很难确信它是正确的。每次用到新的地方，你都得改动挺多代码才行，不能作为“库代码”来调用。而且你一改可能就给改错了，难怪跟我说需要很多很多的测试，还说要先写测试再写代码什么的…… 当然我说这些完全没有贬低微软工程师的能力，有个会写 B+ 树的 principal engineer 跟我关系相当好，初期还给了我挺好的参考资料，所以我无意贬低他。不过呢，写代码不能超越王垠，是再正常不过的事了，不是吗？所以当然不是耻辱 :P 相比其它肤浅的公司（Google，Facebook……），微软的好些人显然是有两刷子的，兢兢业业踏踏实实的在做自己的工作，而且在必要的时候给了我一些启发，人也相当好。可是在代码的优雅，简单和可靠性上，世界上还真没有人可以跟王垠抗衡。&lt;/p&gt;

&lt;p&gt;微软工程师确实有很多好人，不过呢公司的官僚系统跟人其实是两码事。我也看到了，我创造的价值已经大大的高于我的薪酬。微软这公司给我的级别（别去查了，是 SDEV2）和薪资，完全就是一个笑话。最初就是忽悠的，我在之前公司就已经是 senior，早就已经对这 title 很不满意了，还给我降一级，说你知道微软要升到 senior 级别需要多少经验吗，你要有微软的经验才行，不是其它地方的经验！说先给你个低点的 title（当然工资比以前高），进来半年以内升职，到现在 9 个月了没有一点动静，却跟你说什么：“Review 的时间还没到，要等到 9 月去了。” 去年 7 月中进来的，年底 bonus 都没有，说：“公司规定不满半年的没有 bonus，自己看看手册吧。” 我管你公司规定如何，我差几天就工作了半年，提供了这么多价值，一点 bonus 都没有，还得等一年？你玩我吧！&lt;/p&gt;

&lt;p&gt;所有这些什么“公司规定”，其实都是借口，是“catch”，它们就像有些信用卡条款下面的小字，你不仔细看就以为小便宜就在眼前，结果根本不是的。那些小字写的是，你必须满足这样那样的条件才可以！所有这些诱惑的作用，就是把你变成一头拉磨的驴子。在你的头顶上架个杆子，上面挂着食物。你想吃到这眼前的食物，可是你每走一步这食物就随着你往前挪一步，所以你就总也吃不到，只是不停地给别人拉磨。总有人传言说，微软升职好快哦，看那谁进来那么低职位，很快就变成 principal 了。轮到你的时候，就发现完全不是那回事。等你去查，发现那个人升职根本就没那么快，好几年了才升了一级。于是你醒悟了，原来这些都是广告吧？&lt;/p&gt;

&lt;p&gt;而且还有人时不时的提醒你一下，好像在说，你不应该得到我应有的回报。比如：“看人家这个（拿L1签证工作的廉价劳动力）印度小妹，也做出了很了不起的成绩，人家才这个级别……” 很是拿 title 当回事，张口闭口“看看人家某 principal……”，“你要是 principal 才可以 remote……” 还喜欢引用某 principal 的话，奉为真理一样。吃饭的时候，跟我关系不错的 remote principal 本来过来跟我坐在一起，然后就被坐在另一桌的大老板叫过去了，说：“过来过来，别跟他们浪费时间。” 这 principal 只好跟我道歉之后走掉了。于是几个 principal 单独一桌，跟大老板一起吃，我和其他人另外一桌。这大老板呢，自以为级别高点（partner），从来不正眼看人，也从来不直接跟我谈话。好像很是高高在上，从几个台阶上面看我的样子。&lt;/p&gt;

&lt;p&gt;本来自己做不出来的东西，却偏要显得自己能做，以保持自己的权威，显得在指导你似的。有次居然当众对我说，你遇到了困难要告诉大家，我们这么多经验，随便帮你看一下就解决了。哈哈，我倒是想看看王垠都被卡住的问题，你们怎么解决！实话说吧，那几个 principal 经常都是在受我指导，走弯路的时候都是我在跟他们争论，及时制止，虽然有些时候不听，继续走弯路。当然，管理层绝对不会忘记的一件事情就是督促写注释，写测试，而且用的是对奴隶说话的口气，说：“你的代码注释太少了，要是你走了就没人能理解了。要是你想能放假，那就要写注释，否则没人能帮你维护代码，你就永远放不了假！” 当然，语气是调侃而温和的，然而听到好几次之后你就发现，这里面的含义是狠狠的，真心的。&lt;/p&gt;

&lt;p&gt;这一切都让我心里很不是滋味。这种情况，不仅我这样顶级专家难以接受，这是任何一个文明人都难以接受的。我压根就从来没把 title 当回事，我对待 principal engineer 和印度小妹是同样的尊重。张口闭口 principal，那倒是叫你的 principal engineer 写出可以跟我匹敌的代码来啊？实话说吧，门都没有。世界上就只有一个人可以做到这个事情。微软的所有 title，全世界公司和大学的所有 title，还真没有一个是可以衡量本人的。管你什么 principal, partner, distinguished…… 只要跟我一聊，我就知道他脑子里有多少货。资本主义根深蒂固的劣根性就是利用这些标签，肆无忌惮的贬低人的价值，拿白菜的价钱买白粉。你稍微谦虚一点，就有人真把自己当回事了，开始用“老资格”的口气说话。这不是微软一家的问题，然而不管在哪里出现都是值得鄙视的。&lt;/p&gt;

&lt;p&gt;本来进微软的时候我就想，这是我在离开美国之前想看的最后一个公司。所以呢，我的微软之行已经达到了它的目的，也快要到达它的尽头。对于 Google 我只有鄙视，而对于微软，我觉得技术能力还是有那么几刷子的。如果 Google 得分是 D 的话，那微软倒是可以得 B。然而在这里，技术能力确实没法得到公平的回报和尊重。过了这么几个月，我觉得也该是寻求自身价值应有回报的时候了。在美国待了十年，我已经很清楚，美国根本不是一个尊重事实和人才的国度。从来都不是，换了总统也不会是。这个虚伪而邪恶的国家，正在继续走向昏庸和毁灭。这一切，我已经看得很透了。&lt;/p&gt;

&lt;p&gt;我的心，已经飞回到了中国，飞回到了家乡，飞到了北京。我每天都在想象跟老朋友们坐在一起喝茶聊天，感受城市生命的律动。这一切，都是在美国永远得不到的，我命中注定要在中国生活。当然我知道国内的人也很复杂，很多制度不健全，但中国之大，我相信会遇到很多靠谱的人。我不会再给任何公司工作。我会创造一个伟大的公司，它会创造世界上最精致的产品，它会给真正有价值的人相应的回报和尊重。由于一些现实的问题，回国的日子还要等几个月，不过应该在年底之前。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">update</guid>
<pubDate>Thu, 06 Apr 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>精英主义的灭亡</title>
<link>http://yinwang.org/blog-cn/2017/01/02/elitism</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;精英主义的灭亡&lt;/h2&gt;
                            &lt;p&gt;精英主义是一种精神疾病，是一种心理变态。得了这种病的人，有不同的轻重程度。程度轻的人，也许只是张口闭口的“名校”和“牛人”。而程度重的人，最后可能成为反人类的战争罪犯。希特勒就是一个严重的精英主义者，他认为自己是精英，“劣等民族”的人都应该死。&lt;/p&gt;

&lt;p&gt;这些所谓的精英，在智力上，体力上，学识上，人格上，都没有什么值得称道的地方。他们被称为“精英”，往往是通过家族关系，或者舔人屁股，玩弄权术。还有些人，尽其所能包装自己，把自己跟名人或者富豪挂钩，写回忆录，请人给自己写传记，这样别人就以为他是天才，是杰出人物。而他们其实并没有什么特别，也许还不如一般人。&lt;/p&gt;

&lt;p&gt;精英们最在行的事情，其实是拉关系，互相吹捧，唱高调，包装自己。他们在心理上是弱小的，他们必须依赖于名校或者大公司的牌子，依赖于校友的认可，依赖于那些身居高位的人的赞许和提拔。他们很多人不过是某些幕后黑手的木偶人而已。有句话说得好：宠为下，得知若惊，失之若惊。如果你需要身居高位的人的认可，那么你其实是一个卑贱的人。&lt;/p&gt;

&lt;p&gt;精英主义者集结的地方，被中国人叫做“世界一流大学”：哈佛，耶鲁，&lt;a href=&quot;http://www.yinwang.org/blog-cn/2014/01/04/authority&quot;&gt;Cornell&lt;/a&gt;…… 进入这些大学的人，一般都是通过关系或者金钱，却吹捧自己是因为才能出众而进入那些学校。等你亲自进去一看，发现里面的教授很少有真知灼见，上课照本宣科，学生忙着抄笔记，学得一知半解，作业互相抄袭，考试焦头烂额，蒙混过关。&lt;/p&gt;

&lt;p&gt;这些教授倒是对宣传工作相当在行，屁大点研究，总要让纽约时报之类的搞一下政治宣传，然后在院系主页上贴个告示，看哪我们教授的研究被纽约时报报道了！这些人的实际水平，比起很多州立大学里潜心做研究的不知名学者，差不止一个档次。很多中国人都不知道，纽约时报，华盛顿邮报，CNN 之类，其实都是婊子媒体，出钱或者有关系就给你发文拍片。纽约时报的老板就是个毒贩子，黑帮老大。&lt;/p&gt;

&lt;p&gt;实际上，“世界一流大学”这个名词，你只能在中国听到。在美国没有人使用这种词汇，甚至像“著名的”（prestigious）这种词都很少用。如果你进入普通的州立大学，会发现没有人在乎哈佛，耶鲁，Cornell 这些“常春藤联盟”。如果你老是提这些名字，会招致人的反感。因为这些大学的人都知道精英学校是什么东西，根本不屑于提到他们。&lt;/p&gt;

&lt;p&gt;精英大学不但以无能著称，它们比你现象的还要可怕许多。这些学校里面一般都存在一些“秘密组织”，比如 Cornell 的 &lt;a href=&quot;https://en.wikipedia.org/wiki/Quill_and_Dagger&quot;&gt;Quill and Dagger&lt;/a&gt;。这些组织就是精英聚集的场所。为什么要是秘密的呢？因为他们会进行一些见不得人的犯罪活动，导致成员之间互相抓住把柄，从而形成共生死的团伙。甚至有些名校的&lt;a href=&quot;https://www.youtube.com/watch?v=cKy2c-itZEg&amp;amp;feature=youtu.be&amp;amp;t=1255&quot;&gt;整个学院&lt;/a&gt;，都被罪犯花重金包下来，成为培养他们接班人的摇篮。所以美国的名校，其实跟娼妓没什么两样，名气越是大的越是这样。&lt;/p&gt;

&lt;p&gt;很多进入白宫的精英，就是从这种名校秘密组织出来的，比如臭名昭著的克林顿国家安全顾问 &lt;a href=&quot;https://en.wikipedia.org/wiki/Sandy_Berger&quot;&gt;Sandy Berger&lt;/a&gt;，就是 Quill and Dagger 的成员。在 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/12/01/september-eleven&quot;&gt;9/11 恐怖袭击&lt;/a&gt;发生之后，Sandy Berger 进入国家档案馆，偷走关于克林顿与 9/11 之间关系的资料原版，并且销毁。这种销毁证据的做法，说明克林顿跟 9/11 肯定有扯不清的关系。&lt;/p&gt;

&lt;p&gt;从这个现象，你也许可以理解为什么很多精英大学容易出现学生自杀的事件。比如上次新闻报道说，一周之内有三个学生从 Cornell 校内同一座桥上跳下去&lt;a href=&quot;http://www.nytimes.com/2010/03/17/education/17cornell.html&quot;&gt;自杀&lt;/a&gt;，结果后来派了警察在桥上日夜巡逻。三个学生几乎在同一时间想不通，在同一地点寻短见，这也未免太巧了点吧。如果你研究过历史就会知道，美国很多所谓的自杀案件其实都是谋杀，只是用自杀来掩盖真相。所以这些学生到底是自杀还是谋杀，谁都说不清楚。想要把孩子送去精英大学读书的人，真的应该考虑一下他们的安全了。&lt;/p&gt;

&lt;p&gt;在精英大学上过研究生的人，大可不必觉得我是在嘲笑你们。精英主义者心目中的所谓“校友”，一般只包括本科阶段的同僚。如果你跟我一样在“二流学校”本科毕业，进入精英学校读研究生或者博士生，他们不会把你当成校友。相反，他们会歧视你，觉得你是去那里打工的，甚至嘲笑你好像什么都不懂，怎么进来的。这是因为本科是塑造人格和价值观的主要阶段，如果你的本科生活是在其它学校度过的，那么你并不具有这种“精英品质”，就算你之后进去读完博士也不会改变这个观念。这就是为什么有些中国人在国内本科都快毕业了，却退学去美国精英大学再读一个本科，因为这些人很想要成为精英，进入“主流社会”。&lt;/p&gt;

&lt;p&gt;然而现在我们已经看清楚了，美国的主流社会和精英们的本质，我们知道了他们在干些什么样的事情。所以如果你不是精英大学官方意义上的校友，反倒没有了这层嫌疑需要洗清。&lt;/p&gt;

&lt;p&gt;美国精英们的“宣传部”，叫做好莱坞。好莱坞通过形象包装，形成偶像崇拜，好莱坞电影就是给人们洗脑的工具。好莱坞明星们给人们灌输错误的标准：审美标准，道德标准。说实话，好莱坞这么多女影星走红地毯，就找不出几个好看的。可是由于他们给人洗脑，以至于很多天生丽质的女生从小耳濡目染，居然觉得好莱坞那些丑女明星比自己美，去模仿她们的化妆和衣着样式，甚至想去做整形手术，这样可以变得更像她们。这些美丽的女孩因为明星崇拜，失去了对自己的尊重和自信，真是可惜。&lt;/p&gt;

&lt;p&gt;说到道德，你可能已经听说了，好莱坞的明星们几乎每一个都吸毒，很多还进行更可怕的犯罪活动。有一种极其变态的犯罪活动，叫做恋童癖（&lt;a href=&quot;https://en.wikipedia.org/wiki/Pedophilia&quot;&gt;pedophilia&lt;/a&gt;），或者直接一点，叫做性虐儿童（child sex abuse）。我们都听说 &lt;a href=&quot;https://youtu.be/iZ0B4jjNdjM?t=2963&quot;&gt;Michael Jackson&lt;/a&gt; 被指控强奸男童的事，后来又莫名其妙死了，这表现出团伙成员之间的内斗现象。有趣的是，好莱坞有很多的明星最后都说是自杀或者吸毒过量死亡。他们到底是自杀还是谋杀，也很值得怀疑。&lt;/p&gt;

&lt;p&gt;恋童活动在好莱坞非常的&lt;a href=&quot;https://www.youtube.com/watch?v=roW238dfUUk&quot;&gt;普遍&lt;/a&gt;，它还经常跟邪教仪式（satanic ritual）结合在一起，这些人会在仪式上当场宰杀儿童用来“祭祀”。这种丧尽天良的可怕罪行，在很多其他国家是要判死刑的，美国政府却几乎完全不管，因为白宫的官员们在干同样的事情。这不是危言耸听，如果你仔细研究，就会发现这就是全世界的精英团伙里面正在进行的：&lt;a href=&quot;https://www.youtube.com/watch?v=ekejhDu-biQ&quot;&gt;美国白宫&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=NUfJXdMIRGw&quot;&gt;英国王室&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=roW238dfUUk&quot;&gt;好莱坞&lt;/a&gt;，&lt;a href=&quot;https://en.wikipedia.org/wiki/Catholic_Church_sexual_abuse_cases&quot;&gt;天主教会&lt;/a&gt;，世界一流大学……&lt;/p&gt;

&lt;p&gt;美国这几年每年有超过 40 万儿童失踪，每年车祸死亡的人数才 3 万多。失踪儿童数量比车祸死亡人数大十倍以上，这是不正常的。这些失踪的儿童到哪里去了？另外，美国有些儿童领养中心和孤儿院，被查出在从事贩卖儿童性奴（child sex trafficking）的生意。这些人还在落后和受灾国家办&lt;a href=&quot;http://www.usapoliticstoday.com/hillary-clinton-kids-wikileaks-nuke-hillary-see-potential-clinton-foundation-sex-trafficking-ring&quot;&gt;孤儿院&lt;/a&gt;，说是人道主义援助，结果被当地警察发现他们带走的小孩都是有父母的…… 你不觉得毛骨悚然吗？&lt;/p&gt;

&lt;p&gt;反正看到这一切的时候，我的世界观都被颠覆了。我真希望这只是一场还没醒来的噩梦，可是无数的证据和证人都说明这就是现实！&lt;/p&gt;

&lt;p&gt;精英们一直以来都依靠媒体来掩盖自己罪恶的真相，给人洗脑，冠冕堂皇的让人崇拜。而这次的美国总统大选，导致了这些主流媒体的轰然倒塌：CNN，华盛顿邮报，纽约时报，时代周刊，BBC，…… 我们现在知道，这些媒体都是被庞大的恶势力网络控制的。&lt;/p&gt;

&lt;p&gt;在互联网发达之后，精英们也利用网络媒体来对公众进行洗脑。他们的帮凶包括 &lt;a href=&quot;https://twitter.com/wikileaks/status/809305627319291906&quot;&gt;Google&lt;/a&gt;，Facebook，Twitter，…… 这些社交媒体不但在政治上帮助这些精英搞宣传，而且帮助他们屏蔽对他们不利的真相，把这些真相都叫做“&lt;a href=&quot;https://www.facebook.com/zuck/posts/10103253901916271&quot;&gt;假新闻&lt;/a&gt;”。而事实是，CNN 之类的主流媒体才是假新闻。如果你仔细研究一下，会发现 Facebook 和华盛顿邮报的幕后支持者，其实是作恶多端的 &lt;a href=&quot;https://www.youtube.com/watch?v=oFH3uLuNL5Y&quot;&gt;CIA&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;真正独立而自由的“另类媒体”，比如 &lt;a href=&quot;http://www.infowars.com/&quot;&gt;InfoWars&lt;/a&gt;，&lt;a href=&quot;http://www.wnd.com/&quot;&gt;Breitbart&lt;/a&gt;，&lt;a href=&quot;http://www.prisonplanet.com&quot;&gt;Prison Planet&lt;/a&gt;，再加上异常强大的 &lt;a href=&quot;https://wikileaks.org/&quot;&gt;WikiLeaks&lt;/a&gt;，通过多方面的证据，揭示了精英们的真相。是这些敢于说真话的人，用他们的&lt;a href=&quot;https://en.wikipedia.org/wiki/Andrew_Breitbart#Death&quot;&gt;生命&lt;/a&gt;和&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/22/assange-donation&quot;&gt;自由&lt;/a&gt;，换来了世界局势的转机，同时导致了精英主义走向灭亡。现在听说某人是“精英”，我都得先考虑一下他跟这些龌龊的事情有没有关系，上网搜索调查一下。&lt;/p&gt;

&lt;p&gt;未来的世界属于每一个平凡的人，只是他们还在熟睡，旁边的吸血鬼们正在黑暗中选择他们的猎物…… 当真相的阳光照进来，当人们醒过来的时候，就是精英统治的时代结束的时候。如果你现在还以为有任何人高人一等，你的心里还存在某种偶像，你还以为世界上有&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/10/18/turing&quot;&gt;天才&lt;/a&gt;存在，你还很在乎好莱坞明星，或者 &lt;a href=&quot;https://www.youtube.com/watch?v=oFH3uLuNL5Y&quot;&gt;Zuckerberg&lt;/a&gt; 之类小丑说的话或者做的事，你还在梦想有一天把孩子送到哈佛念书，进入“上流社会”，请仔细再看看这篇文章和相关的视频，你会意识到这些想法有多么的愚蠢。&lt;/p&gt;

&lt;p&gt;你完全没有意识到自己的价值，你没有意识到身边的普通人的价值，你没有发现幸福就在身边。你只是生活在别人为你设计的梦里，追求那些他们让你追求的东西，最终却发现你出卖了灵魂。醒来的过程是痛苦的，但醒来后的未来是美好的。被精英们用欺骗手段收走的力量，就要回到人们的手里！&lt;/p&gt;

&lt;p&gt;（写这样一篇文章挺费神的，说真话是需要一些胆量的，所以如果你觉得开了眼界的话，请考虑付款 $3。谢谢！）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">elitism</guid>
<pubDate>Mon, 02 Jan 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>9-11 袭击的真相</title>
<link>http://yinwang.org/blog-cn/2016/12/01/september-eleven</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;9-11 袭击的真相&lt;/h2&gt;
                            &lt;p&gt;9-11 袭击一直以来都是一个谜。是谁在幕后策划，它为什么会发生？美国政府对此进行的调查都是遮遮掩掩，很多证据藏起来不给人看，借口说是“国家机密”。这种鬼鬼祟祟的行为非常可疑，所以网络上出现了很多的谣言和“阴谋论”，说这是美国政府的人自己干的。然而这些东西很少有确凿的证据，所以久而久之，人们对真相失去了兴趣。每当跟美国人提到“9-11真相”，他们的反应一般都是，我不相信美国政府可能做出这么邪恶的事情！&lt;/p&gt;

&lt;p&gt;然而最近我发现了这部摄制于 2014 年的纪录片『&lt;a href=&quot;https://www.youtube.com/watch?v=8DOnAn_PX6M&quot;&gt;9-11：新的珍珠港&lt;/a&gt;』，它打破了 9-11 的迷雾。跟『华氏9-11』之类的阴谋论不同，『新珍珠港』出自许许多多追求真相的专家：飞行员，土木工程师，结构工程师，爆破专家，甚至世贸大厦的设计者自己…… 它从严谨的证据，数据和科学的角度出发，通过常识和科学理论，指出了美国政府官方报告与实际现象的严重偏差，从而引导人们认识到这背后的可怕真相。再加上一个&lt;a href=&quot;https://www.youtube.com/watch?v=fAawF22QUMs&quot;&gt;前 CIA 特工的证实&lt;/a&gt;，还有一些&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的回忆，我发现『新珍珠港』里面的大部分猜想都是正确的。&lt;/p&gt;

&lt;p&gt;大家都没猜错，9-11 确实是美国政府自己策划和执行的。然而具体的细节和操作，其实比我们想象的还要可怕和残忍许多，以至于知道了之后你可能会做噩梦……&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;9-11 是美国政府，军方，CIA 联合策划的，用于发动战争的伪旗行动（false-flag）&lt;/li&gt;
&lt;li&gt;撞击世贸大厦的不是波音客机，而是有两种可能：

&lt;ul&gt;
&lt;li&gt;军方遥控的大型无人机（drone）&lt;/li&gt;
&lt;li&gt;根本没有飞机，而是激光全息成像或者电脑动画&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大楼不是因为飞机撞击和燃烧而垮掉，而是通过可控爆破（controlled demolition）&lt;/li&gt;
&lt;li&gt;可控爆破使用的是美国军方特有的武器：纳米铝热炸弹 （nano thermite bomb）&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;下面我就把这些片子里面最震撼我的部分摘要一下：&lt;/p&gt;

&lt;h3&gt;可控爆破（Controlled Demolition）&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/8DOnAn_PX6M?t=9621&quot;&gt;&lt;img src=&quot;http://www.yinwang.org/images/demolition-evidence.png&quot; width=&quot;400&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2001 年袭击发生的当天，我看了电视就觉得这很不可思议：飞机撞了楼的上面，下面楼体看起来完好无损，为什么整栋楼后来会从上到下，垂直坍塌下去，一瞬间就消失了？当时媒体给我们的解释是，世贸大厦建造时钢筋用得太少，强度不够，所以被飞机撞伤了结构，再加上飞机燃料的高温，就散架了。你看&lt;a href=&quot;https://www.youtube.com/watch?v=ZD69sP51u-s&quot;&gt;帝国大厦&lt;/a&gt;当年被 B-52 轰炸机撞了都没事，因为它钢筋用得多…… 我当时还真的被忽悠了！&lt;/p&gt;

&lt;p&gt;现在各种证据都显示，世贸大厦的钢架结构其实非常结实稳固，根本不亚于帝国大厦。飞机自身的动能和燃料的温度，都远远不够软化世贸大厦的结构。在 9-11 之前，世界上从来没有一栋钢结构的大厦因为着火而垮塌过。有的大楼着了火，全部烧焦了也都还站在那里。就算你要塌，也不能那么规整地垂直塌下来啊，总要偏一点吧？而且由于材料的阻力，下降速度不可能那么快。你再仔细看它坍塌的视频，就发现这跟拆楼所用的“可控爆破”一模一样，楼体以自由落体的速度，不偏不倚垂直塌下去，就像完全不受阻力一样。这是一架波音飞机撞上去完全不可能达到的效果。唯一能达到这个效果的作法，是使用许许多多的炸弹，在非常精确的时间点引爆，也就是可控爆破的做法。&lt;/p&gt;

&lt;p&gt;『新珍珠港』提供了充足的证据，证明这是经过预谋和精密设计的可控爆破。&lt;/p&gt;

&lt;h3&gt;纳米铝热炸弹（Nano-Thermite Bomb）&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/911-molten-steel.png&quot; width=&quot;172&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/911-thermite.png&quot; width=&quot;210&quot;&gt; &lt;img src=&quot;http://www.yinwang.org/images/911-bodies.png&quot; width=&quot;300&quot;&gt;&lt;/p&gt;

&lt;p&gt;据另一些视频（&lt;a href=&quot;https://www.youtube.com/watch?v=rnbMjAN7Bws&quot;&gt;视频1&lt;/a&gt;，&lt;a href=&quot;https://www.youtube.com/watch?v=GOb92R34jxo&quot;&gt;视频2&lt;/a&gt;）的介绍，为了更有效的弄垮这三栋楼，他们使用的是铝热炸弹，而不是普通的 TNT 之类的炸药。这符合一位&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的口述，在第一个爆炸之后，他看到有橙色的，熔化的钢水从楼的表面流下去。经过 CIA 特工&lt;a href=&quot;https://youtu.be/fAawF22QUMs?t=1498&quot;&gt;证实&lt;/a&gt;，以及化学专家的&lt;a href=&quot;http://www.taliban-norge.no/wp-content/uploads/2013/04/%E4%BB%8E%E4%B8%96%E8%B4%B8%E4%B8%AD%E5%BF%83911%E7%81%BE%E9%9A%BE%E4%B8%AD%E7%9A%84%E5%B0%98%E5%9F%83%E7%89%A9%E9%87%8C%E5%8F%91%E7%8E%B0%E7%83%88%E6%80%A7%E7%82%B8%E8%8D%AF.pdf&quot;&gt;采样研究报告&lt;/a&gt;，这种炸弹是美国军方研制的一种非常先进的武器，成分是纳米铝热材料。这东西在 400 多度的普通温度就可以被激发，进行异常剧烈的铝热反应，产生 3000 多度的高温。这是火山喷发出来的熔岩温度（700-1200 度）的 2-4 倍。难怪有人把它称为“&lt;a href=&quot;http://m.akjunshi.com/article/117609_4.html&quot;&gt;来自地狱的火焰&lt;/a&gt;”，因为自然界很难产生这么高的温度，飞机的燃料也完全不可能到达这种温度。&lt;/p&gt;

&lt;p&gt;也就是这种东西熔化了大量的钢铁和水泥，导致整座大楼垮塌。后来这些熔岩一样的钢材和水泥，滞留在世贸大厦的废墟下面，三个月之后才冷却下去。这就是为什么死了 2800 人，最后只发现不到 300 具完整的尸体，因为大部分人都被炸得粉碎，或者被蒸发掉了！由于铝热炸弹对于人类极其残忍，联合国已经在 1980 年通过『禁止和限制使用，燃烧武器的议定书』，禁止在战争中使用铝热炸弹。然而这次更为超级的“纳米铝热炸弹”，竟然被用在了本国平民身上，其心狠手辣之程度，让人毛骨悚然。&lt;/p&gt;

&lt;h3&gt;无人机（drone）猜想&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/911-boeing-diagram.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;两架飞机撞击大楼的时速大概是 580 mph（英里/小时）。而波音客机在低空的最高时速（VMO）只可能有 400 mph。这两架飞机在低空超过了波音 767 在高空的巡航速度（529 mph）。在低空飞行时，空气阻力会很大。波音 767 的引擎不可能提供这么大的推力。就算你有办法超过 VMO，机身也会被空气阻力给拖散架。很多开了几十年客机，成千上万小时经验的飞行员都说，速度超过 VMO 150 mph 以上，是根本无法控制的。没有人可以这样高速低空飞行，准确的操纵波音客机去撞大楼。&lt;/p&gt;

&lt;p&gt;另外，客机的外壳都是很轻的铝合金材料，强度完全不是世贸大厦外面那层钢架的对手，所以根本不应该可以完全撞进去，至少应该有一部分掉在外面。所以有人猜想，这两架飞机很可能根本不是客机，而是美国军方遥控的，具有加强机身和特殊引擎的军用无人机（drone）。另外经过&lt;a href=&quot;https://www.youtube.com/watch?v=o551CQFAMKI&quot;&gt;视频分析&lt;/a&gt;，也发现在飞机撞上大楼之前，楼体上有闪光出现，说明可能有炸弹同时爆炸，给飞机开路。&lt;/p&gt;

&lt;p&gt;关于这个问题，航空界人士联合起来，进行了一次深入的&lt;a href=&quot;https://www.youtube.com/watch?v=-Laaq44SDgg&quot;&gt;调查&lt;/a&gt;，搜集了许多的雷达，录音数据，发现“客机撞大楼”，确实有很多不符合数据的地方。另外，美国军方之前有一个项目叫 Operation Northwoods，使用无人机跟在客机下面，击毁客机，然后假冒成客机，继续飞行…… 有些专家觉得，这就是 9-11 发生的事情。&lt;/p&gt;

&lt;h3&gt;全息成像和电脑动画猜想&lt;/h3&gt;

&lt;p&gt;另外一些飞行专家指出(&lt;a href=&quot;https://www.youtube.com/watch?v=YQBlv7sZGVE&quot;&gt;视频&lt;/a&gt;)，遥控大型客机高速去撞大楼，也是非常困难而且开销太大。另外，波音客机在如此的低空高速飞行，所有人都应该能听到震耳欲聋的飞机噪音，音量应该超过摇滚音乐会最前排，而现场的新闻报道，&lt;a href=&quot;https://www.youtube.com/watch?v=DQbEuBgAKso&quot;&gt;目击证人&lt;/a&gt;的口述，都没有任何这样的迹象。所以他们怀疑这两架所谓的“飞机”，可能根本就不存在。他们猜想，美国军方可能采用了激光全息成像制造幻觉。&lt;/p&gt;

&lt;p&gt;然而我觉得，激光全息技术发展到今天，也不可能在半空中制造出一个飞机那么大的物体，因为要在半空中制造出不透明的物体，要求你能够改变光线在任意位置的传播方向，那似乎是不可能的。其实有一个更容易的办法可以达到这个效果。你想一想，飞机撞大楼发生在仅仅一秒种之间，为什么有几个人运气就那么好，摄像机正好对准那个方向，拍到了那个镜头？&lt;/p&gt;

&lt;p&gt;所以我觉得这些视频的来源很值得怀疑。也许这些正好拍到飞机的人，全都是这个阴谋的参与者，而他们的视频，全都是事先用电脑动画合成好的，只不过到时候拿出来作为现场录像。这种做法成本很低，然后只需要在大楼里面装上炸弹就可以了。&lt;/p&gt;

&lt;h3&gt;借口：无能&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/personnel-excuse.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;美国政府和军方，喜欢采用“无能”作为借口，来解释他们“故意”的行为。在袭击发生当天，美国空军特别组织了一次训练，把几乎所有的战斗机都调到很远的地方去，只剩下 4 架战机防守东部领空。而且在这之前不久，他们对国防部的人员进行了重大调整，换了几个新手担当重任，结果出事的时候发现只能找到新手，但新手根本不知道该怎么办。另外，还有故意报错方位之类的事情。&lt;/p&gt;

&lt;p&gt;这看似犯了“错误”，然而其实是一种非常狡猾的制造借口的方式。这样飞机撞了楼之后，他们就可以说：“哎呀，不是我们不想拦截他们，只是措手不及……” 美国政府在&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/20/hillary-emailgate&quot;&gt;本加西&lt;/a&gt;恐怖袭击发生的时候，也是同样的作法。&lt;/p&gt;

&lt;h3&gt;借口：对民航飞机不设防&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/washington-missle.png&quot; width=&quot;400&quot;&gt;&lt;/p&gt;

&lt;p&gt;美国政府的另一个借口，是说军方的防空设施只能防御战斗机和导弹之类的东西，而不能防御被劫持的客机。然而事实是，在通常情况下，如果客机偏离规定的航道，并且没有应答的时候，FAA 会立即通知五角大楼，在几分钟之内派出战斗机去拦截民航飞机。另外华盛顿特区附近，有一个“特别空中管制区”，任何飞机要进去必须事先经过许可，不然就会被打下来。附近不但有好几个空军基地，海军基地，还有专门的地对空导弹，随时可以打下飞向五角大楼或者白宫“禁飞区”的可疑飞行物。所以显然，这种理论完全站不住脚。除非美国政府自己有阴谋，这种事情根本不可能发生。&lt;/p&gt;

&lt;p&gt;另外，从这个&lt;a href=&quot;https://www.youtube.com/watch?v=-Laaq44SDgg&quot;&gt;视频&lt;/a&gt;里的雷达和对话记录，你可以发现 FAA 和空军基地在接到劫机报告的时候，在故意放任，踢皮球，比电话客服还漫不经心。这是报告劫机，本来应该是肾上腺素上升的时刻，然而接听人最后一句话居然是慢条斯理的：“…… 好的，我看看我们能做些什么…… 请问还有什么其它事情可以帮助您吗？” 这不是明摆着是怎么回事了吗！&lt;/p&gt;

&lt;h3&gt;各种其他漏洞和疑点&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;世贸大厦垮塌之后，还没有进行任何调查，就立即有卡车和挖掘机开始运走它的废墟。这是匆忙销毁证据的做法。&lt;/li&gt;
&lt;li&gt;FBI 和媒体报告说飞机上的人给家人打了电话，而在那个高度和速度，手机是不可能有信号的。&lt;/li&gt;
&lt;li&gt;五角大楼被撞之后的形状，不像是被波音 757 那么大的飞机撞的，完全看不见飞机残骸。附近建筑上的 80 多个摄像头的监控录像都被 FBI 藏起来，无法证实波音 757 真的去了那里。&lt;/li&gt;
&lt;li&gt;五角大楼被撞的那个位置，不久前花了两亿多美元进行了加固，而“飞机”其它可以死更多人的位置不撞，正好撞了那个非常牢固的地方。&lt;/li&gt;
&lt;li&gt;93 号航班坠毁的地点，看不到飞机的残骸和应该有的火焰。&lt;/li&gt;
&lt;li&gt;被指控的那几个恐怖分子，当天根本没在任何机场的监控录像里出现过。&lt;/li&gt;
&lt;li&gt;恐怖分子的飞行教练指出，这人开小飞机都不合格，完全不可能有能力操纵波音客机这种超级复杂的庞然大物。&lt;/li&gt;
&lt;li&gt;坠毁飞机的残骸，从来没有经过重新组装还原的“航空界标准”调查过程。&lt;/li&gt;
&lt;li&gt;五角大楼一名官员作证，显示国防部早就知道有飞机要撞五角大楼，却故意不打下来。然而他作证的录音被 FBI 从网站上去除，在官方报告也没有记录。&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;死亡人数仍然在增加&lt;/h3&gt;

&lt;p&gt;9-11 给成千上万的人带来了灾难。由于 9-11 死亡的人数，直到今天都还在增加。由于世贸大厦的建筑材料里面有大量的石棉（asbestos，一种呼吸道致癌物），再加上铝热炸弹里面不知道有什么有毒物质，纳米物质，所以现场附近的人，估计有 40 万人患上了不同程度的呼吸道，食道，肺，肝和肾脏疾病。&lt;/p&gt;

&lt;p&gt;到今天，37000 名当时战斗在一线的救援人员里面，已经有 5000 多人被诊断患了癌症，有 1100 人死亡，医疗开销总数已经超过 3 亿美元。这些人被发现患有 70 多种癌症，其中有很多罕见的癌症，几乎没有办法治疗。然而，这 40 多万受到健康威胁的人里面，只有不到 1 万人收到了政府的“幸存者补助”。 (&lt;a href=&quot;http://www.newsweek.com/2016/09/16/9-11-death-toll-rising-496214.html&quot;&gt;Newsweek 报道&lt;/a&gt;)&lt;/p&gt;

&lt;h3&gt;世界上最阴险的政府&lt;/h3&gt;

&lt;p&gt;所有的证据和现象都表明，这是美国政府自编自导自演的一出戏。他们制造这样惨绝人寰的灾难，是为了有借口可以发动伊拉克战争。另外，世贸大厦的主人也是这次阴谋的参与者之一。他在出事之前买了很多的保险，后来拿到了 40 多亿美元的赔偿，很是赚了一笔。&lt;/p&gt;

&lt;p&gt;成千上万不知情的人在大楼里，被事先准备好的塞满整栋楼的铝热炸弹，炸得粉身碎骨，连完整的尸体都找不到。很多人被完全蒸发掉了，就跟掉进了火山口一样…… 想到这里，我不禁毛骨悚然。这比我们之前想象的飞机撞大楼，还要残忍许多倍，跟日本人的南京大屠杀有得一拼。这要心理多变态的人，才会想出这样的做法！&lt;/p&gt;

&lt;p&gt;美国政府里的某些人为了赚黑心钱，可以随时把本国平民作为炮灰来用。再加上因此发动的伊拉克战争，导致上百万无辜平民死亡，这真是天大的灾难！珍珠港，9-11，&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/11/20/hillary-emailgate&quot;&gt;本加西&lt;/a&gt;，San Bernardino…… 这些袭击都是同样的性质：幌子。天天在叫要打击恐怖分子，结果最可怕的恐怖分子，就坐在白宫里面！小布什是坏人大家都知道。不过大家都还被蒙在鼓里，以为克林顿，希拉里，奥巴马是好人。看看这个片子，醒过来吧。&lt;/p&gt;

&lt;p&gt;另外，看看这个希拉里谈伊朗的&lt;a href=&quot;https://www.youtube.com/watch?v=xvhBoF_pCHo&quot;&gt;视频&lt;/a&gt;。她说：“我希望他们（伊朗）来袭击我们。我们甚至可以去挑起他们来袭击我们。这样我们就有正当的理由向他们开战了！” 明白了吗？其实她就是会制造 9-11 的那种人。难怪揭发 9-11 真相的 CIA 特工 &lt;a href=&quot;https://www.youtube.com/watch?v=_dvxnqe6Eew&quot;&gt;Susan Lindauer 说&lt;/a&gt;：“投票给希拉里，就等于投票给第三次世界大战。就是有那么严重！”&lt;/p&gt;

&lt;p&gt;当今的美国政府里面，窝藏着世界上最阴险的犯罪团伙。犯下这样极端残忍的滔天罪行，居然还可以藏这么深这么久，让人们继续以为他们是道德高尚的好人，也真是无人能比了。人们对 9-11 真相的无知是很危险的。由于他们的无知，这些野心家可以制造任何他们想要的假象，可以诬陷任何好人，继续屠杀本国民众，同时让他们的战争和侵略行为合法化。我希望 Trump 的政府能改变这种情况，让 9-11 的真相大白于天下，把这些十恶不赦的罪犯们早日送上断头台。&lt;/p&gt;

&lt;p&gt;（写这样一篇文章挺费神的，说真话是需要一些胆量的，所以如果你觉得开了眼界的话，请考虑付款 $3。谢谢！）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">september-eleven</guid>
<pubDate>Thu, 01 Dec 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>给 Julian Assange 捐款</title>
<link>http://yinwang.org/blog-cn/2016/11/22/assange-donation</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;给 Julian Assange 捐款&lt;/h2&gt;
                            &lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/assange-quote1.jpg&quot; width=&quot;600&quot;&gt;&lt;/p&gt;

&lt;p&gt;“每一次我们目睹非正义的现象而不行动，我们的人格就变得被动和麻木。最后，我们完全失去了能力去保护我们自己和我们爱的人。” --Julian Assange&lt;/p&gt;

&lt;p&gt;今天我给 &lt;a href=&quot;https://wikileaks.org&quot;&gt;WikiLeaks&lt;/a&gt; 创始人 Julian Assange 捐了款，用于帮助支付他的律师费用。WikiLeaks 是众多政府丑闻被曝光，受到群众监督的直接原因。它曝光出来的民主党和希拉里 email，唤醒了很多美国人，他们认识到这些人的真面目，导致了这次美国大选奇迹的出现。邪恶腐败的官僚，战争军火贩子们，被群众投票推翻。美国当局害怕事实和证据，害怕人民的力量，所以他们想方设法要消灭 WikiLeaks。&lt;/p&gt;

&lt;p&gt;Assange 是人类自由的斗士，然而他却被美国当局及其伙伴们追杀和诬陷。在美国当局的指使下，英国和瑞典警方无端指控，非法拘留 Assange，却没有任何证据。瑞典警方的逮捕令甚至不是法官批准的，而是受了某个政客的指使，是完全不合法的。他们唯一的目的就是把 Assange 抓住之后送到美国，然后施加迫害。&lt;/p&gt;

&lt;p&gt;因为这个原因，Assange 以难民身份躲在厄瓜多尔驻英国领事馆的一间小屋里，长达 6 年之久，承受各种压力，不能外出，相当于在坐牢。联合国已经根据国际人权法，判决对 Assange 的指控是非法的，他应该拥有自由，然而美国当局及其盟友却不遵守人权法，继续无端指控。另外，他还有被美国政府派遣的特务&lt;a href=&quot;https://www.youtube.com/watch?v=ZuQW0US2sJw&quot;&gt;暗杀&lt;/a&gt;的危险。&lt;/p&gt;

&lt;p&gt;美国仍然是世界上最强大的国家之一，它能否正义和自由，关系到全世界各国人民的利益。然而一直以来，美国政府的做法都很让人失望，而且带坏了很多其他国家。我希望 Trump 领导下的新美国政府，能让美国洗心革面，给世界做一个好榜样。&lt;/p&gt;

&lt;p&gt;Assange 的这个基金，是用于支付律师费用，用于对抗这些毫无证据的非法指控，目前并没有收到很多的捐款。我呼吁大家（包括在中国的朋友们）给他捐款，帮助他重新获得自由。捐款地址是：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://justice4assange.com&quot;&gt;https://justice4assange.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.yinwang.org/images/assange-donation.png&quot; width=&quot;500&quot;&gt;&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">assange-donation</guid>
<pubDate>Tue, 22 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>希拉里的真实面目</title>
<link>http://yinwang.org/blog-cn/2016/11/17/all-about-hillary</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;希拉里的真实面目&lt;/h2&gt;
                            &lt;p&gt;很多人都不知道，他们的偶像希拉里，其实是世界上最腐败，最可怕，最危险的政客之一，犯下各种各样的严重罪行，多次被法庭审讯。她是美国历史上第一个被送上刑事法庭审问的第一夫人，她的丑闻真是比黑手党大哥还要多。在这次大选之前，她就应该已经在监狱里了，根本不应该可以参加竞选。&lt;/p&gt;

&lt;p&gt;YouTube 上的很多视频，揭露了希拉里的真实面目。它们在大选之前早就出现了，本来每个人在投票之前都应该看看这些负面视频（当然也应该看看 Trump 的）。可惜很多人都没有看，或者视而不见。我以前也没看过这些东西，当我发现它们的时候，我毛骨悚然……&lt;/p&gt;

&lt;p&gt;下面就是其中我觉得最可怕的：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;短片：自成为第一夫人以来，希拉里撒谎，犯罪，丑闻的详细列表。看看你数得清不？可怕的事情是，其中包括收取贿赂，利用克林顿的总统职权赦免大毒枭，赦免多名恐怖分子，销毁证据，栽赃陷害和恐吓无辜官员，等等。(&lt;a href=&quot;https://www.youtube.com/watch?v=a-xjiXfJ58Q&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;纪录片『希拉里』。时长一个半小时的纪录片，可以被看成是第一个短片的完整版和补充，包含了大量的历史录像，证据和证人口述。它完整的展现了希拉里这个人的本性。(&lt;a href=&quot;https://www.youtube.com/watch?v=3BUUy1C0_4g&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;曾经被她丈夫克林顿强奸和性骚扰的女性，讲述希拉里当年是如何侮辱她们，做克林顿的帮凶，并且掩盖他犯罪的真相。注意这些女性并不是克林顿的“外遇”，她们不是自愿的，这真的是犯罪行为。 (&lt;a href=&quot;https://www.youtube.com/watch?v=NvoRcPXURwg&quot;&gt;视频1&lt;/a&gt;) (&lt;a href=&quot;https://www.youtube.com/watch?v=IuMcayh1etM&quot;&gt;视频2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;卧底记者偷拍内幕：希拉里竞选团队出钱雇佣精神病人，去 Trump 演讲场所挑衅，故意引起暴力冲突，施加陷害，策划游行暴乱，目的就是把 Trump 搞臭。 (&lt;a href=&quot;https://www.youtube.com/watch?v=5IuJGHuIkzY&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;希拉里支持者暴力挑衅和攻击 Trump 支持者，制造暴乱，甚至袭击警察。 (&lt;a href=&quot;https://www.youtube.com/watch?v=vY-ewgX4oIU&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;克林顿基金会的真相。克林顿基金会（Clinton Foundation）表面上是一个慈善机构，而其实是一个用于变相收取贿赂的“灾难资本主义”机构。它不但是克林顿夫妇收取巨额贿赂的渠道，贪污超过 90% 的捐款，给受灾地区带去更多的灾难，而且是给贩毒集团和恐怖分子洗钱的重要通道。(&lt;a href=&quot;https://www.youtube.com/watch?v=7LYRUOd_QoM&quot;&gt;视频&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;『&lt;a href=&quot;https://www.youtube.com/watch?v=zCGW033-82c&quot;&gt;The Clinton Chronicles&lt;/a&gt;』（克林顿编年史）。一部详细记录克林顿夫妇从 Arkansas 州走向白宫，一路上犯下的各种可怕罪行。克林顿要比你听说的还可怕很多。他们的邪恶就像一颗毒瘤，最后蔓延到整个美国。警告：儿童不宜，看了也许会做噩梦！&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;现在的美国，因为克林顿，希拉里，小布什，奥巴马这样的人，早已不再是自由民主的国家，它是一个腐败瘫痪的机器，它是被流氓和罪犯统治的国家。用一个好听点的词，这叫做“官僚资本主义”（&lt;a href=&quot;https://en.wikipedia.org/wiki/Crony_capitalism&quot;&gt;crony capitalism&lt;/a&gt;），也就是腐败的官员和奸商勾结，通过不正当手段（比如贿赂）谋取暴利，让广大民众和小商业者受害的社会。好像在哪里听说过呢？中国的历史教科书告诉我们，中国在解放前就是官僚资本主义，民不聊生。现在美国终于沦落到了同样的地步，病入膏肓，濒临崩溃。&lt;/p&gt;

&lt;p&gt;这些沉睡的人们，还生活在“美国梦”的幻觉里面，仍然以为美国是自由的国家。就像 Matrix 里面的人一样，你的理念，你相信的“事实”，只不过是媒体制造的幻觉。这些被叫做“事实”的信息，从各种感官进入人的头脑，被不加判断的接受。以至于看见了真正的事实都故意不相信，继续活在梦里。就像 Matrix 里面的躯体一样，被当成这台巨大机器的电池，榨干之后就被无情的倒掉。醒来面对现实是痛苦的，但未来会是美好的，真正美好的。&lt;/p&gt;

&lt;p&gt;希望有些人看了这些视频之后能醒过来。你们不应该为希拉里的失败而悲伤甚至愤怒，反而应该感到万分的幸运。因为希拉里是一个非常危险，非常狡猾，心狠手辣的罪犯，她一旦成为美国总统，不仅对于美国，而且对于全世界都是一种致命的威胁。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">all-about-hillary</guid>
<pubDate>Thu, 17 Nov 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>C 编译器优化过程中的 Bug</title>
<link>http://yinwang.org/blog-cn/2016/10/12/compiler-bug</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;C 编译器优化过程中的 Bug&lt;/h2&gt;
                            &lt;p&gt;一个朋友向我指出一个最近他们发现的 GCC 编译器优化过程（加上 -O3 选项）里的 bug，导致他们的产品出现非常诡异的行为。这使我想起以前见过的一个 GCC bug。当时很多人死活认为那种做法是正确的，跟他们说不清楚。简言之，这种有问题的优化，喜欢利用 C 语言的“未定义行为”（undefined behavior）进行推断，最后得到奇怪的结果。&lt;/p&gt;

&lt;p&gt;这类优化过程的推理方式都很类似，他们使用一种看似严密而巧妙的推理，例如：“现在有一个整数 &lt;code&gt;x&lt;/code&gt;，我们不知道它是多少。但 &lt;code&gt;x&lt;/code&gt; 出现在一个条件语句里面，如果 &lt;code&gt;x &amp;gt; 1&lt;/code&gt;，那么程序会进入未定义行为，所以我们可以断定 &lt;code&gt;x&lt;/code&gt; 的值必然小于或者等于 1，所以现在我们利用 &lt;code&gt;x ≤ 1&lt;/code&gt; 这个事实来对相关代码进行优化……”&lt;/p&gt;

&lt;p&gt;看似合理，然而它却是不正确的，你能看出来这样的推理错在何处吗？我一时想不起来之前具体的例子了（如果你知道的话告诉我）。上网搜了一下相关话题，发现这篇 Chris Lattner (LLVM 和 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;Swift 语言&lt;/a&gt; 的设计者) 写于 2011 年的&lt;a href=&quot;http://blog.llvm.org/2011/05/what-every-c-programmer-should-know_14.html&quot;&gt;文章&lt;/a&gt;。文中指出，编译器利用 C 语言的“未定义行为”进行优化，是合理的，对于性能是很重要的，并且举出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check(int *P) {
  int dead = *P;
  if (P == 0)
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这例子跟我之前看到的 GCC bug 不大一样，但大致是类似的推理方式：这个函数依次经过这样两个优化步骤（RNCE 和 DCE），之后得出“等价”的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE(int *P) {
  int dead = *P;
  if (false)  // P 在上一行被访问，所以这里 P 不可能是 null
    return;
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;void contains_null_check_after_RNCE_and_DCE(int *P) {
  //int dead = *P;    // 死代码消除
  //if (false)        // 死代码
  //  return;         // 死代码
  *P = 4;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;他的推理方式是这样：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先，因为在 &lt;code&gt;int dead = *P&lt;/code&gt; 里面，指针 &lt;code&gt;P&lt;/code&gt; 的地址被访问，如果程序顺利通过了这一行而没有出现未定义行为（比如当掉），那么之后 &lt;code&gt;P&lt;/code&gt; 就不可能是 null，所以我们可以把 &lt;code&gt;P == 0&lt;/code&gt; 优化为 &lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;因为条件是 &lt;code&gt;false&lt;/code&gt;，所以整个 if 语句都是死代码，被删掉。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dead&lt;/code&gt; 变量赋值之后，没有被任何其它代码使用，所以对 &lt;code&gt;dead&lt;/code&gt; 的赋值是死代码，可以消去。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;最后函数就只剩下一行代码 &lt;code&gt;*P = 4&lt;/code&gt;。然而经我分析，发现这个优化转换是根本错误的做法（unsound 的变换），而不只是像他说的“存在安全隐患”。现在我来考考你，你知道这为什么是错的吗？值得庆幸的是，现在如果你把这代码输入到 Clang，就算加上 -O3 选项，它也不会给你进行这个优化。这也许说明 Lattner 的这个想法后来已经被 LLVM 团队抛弃。&lt;/p&gt;

&lt;p&gt;我写这篇文章的目的其实是想告诉你，不要盲目的相信编译器的作者们做出的变换都是正确的，无论它看起来多么的合理，只要打开优化之后你的程序出现奇葩的行为，你就不能排除编译器进行了错误优化的可能性。Lattner 指出这样的优化完全符合 C 语言的标准，这说明就算你符合国际标准，也有可能其实是错的。有时候，你是得相信自己的直觉……&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">compiler-bug</guid>
<pubDate>Wed, 12 Oct 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>对 Rust 语言的分析</title>
<link>http://yinwang.org/blog-cn/2016/09/18/rust</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;对 Rust 语言的分析&lt;/h2&gt;
                            &lt;p&gt;Rust 是一门最近比较热的语言，有很多人问过我对 Rust 的看法。由于我本人是一个语言专家，实现过几乎所有的语言特性，所以我不认为任何一种语言是新的。任何“新语言”对我来说，不过是把早已存在的语言特性（或者毛病），挑一些出来放在一起。所以一般情况下我都不会去评论别人设计的语言，甚至懒得看一眼，除非它历史悠久（比如像 C 或者 C++），或者它在工作中惹恼了我（像 Go 和 JavaScript 那样）。这就是为什么这些人问我 Rust 的问题，我一般都没有回复，或者一笔带过。&lt;/p&gt;

&lt;p&gt;不过最近有点闲，我想既然有人这么热衷于这种新语言，那我还是稍微凑下热闹，顺便分享一下我对某些常见的设计思路的看法。所以这篇文章虽然是在评论 Rust 的设计，它却不只是针对 Rust。它是针对某些语言特性，而不只是针对某一种语言。&lt;/p&gt;

&lt;p&gt;由于我这人性格很难闭门造车，所以现在我只是把这篇文章的开头发布出来，边写边更新。所以你要明白，这只是一个开端，我会按自己理解的进度对这篇文章进行更新。你看了之后，可以隔一段时间再回来看新的内容。如果有特别疑惑的问题，也可以发信来问，我会汇总之后把看法发布在这里。&lt;/p&gt;

&lt;h3&gt;变量声明语法&lt;/h3&gt;

&lt;p&gt;Rust 的&lt;a href=&quot;https://doc.rust-lang.org/book/variable-bindings.html&quot;&gt;变量声明&lt;/a&gt;跟 Scala 和 Swift 的很像。你用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样的构造来声明一个新的变量。大部分时候 Rust 可以推导出变量的类型，所以你不一定需要写明它的类型。如果你真的要指明变量类型，需要这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x: i32 = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在我看来这是丑陋的语法。本来语义是把变量 x 绑定到值 8，可是 x 和 8 之间却隔着一个“i32”，看起来像是把 8 赋值给了 i32……&lt;/p&gt;

&lt;p&gt;变量缺省都是不可变的，也就是不可赋值。你必须用一种特殊的构造&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来声明可变变量。这跟 Swift/Scala 的 &lt;code&gt;let&lt;/code&gt; 和 &lt;code&gt;var&lt;/code&gt; 的区别是一样的，只是形式不大一样。&lt;/p&gt;

&lt;h3&gt;变量可以重复绑定&lt;/h3&gt;

&lt;p&gt;Rust 的变量定义有一个比其它语言更奇怪的地方，它可以让你在同一个作用域里面“重复绑定”同一个名字，甚至可以把它绑定到另外一个类型：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut x: i32 = 1;
x = 7;
let x = x; // 这两个 x 是两个不同的变量

let y = 4;
// 30 lines of code ...
let y = &quot;I can also be bound to text!&quot;;
// 30 lines of code ...
println!(&quot;y is {}&quot;, y);      // 定义在第二个 let y 的地方
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 Yin 语言最初的设计里面，我也是允许这样的重复绑定的。第一个 y 和 第二个 y 是两个不同的变量，只不过它们碰巧叫同一个名字而已。你甚至可以在同一行出现两个 x，而它们其实是不同的变量！这难道不是一个很酷，很灵活，其他语言都没有的设计吗？后来我发现，虽然这实现起来没什么难度，可是这样做不但没有带来更大的方便性，反而可能引起程序的混淆不清。在同一个作用域里面，给两个不同的变量起同一个名字，这有什么用处呢？自找麻烦而已。&lt;/p&gt;

&lt;p&gt;比如上面的例子，在下面我们看到一个对变量 &lt;code&gt;y&lt;/code&gt; 的引用，它是在哪里定义的呢？你需要在头脑中对程序进行“数据流分析”，才能找到它定义的位置。从上面读起，我们看到 &lt;code&gt;let y = 4&lt;/code&gt;，然而这不一定是正确的定义，因为 &lt;code&gt;y&lt;/code&gt; 可以被重新绑定，所以我们必须继续往下看。30 行代码之后，我们看到了第二个对 &lt;code&gt;y&lt;/code&gt; 的绑定，可是我们仍然不能确定。继续往下扫，30行代码之后我们到了引用 &lt;code&gt;y&lt;/code&gt; 的地方，没有再看到其它对 &lt;code&gt;y&lt;/code&gt; 的绑定，所以我们才能确信第二个 let 是 &lt;code&gt;y&lt;/code&gt; 的定义位置，它是一个字符串。&lt;/p&gt;

&lt;p&gt;这难道不是很费事吗？更糟的是，这种人工扫描不是一次性的工作，每次看到这个变量，你都要疑惑一下它是什么东西，因为它可以被重新绑定，你必须重新确定一下它的定义。如果语言不允许在同一个作用域里面重复绑定同一个名字，你就根本不需要担心这个事情了。你只需要在作用域里面找到唯一的那个 &lt;code&gt;let y = ...&lt;/code&gt;，那就是它的定义。&lt;/p&gt;

&lt;p&gt;也许你会说，只有当有人滥用这个特性的时候，才会导致问题。然而语言设计的问题往往就在于，一旦你允许某种奇葩的用法，就一定会有人自作聪明去用。因为你无法确信别人是否会那样做，所以你随时都得提高警惕，而不能放松下心情来。&lt;/p&gt;

&lt;h3&gt;类型推导&lt;/h3&gt;

&lt;p&gt;另外一个很多人误解的地方是类型推导。在 Rust 和 C# 之类的语言里面，你不需要像 Java 那样写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;int x = 8;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样显式的指出变量的类型，而是可以让编译器把类型推导出来。比如你写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let x = 8;  // x 的类型推导为 i32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译器的类型推导就可以知道 &lt;code&gt;x&lt;/code&gt; 的类型是 i32，而不需要你把“i32”写在那里。这似乎是一个很方便的东西。然而看过很多 C# 代码之后你发现，这看似方便，却让程序变得不好读。在看 C# 代码的时候，我经常看到一堆的变量定义，每一个的前面都是 var。我没法一眼就看出它们表示什么，是整数，bool，还是字符串，还是某个用户定义的类？&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c#&quot;&gt;var correct = ...;
var id = ...;
var slot = ...;
var user = ...;
var passwd = ...;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我需要把鼠标移到变量上面，让 Visual Studio 显示出它推导出来的类型，可是鼠标移开之后，我可能又忘了它是什么。有时候发现看同一片代码，都需要反复的做这件事，鼠标移来移去的。而且要是没有 Visual Studio，用其它编辑器，或者在 github 上看代码或者 code review 的时候，你就得不到这种信息了。很多 C# 程序员为了避免这个问题，开始用很长的变量名，把类型的名字加在变量名字里面去，这样一来反而更复杂了，却没有想到直接把类型写出来。所以这种形式的类型推导，看似先进或者方便，其实还不如直接在声明处写下变量的类型，就像 Java 那样。&lt;/p&gt;

&lt;p&gt;所以，虽然 Rust 在变量声明上似乎有更灵活的设计，然而我觉得 C 和 Java 之类的语言那样看似死板的方式其实更好。我建议不要使用 Rust 变量的重复绑定，避免使用类型推导，尽量明确的写出类型，以方便读者。如果你真的在乎代码的质量，就会发现大部分时候你的代码的读者是你自己，而不是别人，因为你需要反复的阅读和提炼你的代码。&lt;/p&gt;

&lt;h3&gt;动作的“返回值”&lt;/h3&gt;

&lt;p&gt;Rust 的文档说它是一种“&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#expressions-vs-statements&quot;&gt;大部分基于表达式&lt;/a&gt;”的语言，并且给出这样一个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;let mut y = 5;
let x = (y = 6);  // x has the value `()`, not `6`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;奇怪的是，这里变量 &lt;code&gt;x&lt;/code&gt; 会得到一个值，空的 tuple，&lt;code&gt;()&lt;/code&gt;。这种思路不大对，它是从像 OCaml 那样的语言照搬过来的，而 OCaml 本身就有问题。在 OCaml 里面，如果你使用 &lt;code&gt;print_string&lt;/code&gt;，那你会得到如下的结果：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;haskell&quot;&gt;print_string &quot;hello world!\n&quot;;;

hello world!
- : unit = ()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里，&lt;code&gt;print_string&lt;/code&gt; 是一个“动作”，它对应过程式语言里面的“statement”。就像 C 语言的 &lt;code&gt;printf&lt;/code&gt;。动作通常只产生“副作用”，而不返回值。在 OCaml 里面，为了“理论的优雅”，动作也会返回一个值，这个值叫做 &lt;code&gt;()&lt;/code&gt;。其实 &lt;code&gt;()&lt;/code&gt; 相当于 C 语言的 void。C 语言里面有 void 类型，然而它却不允许你声明一个 void 类型的变量。比如你写&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;c&quot;&gt;int main()
{
  void x;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;程序是没法编译通过的（试一试？）。让人惊讶的是，古老的 C 的做法其实是正确的，这里有比较深入的原因。如果你把一个类型看成是一个集合（比如 int 是机器整数的集合），那么 void 所表示的集合是个空集，它里面是不含有任何元素的。声明一个 void 类型的变量是没有任何意义的，因为它不可能有一个值。如果一个函数返回 void，你是没法把它赋值给一个变量的。&lt;/p&gt;

&lt;p&gt;可是在 Rust 里面，不但动作（比如 &lt;code&gt;y = 6&lt;/code&gt; ）会返回一个值 &lt;code&gt;()&lt;/code&gt;，你居然可以把这个值赋给一个变量。其实这是错误的作法。原因在于 &lt;code&gt;y = 6&lt;/code&gt; 只是一个“动作”，它只是把 6 放进变量 y 里面，这个动作发生了就发生了，它根本不应该返回一个值，它不应该可以出现在 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 的右边。就算你牵强附会说 &lt;code&gt;y = 6&lt;/code&gt; 的返回值是 &lt;code&gt;()&lt;/code&gt;，这个值是没有任何用处的。更不要说使用空的 tuple 来表示这个值，会引起更大的类型混淆，因为 &lt;code&gt;()&lt;/code&gt; 本身有另外的，更有用的含义。&lt;/p&gt;

&lt;p&gt;你根本就不应该可以写 &lt;code&gt;let x = (y = 6);&lt;/code&gt; 这样的代码。只有当你犯错误或者逻辑不清晰的时候，才有可能把 &lt;code&gt;y = 6&lt;/code&gt; 当成一个值来用。Rust 允许你把这种毫无意义的返回值赋给一个变量，这种错误就没有被及时发现，反而能够通过变量传播到另外一个地方去。有时候这种错误会传播挺远，然后导致问题（运行时错误或者类型检查错误），可是当它出问题的时候，你就不大容易找到错误的起源了。&lt;/p&gt;

&lt;p&gt;这是很多语言的通病，特别是像 JavaScript 或者 PHP 之类的语言。它们把毫无意义或者牵强附会的结果（比如 undefined）到处传播，结果使错误很难被发现和追踪。&lt;/p&gt;

&lt;h3&gt;return 语句&lt;/h3&gt;

&lt;p&gt;Rust 的设计者似乎很推崇“面向表达式”的语言，所以在 Rust 里面你不需要直接写“return”这个语句。比如，这个&lt;a href=&quot;https://doc.rust-lang.org/book/functions.html#early-returns&quot;&gt;例子&lt;/a&gt;里面，你可以直接这样写：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn add_one(x: i32) -&amp;gt; i32 {
    x + 1
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;返回函数里的最后一个表达式，而不需要写 return 语句，这是函数式语言共有的特征。然而其实我觉得直接写 return 其实是更好的作法，像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo(x: i32) -&amp;gt; i32 {
    return x + 1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编程有一个容易引起问题的作法，叫做“不够明确”，总想让编译器自动去处理一些问题，在这里也是一样的问题。如果你隐性的返回函数里最后一个表达式，那么每一次看见这个函数，你都必须去搞清楚最后一个表达式是什么，这并不是每次都那么明显的。比如下面这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    println!(&quot;{}&quot;, add_one(7));
}

fn add_one(x: i32) -&amp;gt; i32 {
  if (x &amp;lt; 5) {
      if (x &amp;lt; 10) {
        // 做很多事...
        x * 2
      } else {
        // 做很多事...
        x + 1
      }
  } else {
    // 做很多事...
    x / 2
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于 if 语句里面有嵌套，每个分支又有好些代码，而且 if 语句又是最后一个语句，所以这个嵌套 if 的三个出口的最后一个表达式都是返回值。如果你写了“return”，那么你可以直接看有几个“return”，或者拿编辑器加亮一下，就知道这个函数有几个出口。然而现在没有了“return”这个关键字，你就必须把最后那个 if 语句自己看清楚了，找到每一个分支的“最后表达式”。很多时候这不是那么明显，你总需要找一下，而且这件事在读代码的时候总是反复做。&lt;/p&gt;

&lt;p&gt;所以对于返回值，我的建议是总是明确的写上“return”，就像第二个例子那样。Rust 的文档说这是“poor style”，那不是真的。有一个例外，那就是当函数体里面只有一条语句的时候，那个时候没有任何歧义哪一个是返回表达式。&lt;/p&gt;

&lt;p&gt;这个问题类似于重复绑定变量和类型推导的问题，属于一种“用户体验设计”问题。无论如何，编译器都很容易实现，然而不同样式的代码，对于人类阅读的工作量，是很不一样的。很多时候最省人力的做法并不是那种看来最聪明，最酷，打字量最少的办法，而是写得最明确，让读者省事的办法。人们常说，代码读的时候比写的时候多得多，所以要想语言好用省事，我们应该更加重视读的时候，而不是写的时候。&lt;/p&gt;

&lt;h3&gt;数组的可变性&lt;/h3&gt;

&lt;p&gt;Rust 的数组可变性标记，跟 Swift 犯了一样的错误。Swift 的问题，我已经在之前的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;文章&lt;/a&gt;有详细叙述，所以这里就不多说了。简言之，同一个标记能表示的可变性，要么针对数组指针，要么针对数组元素，应该只能选择其一。而在 Rust 里面，你只有一个地方可以放“mut”进去，所以要么数组指针和元素全部都可变，要么数组指针和元素都不可变。你没有办法制定一个不可变的数组指针，而它指向的数组的元素却是可变的。&lt;/p&gt;

&lt;p&gt;请对比下面两个例子：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let m = [1, 2, 3];      // 指针和元素都不可变
    m[0] = 10;              // 出错
    m = [4, 5, 6];          // 也出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn main() {
    let mut m = [1, 2, 3];  // 指针和元素都可变
    m[0] = 10;              // 不出错
    m = [4, 5, 6];          // 也不出错
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;内存管理&lt;/h3&gt;

&lt;p&gt;Rust 号称实现了非常先进的内存管理机制，不需要垃圾回收（GC）或者引用计数（RC）就可以“静态”的管理内存的分配和释放。然而仔细思考之后你就会发现，这很可能是不切实际的梦想（或者广告）。内存的分配和释放（如果要及时释放的话），本身是一个动态的过程，无法用静态分析来实现。现在你说可以通过一些特殊的构造，特殊的指针和传值方式，静态的决定内存的回收时间，真的有可能吗？&lt;/p&gt;

&lt;p&gt;实际上在 IU 的时候，我有一个类似的梦。我曾经向我的教授们（Friedman，Dybvig）提出过 N 多种不需 GC 和 RC 就能静态管理内存的办法，结果每一次都被他们给我的小例子给打败了，以至于我很难相信有任何人可以想到比 GC 和 RC 更好的方法。&lt;/p&gt;

&lt;p&gt;Rust 那些炫酷的 move semantics, borrowing, lifetime 之类的概念加在一起，不但让语言变得复杂不堪，我感觉并不能从根本上解决内存管理问题。很多人在 blog 里面为这些概念热情洋溢地做宣传，显得自己很懂一样，拿一些玩具代码来演示，可是从没看到任何人说清楚这些东西为什么可以从根本上解决问题，能用到复杂一点的代码里面去。所以我觉得这些东西有“皇帝的新装”之嫌。&lt;/p&gt;

&lt;p&gt;连 Rust 自己的&lt;a href=&quot;https://doc.rust-lang.org/book/ownership.html#meta&quot;&gt;文档&lt;/a&gt;都说，你可能需要“fight with the borrow checker”。为了通过这些检查，你必须用很怪异的方式来写程序，随着问题复杂度的增加，就要求有更怪异的写法。如果用了 lifetime，很简单一个代码看起来就会是这种样子。真够烦的，我感觉我的眼睛都没法 parse 这段代码了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rust&quot;&gt;fn foo&amp;lt;&#39;a, &#39;b&amp;gt;(x: &amp;amp;&#39;a str, y: &amp;amp;&#39;b str) -&amp;gt; &amp;amp;&#39;a str {
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上一次我看 Rust 文档的时候，没发现有 lifetime 这概念。文档对此的介绍非常粗略，仔细看了也不知道他们在说些什么，更不要说相信这办法真的管用了。对不起，我根本不想去理解这些尖括号里的 &lt;code&gt;&#39;a&lt;/code&gt; 和 &lt;code&gt;&#39;b&lt;/code&gt; 是什么，除非你先向我证明这些东西真的能解决内存管理的问题。实际上这个 lifetime 我感觉像是跨过程静态分析时产生的一些标记，要知道静态分析是无法解决内存管理的问题的，我猜想这种 lifetime 在有递归函数的情况下就会遇到麻烦。&lt;/p&gt;

&lt;p&gt;实际上我最开头看 Rust 的时候，它号称只用 move semantics 和好几种不同的指针，就可以解决内存管理的问题。可是一旦有了那几种不同的指针，就已经复杂不堪了，比 C 语言还要麻烦，而且显然不能解决问题。Lifetime 恐怕是后来发现有新的问题解决不了才加进去的，可是我不知道他们这次是不是又少考虑了某些情况。&lt;/p&gt;

&lt;p&gt;Rust 的设计者显然受了 &lt;a href=&quot;https://en.wikipedia.org/wiki/Linear_logic&quot;&gt;Linear Logic&lt;/a&gt; 一类看似很酷的逻辑的启发和熏陶，想用类似的方式奇迹般的解决内存和资源的回收问题。然而研究过一阵子 Linear Logic 之后我发现，这个逻辑自己都没有解决任何问题，只不过给对象的引用方式施加了一些无端的限制，这样使得对象的引用计数是一个固定的值（1）。内存管理当然容易了，可是这样导致有很多程序你没法表达。&lt;/p&gt;

&lt;p&gt;开头让你感觉很有意思，似乎能解决一些小问题。到后来遇到大一点的实际问题的时候，你就发现需要引入越来越复杂的概念，使用越来越奇葩的写法，才能达到目的，而且你总是会在将来某个时候发现它没法解决的问题。因为这个问题很可能从根本上是无法解决的，所以每当遇到有超越现有能力的事情，你就得增加新的“绕过方法”（workaround）。缝缝补补，破败不堪。最后你发现，除了垃圾回收（GC）和引用计数（RC），内存管理还是没有其它更好更简单的办法。&lt;/p&gt;

&lt;p&gt;当然我的意见也许不是完全准确，可我真是没有时间去琢磨这么多乱七八糟，不知道管不管用的概念（特别是 lifetime），更不要说真的用它来构建大型的系统程序了。有用来理解这些概念，把程序改成奇葩样子的时间，我可能已经用 C 语言写出很好的手动内存管理代码了。如果你真的看进去理解了，发现这些东西可以用的话，告诉我一声！不过你必须说明原因，不要只告诉我“皇帝是穿了衣服的” :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;本来想写一个更详细的评价的，可是到了这个地方，我感觉已经失去兴趣了，困就一个字啊…… Rust 比 C 语言复杂太多，我很难想象用这样的语言来构造大型的操作系统。而构造系统程序，是 Rust 设计的初衷。说真的，写操作系统那样的程序，C 语言真的不算讨厌。用户空间的程序，Java，C# 和 Swift 完全可以胜任。所以我觉得 Rust 的市场空间恐怕非常狭小……&lt;/p&gt;

&lt;p&gt;（如果你喜欢这些内容，请付费5美元或者30人民币，谢谢！）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">rust</guid>
<pubDate>Sun, 18 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>支付宝的身份验证问题</title>
<link>http://yinwang.org/blog-cn/2016/09/16/alipay</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;支付宝的身份验证问题&lt;/h2&gt;
                            &lt;p&gt;我看到有人继续在向我之前的支付宝账号付费。其实现在的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费二维码&lt;/a&gt;已经改成了我父亲的账号，原因是因为支付宝的身份验证问题。&lt;/p&gt;

&lt;p&gt;我的支付宝账号是在国内的时候开通的，支付宝收到的博文付费，都是准备转给家人的。开始收费之后，向家人的账号转了一些钱。支付宝似乎有很严格的防盗验证，我开头不熟悉怕出问题，所以做了几个试验，把钱分成好几次转。最后一次的时候，发现支付宝说需要验证我的身份，还打开手机的相机，要做“人脸验证”。让我左边转一点，右边转一点…… 我的身份证是15年前办的了，当然现在不像了！最后验证没有通过，于是支付功能就被锁定了，再也无法向家人转账。解锁的方法只有联系客服，可是客服电话打了老半天，根本没人接……&lt;/p&gt;

&lt;p&gt;由于这个原因，我不能再用我自己的支付宝账号收费。开通新的账号又需要银行卡验证，而我的国内手机和U盾都丢了…… 国内的银行系统就是这么麻烦。&lt;/p&gt;

&lt;p&gt;所以没办法，只好把我父亲的支付宝二维码放了上去。请大家以后不要再向我的账号付费，直接转账给我父亲就可以了。谢谢！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">alipay</guid>
<pubDate>Fri, 16 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>测试的道理</title>
<link>http://yinwang.org/blog-cn/2016/09/14/tests</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;测试的道理&lt;/h2&gt;
                            &lt;p&gt;在长期的程序语言研究和实际工作中，我摸索出了一些关于测试的道理。然而在我工作过的每一个公司，我发现绝大多数人都不明白这些道理，很多团队集体性的采用错误的做法而不自知。很多人把测试当成一种主义和教条，进行过度的测试，不必要的测试，不可靠的测试，并且把这些错误的做法传授给新手，造成恶性循环。本来目的是提高代码质量，结果不但没能达到目的，反而降低了代码质量，增大了工作量，大幅度延缓工程进度。&lt;/p&gt;

&lt;p&gt;我也写测试，但我的测试方式比“测试教条主义者”们的方式聪明很多。在我心目中，代码本身的地位大大的高于测试。我不忽视测试，但我不会本末倒置，过分强调测试，我并不推崇测试驱动开发（TDD）。我知道该测试什么，不该测试什么，什么时候该写测试，什么时候不该写，什么时候应该推迟测试，什么时候完全不需要测试。因为这个原因，再加上高强的编程能力，我多次完成别人认为在短时间不可能完成的任务，并且制造出质量非常高的代码。&lt;/p&gt;

&lt;h3&gt;测试的道理&lt;/h3&gt;

&lt;p&gt;现在我就把这些自己领悟到的关于测试的道理总结一下，其中有一些是鲜为人知或者被误解的。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;不要以为你处处显示出“重视代码质量”的态度，就能提高代码质量。总有些人，以为自己知道“单元测试”（unit test），“集成测试”（integration test）这样的名词，就很懂编程，就可以教育其他人。可惜，光有态度和口号是不解决问题的，你还必须有实战的技巧，深入的见解和智慧，必须切实地知道应该怎么做。代码的质量不会因为你重视它就得到提升，也不会因为你采取了措施（比如测试，静态分析）就一定会得到改善。你必须知道什么时候该写测试，什么时候不该写测试，需要写测试的时候，要写什么样的测试。其实，提高代码质量唯一可行的手段不是写测试，而是反复的提炼自己的思维，写简单清晰的代码。如果你想真的提高代码质量，我的文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;』是一个不错的出发点。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;真正的编程高手不会被测试捆住手脚。是的，你身边那个你认为“不很在乎测试”的家伙，也许是个比你更好的程序员。我喜欢把编程比喻成开赛车，而测试就是放在路边用来防撞的轮胎护栏……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-a66eb34628e32634.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/400&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;护栏有时候是很有用，可以救命的，然而一个合格的车手，绝对不会一心想着有护栏保护，测试在编程活动中的地位也应该就是这样。优秀的车手会很快看见优雅而简单的路径，恰到好处地掌握速度和时机，直奔终点而去。护栏只是放在最危险的地段，让你出了意外不要死得太惨。护栏并不能让你成为好的车手，不能让你取得冠军。绝大多数时候，你的安全只有靠自己的技术，而不是护栏，你永远有办法可以撞死自己。测试的作用也是一样，即使有了很多的测试，代码的安全仍然只掌握在你的手里。你永远可以制造出新的 bug，而没有测试可以检测到它……&lt;/p&gt;

&lt;p&gt;通常情况下，一个合格的车手是根本碰不到这些护栏的，他们心里想的是更高的目标：快点到达终点。相比之下，一个不合格的车手，他经常撞到赛道外面去，所以在他的心里，护栏有着至高无上的地位，所以他总是跟别人宣扬护栏的重要性。他开车的时候为了防止犯错，要在他经过的路径两边密密麻麻摆上护栏，甚至把护栏摆到赛道中间，以确保自己的转弯幅度正确。他在护栏之间跌跌撞撞，最后只能算是勉强到达终点。鼓吹测试驱动开发的人，就是这种三流车手，这种人写再多的测试也不可能倒腾出可靠的代码来。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在程序和算法定型之前，不要写测试。TDD 的教条者喜欢跟你说，在写程序之前就应该先写测试。为什么写代码之前要写测试呢？这只是一种教条。这些人其实没有用自己的脑子思考过这个问题，而只是人云亦云，觉得这样“很酷”，符合潮流，或者以为这样做了别人就会认为自己是高手。实际上在程序框架完成，算法定型之前，你都不需要写测试。如果你想知道代码是否正确，用人工方式运行代码，看看结果足以。&lt;/p&gt;

&lt;p&gt;如果你发现编程初期需要保证的性质纷繁复杂，如此之多，不写测试你就没信心的话，那你还是想办法先提高下基本的编程技术吧：多做练习，简化代码，让代码更加模块化，看看我的『编程的智慧』或者『SICP』一类的东西。写测试并不能提高你的水平，正好相反，过早的写测试会捆住你的手脚，让你无法自由的修改代码和算法。如果你不能很快的修改代码，不能用直觉感觉到它的变化和结构，而是因为测试而处处卡顿，你的头脑里就不能产生所谓“&lt;a href=&quot;https://en.wikipedia.org/wiki/Flow_(psychology&quot;&gt;flow&lt;/a&gt;)”，就不能写出优雅的代码来，结果到最后你什么也没学会。只有在程序不再需要大幅度的改动之后，才是逐渐加入测试的时候。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要为了写测试而改变本来清晰的编程方式。很多人为了满足“覆盖”（coverage）的要求，为了可以测试到某些模块，或者为了使用 mock，而把本来简单清晰地代码改成更加复杂而混淆的形式，甚至采用大量 reflection。这样一来其实降低了代码的质量。本来很简单的代码，一眼看去就知道是否正确，可是现在你一眼看过去，到处都是为了方便测试而加进去的各种转接插头，再也无法感觉到代码。这些用来辅助测试的代码，阻碍了你对代码进行直觉思维，而如果你不能把代码的逻辑完全映射在头脑里（进而产生直觉），你是很难写出真正可靠的代码的。&lt;/p&gt;

&lt;p&gt;有些 C# 程序员，为了测试而加入大量的 interface 和 reflection，因为这样可以在测试的时候很方便的把一片代码替换成 mock。结果你就发现这程序里每个类都有一个配套的 interface，还需要写另外一个 mock 类，去实现这个 interface。这样一来，不但代码变得复杂难以理解，而且还损失了 Visual Studio 的协助功能：你不再能按一个键（F12）就直接跳转到方法的定义，而需要先跳到对应的 interface 方法，然后再找到正确的实现。所以你不再能够在代码里面快速的跳转浏览。这种方便性的损失，会大幅度降低头脑产生整体理解的机会。而且为了 mock，每一个构造函数调用都得换成一个含有 reflection 的构造，使得编译器的静态类型检查无法确保类型正确，增加运行时出错的可能性，出错信息还难以理解，得不偿失的后果。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要测试“实现细节”，因为那等同于把代码写两遍。测试应该只描述程序需要满足的“基本性质”（比如 sqrt(4) 应该等于 2），而不是去描述“实现细节”（比如具体的开平方算法的步骤）。有些人的测试过于详细，甚至把代码的每个实现步骤都兢兢业业的进行测试：第一步必须做A，第二步必须做B，第三步必须做C…… 还有些人喜欢给 UI 写测试，他们的测试里经常这样写：如果你浏览到这个页面，那么你应该在标题栏看见这行字……&lt;/p&gt;

&lt;p&gt;仔细想一下就会发现，这种作法本质上不过是把代码（或者UI）写了两遍而已。本来代码里面明白写着：先做A，再做B，再做C。UI 描述文件里面明白写着：标题栏里面是这些内容。你有什么必要在测试里把它们全都再检查一遍呢？这根本没有增加任何可靠性：你在代码里会犯错，你把同样的逻辑换种形式再写一遍，难道就不会错了吗？&lt;/p&gt;

&lt;p&gt;这就像某些脑子秀逗的人，他出门时总是担心门没锁好，关门之后要推推拉拉好几次，确认门是锁上了的。还没走几步，他仍然在怀疑门没锁好，又走回去推推拉拉好几次，却始终不能放心 :P 这种做法非但不能保证代码的正确，反而给修改代码制造了障碍。理所当然，你把同一段代码写了两遍，每当要修改代码，你就得修改两次！这样的测试就像紧箍咒一样，把代码压得密不透风。每一次修改代码，都会导致很多测试失败，以至于这些测试都不得不重写。本质上就是把代码修改了两遍，只不过更加痛苦一些。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并不是每修复一个 bug 都需要写测试。很多公司都流传一个常见的教条，就是认为每修复一个 bug，都需要为它写测试，用于确保这个 bug 不再发生。甚至有人要求你这样修复一个 bug：先写一个测试，重现这个 bug，然后修复它，确保测试通过。这种思维其实是一种生搬硬套的教条主义，它会严重的减慢工程的进度，而代码的质量却不会得到提高。写测试之前，你应该仔细的思考一个问题：这个 bug 有多大可能会在同一个地方再次发生？很多低级错误一旦被看出来之后，它就不大可能在同一个地方再次出现。在这种情况下，你只需手工验证一下 bug 消失了就可以。&lt;/p&gt;

&lt;p&gt;为不可能再出现的 bug 大费周折，写 reproducer，构造各种数据结构去验证它，保证它下次不会再出现，其实是多此一举。同样的低级错误就算再出现，也很可能不在同一个地方。写测试不但不能保证它不再发生，而且浪费你很多时间。这测试在每次 build 的时候都会消耗时间，每次编译都因为这些测试多花几分钟，累积起来之后，你就发现工程进度明显减慢。只有当发现已有的测试没有抓住程序必须满足的重要性质时，你才应该写新的测试。你不应该是为这个 bug 而写测试，而是为代码的性质而写测试。这个测试的内容不应该只是防止这个 bug 再次发生，而是要确保 bug 所反映出来的，之前缺失的“性质”得到保证。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免使用 mock，特别是多层的 mock。很多人写测试都喜欢用很多 mock，堆积很多层，以为只有这样才能测试到路径比较深的模块。其实这样不但非常繁琐费事，而且多层的 mock 往往不能产生足够多样化的输入，不能覆盖各种边界情况。如果你发现测试需要进行多层的 mock，那你应该考虑一下，也许你需要的不是 mock，而是改写代码，让它更加模块化。如果你的代码足够模块化，你不应该需要多层的 mock 来测试它。你只需要为每一个模块准备一些输入（包括边界情况），确保它们的输出符合要求。然后你把这些模块像管道一样连接起来，形成一个更大的模块，测试它也符合输入输出要求，以此类推。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要过分重视“测试自动化”，人工测试也是测试。写测试，这个词往往隐含了“自动运行”的含义，也就是假设了要不经人工操作，完全自动的测试。打一个命令，它过一会就会告诉你哪些地方有问题。然而，人们往往忽略了“人工测试”。他们没有意识到，人工去试验，去观察，也是一种测试。所以你就发现这样的情况，由于自动测试在很多时候非常难以构造（比如，如果你要测试一段复杂的交互式GUI代码的响应），很多人花了很多时间，利用各种测试框架和工具，甚至遥控 WEB 浏览器去做一些自动操作，花太多时间却发现各种不可靠，没法测到很多东西。&lt;/p&gt;

&lt;p&gt;其实换一个思路，他们只需要花几分钟的时间，就可以用人工的方式观察到很多深入的问题。过分的重视测试自动化的原因，往往在于一个不切实际的假设，他们假设错误会频繁的再次发生，所以自动化了可以省下人的力气。但是其实，一旦一个 bug 被修好，它反复出现的机会不会很大的。过分的要求测试自动化，不但延缓了工程进度，让程序员恼火，效率低下，而且失去了人工测试的精确性。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免写太长，太耗时的测试。很多人写测试，叽里呱啦很长一串，到后来再看的时候，他已经不记得自己当时想测什么了。有些人本来用很小的输入就可以测试到需要的性质，他却总喜欢给一个很大的输入，下意识的以为这样更加靠谱，结果这测试每次都会消耗大量的 build 时间，而其实达到的效果跟很小的输入没有任何区别。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个测试只测试一个方面，避免重复测试。有些人一个测试测很多内容，结果每次那个测试失败，都搞不清楚到底是哪个部件出了问题。有些人为了“放心”，喜欢在多个测试里面“附带”测某些他认为相关的部件，结果每次那个部件出问题，就发现好多个测试失败。如果一个测试只测一个方面，不重复测同一个部件，那么你就可以很快的根据失败的测试，发现出问题的部件和位置。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;避免通过比较字符串来进行测试。很多人写测试的时候，喜欢通过打印出一些东西，然后使用字符串比较的方式来决定输出是否符合要求。一个常见的做法是把输出打印成格式化的 JSON，然后对比两个文本。甚至有人 JSON 都不用，直接就比较 printf 输出的结果。这种测试是非常脆弱的。因为字符串输出的格式往往会发生微小的变化，比如有人在里面加了一个空格之类的。把这种字符串作为标准输出，进行字符串比较，很容易因为微小的改动而使大量测试失败，导致很多的测试需要做不必要的修改。正确的做法，应该是进行结构化的比较，如果你要把标准结果存成 JSON，那么你应该先 parse 出 JSON 所表示的对象，然后再进行结构化的对比。PySonar2 的测试就是这样的做法，所以相当的稳定。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“测试能帮助后来人”的误区。每当指出测试教条主义的错误，就会有人出来说：“测试不是为了你自己，而是为了你走了以后，以后进来的人不犯错误。” 首先，这种人根本没有看清楚我在说什么，因为我从来没有反对过合理的测试。其次，这种“测试能帮助后来人”，其实是没有经过实践检验，站不住脚的说法。如果你的代码写得很乱，就算你测试再多，后来人也无法理解，反倒被莫名其妙的测试失败给弄得更糊涂，不知道是自己错了还是测试错了。我已经说过了，测试不能完全保证代码不被改错，实际上它们防止代码被改错的作用是非常弱的。无论如何，后来人都必须理解原来的代码的逻辑，知道它在做什么，否则他们不可能做出正确的修改，就算你有再严密的测试也一样。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;   举一个亲身的例子。我在 Google 做出 PySonar 之后，最后一个测试都没写。第二次我回到 Google，我的上司 Steve Yegge 对我说：“你走了之后，我改了一些你的代码，真是太清晰，太好把握了，修改你的代码是一种快乐！” 这说明什么问题呢？我并不是说你可以不写测试，但这个例子说明，测试对于后来人的作用，并不是你有些人想象的那么大。创造清晰的代码才是解决这个问题的关键。&lt;/p&gt;

&lt;p&gt;   这种怕人突然走了，代码无法维护的想法，导致了一些人对测试过分的重视，但测试却不能解决这种问题。相反，如果测试太繁琐，做不必要的测试，反而容易让员工不满，容易走人，去加入在这方面更加有见地的公司。有些公司以为有了测试，就可以随便打发人走，这种想法是大错特错的。你需要明白的一个事情是，代码永远是属于写出它的那个人的，就算有测试也一样。如果核心人物真的走了，就算你有再多的测试也没用的，所以解决的方法就是把他们留住！一个有远见的公司总是通过其他的手段解决这个问题，比如优待和尊重员工，创造良好的氛围，使得他们没那么快想走。另外，公司必须注意知识的传承，防止某些代码只有一个人理解。&lt;/p&gt;

&lt;h3&gt;案例分析&lt;/h3&gt;

&lt;p&gt;有人会疑问，我凭什么可以给别人讲这些经验，我自己为此有什么成功的案例呢？所以现在来讲讲我做过的几个东西，以及我亲眼目睹的测试教条主义者们的失败案例。&lt;/p&gt;

&lt;h4&gt;Google&lt;/h4&gt;

&lt;p&gt;很多人可能听说过我在 &lt;a href=&quot;http://www.yinwang.org/blog-%EF%BC%8Ccn/2014/12/31/google-story&quot;&gt;Google&lt;/a&gt; 做的 PySonar。当时 Google 的队友们战战兢兢，说这么高难复杂的东西要从头做起，几乎是不可能的。特别是某位队友，一开头就吵着要我写测试，一直吵到最后，烦死我了。他们为什么这么担心呢？因为对 Python 做类型推导是非常高难度的代码，需要相当复杂的数据结构和算法，需要精通 Python 的语义实现。&lt;/p&gt;

&lt;p&gt;作为一个训练有素的专家，我没有在乎他们的咋呼，没有信他们的教条。我按照自己的方式组织代码，进行精密的思考，设计和推理，最终在三个月之内做出了非常优雅，正确，高性能，而又容易维护的代码。PySonar 到现在仍然是世界上最先进的 Python 类型推导和索引系统，被多家公司采用，用于处理数以百万计的 Python 代码。，&lt;/p&gt;

&lt;p&gt;如果我当时按照 Google 队友的要求，采用已有的开源代码，或者过早的写了测试，别说无法在三个月的实习时间之内完成这个东西，就算折腾好几年也没有可能。&lt;/p&gt;

&lt;h4&gt;Shape Security&lt;/h4&gt;

&lt;p&gt;这种思维方式最近的成功实例，是给 Shape Security 做的一个先进的 JavaScript 混淆器（obfuscator）和对集群（cluster）管理系统的改进。不要小看了这个 JS 混淆器，它的混淆能力要比 uglify 之类的开源工具强很多，也快很多。它不但包含了 uglify 的变量换名等基本功能，而且含有专门针对人类和编译器的复杂化，使得没人能看出一点线索这个程序到底要干什么，让最先进的 JS 编译器也无法把它简化。&lt;/p&gt;

&lt;p&gt;其实这个混淆器也是一种编译器，只不过它把 JavaScript 翻译成不可读的形式。在这个项目中，由于失之毫厘就可以差之千里，我采用了从 Chez Scheme 编译器学过来的，非常严密的测试方法。对每一个编译器的步骤（pass），我都给它设计一些正好可以测到这个步骤的输入代码（比如，具有函数定义的，for循环，try-catch的，等等）。Pass 输出的代码，经过 JavaScript 解释器执行，把结果跟原来程序的执行结果对比。每一个测试程序，经过每一个 pass，输出的中间结果都跟标准结果进行对比，如果错了就表明那个 pass 有问题，出错的小程序会指出大概是哪一个部分出了问题。遵循小巧，不冗余，不重复的原则，我总共只写了40多个非常小的 JavaScript 程序。由于这些测试涵盖了 JavaScript 的所有构造而且几乎不重复，它们能够准确的定位到错误的改动。最后，这个 JS 混淆器能够正确的转换像 AngularJS 那么大的项目，确保语义的正确，让人完全无法读懂，而且能有效地防止被优化器（比如 Closure Compiler）简化掉。&lt;/p&gt;

&lt;p&gt;相比之下，过度鼓吹测试和可靠性的人，并没能制造出这么高质量的混淆器。其实在我进入团队之前，里面的两三位高手已经做了一个混淆器，项目延续了好多个月。这片代码一直没能发布给客户用，因为它的换名部件总是会在某些情况下输出错误的代码，修改了好多次仍然会出错。不是100%的正确，这对于程序语言的转换器来说，是不可接受的。换名只是我的混淆器里的一个步骤，它还包含大概十个类似的步骤，可以把代码进行各种转换。&lt;/p&gt;

&lt;p&gt;在实现换名器的时候，队友们让我直接拿他们以前写的换名代码过来，把 bug 修好就可以。然而看了代码之后，我发现这代码没法修，因为它采用了错误的思路，缝缝补补也不可能达到100%的正确，而且明显效率低下，所以我决定自己重写一个。由于轻车熟路，我只花了一下午的时间，就完成了一个正确的换名器，它完全符合 JavaScript 的语义，各种奇葩的作用域规则，而且结构非常简单。说白了，这个换名器也是一种&lt;a href=&quot;http://www.yinwang.org/blog-cn/2012/08/01/interpreter&quot;&gt;解释器&lt;/a&gt;。对解释器的深刻理解，让我可以很容易的写出任何语言的换名器。&lt;/p&gt;

&lt;p&gt;不幸的是，历史再次重演了 ;) 队友们听说我花一下午重写了一个换名器，非常紧张，咋呼地跟我说：“你知道我们的换名器是花了多少个月的时间做出来的吗？你知道我们写了多少测试来保证它的正确性吗？你现在一下午做出来一个新的，你如何能保证它的正确！” 我不知道他们怎么好意思说出这样的话来，因为事实是，他们花了这么多个月，耗费这么多人力，写了这么多的测试，做出来的换名器却仍然有 bug，没法用。当我把我写的测试和几个大点的 open source 项目（AngularJS, Backbone 等）放进他们的换名器之后，就发现有些地方出问题了，而所有的测试和 open source 项目通过我的换名器，却得到完全正确的代码。另外经过性能测试，我的换名器速度要快四倍的样子。所以就像 &lt;a href=&quot;http://www.yinwang.org/blog-cn/2014/02/18/dijkstra-interview&quot;&gt;Dijkstra&lt;/a&gt; 所说：“最优雅的程序往往也是最高效的。”&lt;/p&gt;

&lt;p&gt;结束这个项目之后，我换了一个团队（cluster团队），这个团队的人要好很多，低调而且幽默。Shape Security 的产品（Shape Shifter）里面包含一个高可靠（HA）集群管理系统，它可以通过网络，选举 leader，构建一个高容错的并行处理集群。这个集群管理系统一直以来都是公司里很复杂，却是可靠性要求最高的一个部件，一旦出问题就可能有灾难性的后果。确实，它当时可靠性非常高，从来没出过问题。但由于历史原因，它的代码过度复杂而缺乏模块化，以至于很难扩展来应付新的客户需求。我进入这个新团队的任务，就是对它进行大规模的简化，模块化和扩展，让它满足新的需求。&lt;/p&gt;

&lt;p&gt;在这个项目中，由于代码的改动幅度很大，在同事和部门领导的理解，信任和支持下，我们决定直接抛弃已有的测试，完全靠严格而及时的 code review，逻辑推理，推敲讨论，手工试验来保证代码的正确。在我修改代码的同时，一位更熟悉已有代码的队友一直通过 git 默默监视着我的每一次改动，根据他自己的经验来判断我的改动是否偏离了原来的语义，及时与我交流和讨论。由于这种灵活而严格的方式，工程不到两个月就完成了。改进后的代码不但更加模块化，更可扩展，适应了新的需求，而且仍然非常可靠。假设部门领导是“测试教条主义者”，不允许抛弃已有的测试，这样的项目是绝对不可能如期完成的。然而在当今世界遇到这样领导的机会，恐怕十个人里面不到一个吧。&lt;/p&gt;

&lt;h4&gt;Coverity&lt;/h4&gt;

&lt;p&gt;最后，我举一个由于测试方式不当而非常失败的案例，那就是 Coverity 的 Java 静态分析产品。我承认 Coverity 的 C 和 C++ 分析器也许是非常好的，然而 Java 的分析器，很难说。当我进入 Coverity 的时候，同事们已经忍受了整整一年的管理层的威逼和高压，超时过劳工作，写出了基本的新产品和很多的测试。可是由于技术债太多，再多的测试也没能保证产品的可靠性。&lt;/p&gt;

&lt;p&gt;我的任务就是利用我深入的 PL 知识，不停的修补前人留下来的各种蹊跷 bug。有些 bug 需要运行20多分钟之后才出现，一次还看不出是怎么回事，所以修起来非常耗时。有时候我只好趴在电脑前面养神，时不时的睁眼看看结果。Coverity 是如此的在乎测试，他们要求每修复一个 bug 你就必须写出新的测试。测试必须能够如实的重现 bug 的现象，修复之后测试必须能够通过。这看似一个很在乎代码质量的做法，然而它不但没能保证产品的稳定可靠，而且大幅度的减慢了工程进度，并且造成员工的疲惫和不满。&lt;/p&gt;

&lt;p&gt;有一次他们分配给我一个 bug：在分析一个中型项目的时候，分析器似乎进入了死循环，好几个小时都不能完成。因为 Coverity 的全局静态分析，其实就是某种图遍历算法。当这个图里面有回路的时候，你就必须小心，如果不问青红皂白就递归进去，就可能进入死循环。避免死循环的办法很简单，你构造一个图节点的集合（Set），然后把它传递到函数里面作为参数。 每当访问一个节点，你先检查这个节点是否已经在这个集合里，如果在你就直接返回，否则你就把这个节点加入到集合里，然后递归处理这个节点的子节点。它的 C++ 代码大概就像这个样子：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;void traverse(Node node, Set&amp;lt;Node&amp;gt; &amp;amp;visited)
{
  if (visited.contains(node)) {
    return;
  } else {
    visited.add(node);
    process_node(node, visited);   // 里面会递归调用 traverse
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;查看代码之后我发现，代码其实没有进入“死循环”，而是进入了指数复杂度的计算，所以很久都不能完成。这是因为写这函数的人不小心，或者没有理解 C++ 的函数参数缺省是传值（做拷贝）而不是传引用，所以他忘了打那个“&amp;amp;”，所以函数被递归调用的时候不是传递原来的集合，而是做了一个拷贝。每一次递归调用&lt;code&gt;traverse&lt;/code&gt;，visited 都得到一个新的拷贝，所以返回之后，visited 的值就恢复到之前的状态，就像 node 被自动 remove 了一样。所以这个函数仍然会在某种情况下再次访问这个节点。这样的代码不会进入死循环，然而在某种特殊的图结构下，这会造成指数级的时间复杂度（请想一下这是什么样的一种图）。&lt;/p&gt;

&lt;p&gt;本来很明显的一个图论算法问题，加一个“&amp;amp;”就修好了，手工试验也发现问题消失了。然而 Coverity 的测试教条主义者们（包括写出这 bug 的那人自己），吵着闹着，严肃命令我必须写出测试，构造出可以造成这种后果的数据结构，确保这个 bug 不会再重新出现。&lt;/p&gt;

&lt;p&gt;为一个我根本不会犯的错误写测试，而且它不可能再次发生，这不是很搞笑吗？就算你写了测试，也不能保证同样的事情不再发生。如果你不小心漏掉“&amp;amp;”，下次同样的问题还会发生，并且发生在另外的地方，而你却没有给那块代码写测试，所以给这个 bug 写测试，并不能防止同样的问题再次发生。这就像一个技术不过关的赛车手，他在别人不大可能撞车的地方撞了车，然后就要求赛场在那个地方装上轮胎护栏。可是下一次，这个车手又会在另一个其他人都不会撞车地方撞车……&lt;/p&gt;

&lt;p&gt;稍微有点图论常识，熟悉 C++ 基本概念的人，都不会犯这种错误。防止这种问题，只有靠个人的技术和经验，而不能靠测试。防止它再次发生的最好办法，恐怕是开个会把这个问题讲清楚，让大家理解，下次不要再犯。所以给这个 bug 写测试，完全是多此一举。跟队友们讲解了这个原理，他们听了之后，仿佛什么都没有听到一样，仍然强硬的要求：“可是你还是得写这个测试，因为这是我们的规定！你知道要是出了 bug，送一个销售工程师去客户那里，要花多少钱吗……” 无语了。&lt;/p&gt;

&lt;p&gt;Coverity 的 Java 分析，就是经常因为这种测试教条主义，使得项目进展及其痛苦和缓慢，却仍然 bug 百出。Coverity 的其他的问题，还包括我上面指出的，写重复的测试，一个测试测太多东西，使用字符串比较来做测试，等等。你恐怕很难想象，一个制造旨在提高代码质量的产品的公司，自己代码的质量是这样维护的 :P&lt;/p&gt;

&lt;h3&gt;完&lt;/h3&gt;

&lt;p&gt;由于绝大多数人对测试的误解如此之深，测试教条主义的流毒如此之广，导致许许多多优秀的程序员沉沦在繁琐的测试驱动开发中，无法舒展自己的长处。为了大家有一个轻松，顺利又可靠的工作环境，我希望大家多多转发这篇文章，改变这个行业的陋习。我希望大家在工程中理性的对待测试，而不是盲目的写测试，只有这样才能更好更快的完成项目。&lt;/p&gt;

&lt;p&gt;（由于这篇文章包含了我很多年的经验和深入的见解，希望你觉得有收获的话为此付费。建议价格是5美元，或者30人民币。【&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/04/13/pay-blog&quot;&gt;付费方式&lt;/a&gt;】）&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tests</guid>
<pubDate>Wed, 14 Sep 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Tesla autopilot 引起致命车祸</title>
<link>http://yinwang.org/blog-cn/2016/07/10/tesla-autopilot-fatal-crash</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Tesla autopilot 引起致命车祸&lt;/h2&gt;
                            &lt;p&gt;好一段时间没关心 Tesla 了，今天才发现他们的 autopilot 终于引起了&lt;a href=&quot;http://www.pbs.org/newshour/rundown/deadly-tesla-crash-exposes-confusion-over-automated-driving&quot;&gt;致命的车祸&lt;/a&gt;。这场 Model S 撞上18轮大卡车的车祸，发生于5月7号，距今已经两个月了。 Tesla 把这事隐瞒了两个月之久，直到现在美国国家公路交通安全管理局（NHTSA）开始调查此事，才迫不得已公之于众。由于 Tesla 没有及时向政府监管部门报告事实，政府正在考虑对 Tesla 公司采取法律行动。&lt;/p&gt;

&lt;p&gt;本来都懒得再提 Tesla 这公司的名字，但是由于 Tesla 对于这起车祸态度极不端正，不但隐瞒事实，而且继续找各种借口为 autopilot 开脱罪名，让这玩具级别的技术继续危害无辜开车人的安全，很多人（包括新闻机构）对此的分析很多都抓不住关键，所以我不得不再出来说几句。&lt;/p&gt;

&lt;p&gt;死者名叫 &lt;a href=&quot;http://www.legacy.com/obituaries/ohio/obituary.aspx?pid=179994314&quot;&gt;Joshua Brown&lt;/a&gt;，40岁，曾作为炸弹专家，服役美国海军11年之久。退役以后成立了自己的技术公司，近段时间热衷于 Tesla 的电动车技术，还建立了一个 YouTube 频道，用于演示自己的 Tesla 车子。所以可以说，Joshua 对 Tesla 的 autopilot 使用方法已经很熟悉了。然而这不幸的事件，恰恰就发生在这个专家用户和热心人身上。&lt;/p&gt;

&lt;p&gt;Tesla 方面称，那天 Joshua 行驶在佛罗里达州一条中间有隔离带的公路上，符合规定的启用了 autopilot。行车途中，前方有一辆18轮卡车左转，由于卡车车厢是白色的，后面的天空也是白色，所以 autopilot 没发现这个卡车，没有进行刹车，最后 Model S 撞上卡车，车主身亡。白色卡车衬托在白色天空上，所以 autopilot 就把卡车当成空气，这是个什么情况……&lt;/p&gt;

&lt;p&gt;先不说这技术有什么问题，出了这种事情，Tesla 对此&lt;a href=&quot;https://www.teslamotors.com/en_GB/blog/tragic-loss&quot;&gt;反应&lt;/a&gt;让人非常的失望。不但没有基本的自我检查，反而各种狡辩，把责任全都推到用户身上。首先，他们从统计的角度，说明 Tesla 车引起死亡的比例，比其它车子小很多。然后旁敲侧击地想说明，就算是那人自己开车，也不能避免这种车祸。最后他们再三的强调，autopilot 的说明书已经声明，功能还不成熟，如果看到要出事而没有及时接管，你们自己负责！&lt;/p&gt;

&lt;p&gt;这些都是 Tesla 老一套的诡辩方法。首先，Tesla 的死亡比例比其它车要小，并不能掩盖 autopilot 存在严重问题的事实。死亡比例小可能跟 Tesla 的技术没有很大关系，Tesla 是新公司，车都很新所以不容易出机械故障，而且买 Tesla 的都是有钱人，受过良好的教育，懂技术，所以一般不会乱开。那这种死亡比例，跟老牌子的车比是不公平的。其他牌子的车总数比 Tesla 多太多了，很多车子都十几二十年老掉牙，开车的各种人都有，酒鬼也有，老汉也有，罪犯也有，当然事故比例就上去了。如果你只看其它牌子最近几年的新车和豪华车，死亡比例拿来算一下，就很小。&lt;/p&gt;

&lt;p&gt;如果你光看 autopilot 导航的总里程数，事故比例恐怕就上去了，因为很多 Tesla 用户可能没有启用 autopilot，或者用的很少。Autopilot 不是第一次引起车祸了，之前我的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/01/10/tesla-autopilot&quot;&gt;另一篇文章&lt;/a&gt;已经提到，由于它的视觉技术不成熟，引发了许多险些发生车祸的情况，而且最近引起了好多次真正的车祸。要知道微小的比例落在一个人头上，就等于100%的不幸。等你因为 autopilot 而受害，才会发现 Tesla 摆出来的那些统计数字，对你其实毫无意义。也许，它确实造福了全人类，可惜死伤的人是你或者你的家人，而且那是因为 autopilot 极其弱智的判断错误…… 你会因为统计数字很安全而饶了 Tesla 吗？&lt;/p&gt;

&lt;p&gt;另外 Tesla 喜欢旁敲侧击的指出 autopilot 的驾驶能力高于人类，而事实并不是那样。你怎么能证明人开车不能避免这车祸？Tesla 说：“驾驶员和 autopilot 都没有看到卡车。” 你们怎么知道驾驶员没有看见卡车？那可是18轮的大卡车！说白色的侧面车厢映在白色的天空，所以人看不见它，这不是搞笑吗。&lt;/p&gt;

&lt;p&gt;一个东西是白色的，不等于它是看不见的，一个不透明的东西会挡住后面的景物，这一点人是很清楚的。白色的物体也会有反光，纹理会跟天空不一样，人可以通过这种反光感知它的存在。卡车不止有白色的侧面，还有黑色的轮子，车头上有烟囱，车窗，油箱，…… 各种其它颜色的附件。为了让其他人在夜间能看到车厢的大小，大卡车必须在车厢的八个角上都安装红色的警示灯，这些灯在白天不亮的时候也看得见的。就算天空是白色，人也是不可能看不见它，把卡车当成空气的。所以我猜真实情况是，驾驶员发现 autopilot 判断错误，想接管过来，但已经来不及了。要知道这个反应时间也许不到一秒！人死了，当然死无对证。&lt;/p&gt;

&lt;p&gt;从多次的事故现象中，我分析出这样一个规律，虽然 Tesla 声称 Model S 上装备了雷达和声呐，但是 autopilot 的操作却似乎仅靠摄像头的“像素”，通过神经网络进行图像分析，所以它才会连18轮大卡车这么巨型的东西都没有发现，在路上看到个树影还以为是障碍物…… 这些都是人根本不会犯的奇葩错误。我请大家不要对自动驾驶技术过于乐观，急于求成。机器视觉在某些地方是很有用的技术，然而它要能被用于自动驾车，还有非常长的路要走。&lt;/p&gt;

&lt;p&gt;Tesla 确实警告过人们，说这个技术还不成熟，你必须把手一直放在方向盘上，准备随时接管，然而这并不能免除 Tesla 的责任。首先，Tesla 根本就不应该把不成熟的技术发布出来，而且大肆宣传，搞得大家以为它很先进很可靠似的，争相试用。其次，说明书上的警告，在法律上也许是没有效力的。你要求别人随时接管，那么你必须在可能判断错误的时候给出警示，而且给人足够的响应时间，才能算是合理。&lt;/p&gt;

&lt;p&gt;Autopilot 的设计是有严重问题的。它操纵着车子，却不给人解释自己看见了什么，准备进行什么操作，在道路情况超越了自己能力的时候，也不给人提示，以至于人根本不知道它出了问题，不能及时接管。要知道，车在直走的时候，autopilot 是否判断正确，人往往是看不出来的。一辆没有 autopilot（只有普通  cruise  control）的车子，跟一辆启用了  autopilot 的车子，在匀速直线运动的时候，人是无法察觉出任何区别的。可是人知道 autopilot 会自动刹车，而普通的  cruise  control 不能，所以人就会期望有 autopilot 的车子会刹车。等你发现它一声不吭，前面有障碍物却没有刹车，才会知道它有判断错误，可是那个时候就已经晚了。&lt;/p&gt;

&lt;p&gt;所以在这种情况下，Tesla 虽然事先有“免责声明”，把责任全都推在用户头上，在法庭上其实仍然可以败诉，因为他们对用户提出的要求是不切实际的，没有人能够在上述 autopilot 判断错误情况下及时的接管过来。我建议这起车祸死者的家属把 Tesla 告上法庭，要求巨额赔偿。我也建议所有 Tesla 的车主，为了对自己和他人的生命负责，请关闭 autopilot 这个功能！Tesla 根本就不懂如何设计自动驾驶系统，技术不过硬，设计有缺陷，基本就是个玩具。生命很宝贵，用自己的生命来给所谓的“新技术”做试验品，是不值得的。&lt;/p&gt;

&lt;p&gt;珍爱生命，远离 autopilot！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tesla-autopilot-fatal-crash</guid>
<pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Google Maps的设计问题</title>
<link>http://yinwang.org/blog-cn/2016/07/05/google-maps</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Google Maps的设计问题&lt;/h2&gt;
                            &lt;p&gt;我开车的时候喜欢用 Google Maps 导航。虽然我对 Google 这公司挺有意见，然而 Google Maps 确实是好东西。比较过其他几个导航软件（Waze，Scout Maps）之后，我发现 Google Maps 在大部分时候还是表现最好的一个。&lt;/p&gt;

&lt;p&gt;然而这并不等于它的设计是没有问题的。Google Maps 时不时的会改变设计，有些地方改进了，另外一些地方却可能被改得还不如以前。我已经不止一次的向 Google Maps team 提出反馈意见。&lt;/p&gt;

&lt;p&gt;现在我就把最近烦扰我的一个问题讲一下。我已经通过 app 给 Google Maps team 发送了 feedback，但我希望这种设计问题引起足够的重视，所以也在这里说一下。&lt;/p&gt;

&lt;p&gt;这个最近发现的问题是，Google Maps 显示的公路号码字体太小。它把州际公路（interstate）之类的公路号码，显示成路牌上的样式。比如下面的这个 Interstate 880，被显示成带有弧形花边，红蓝底色的路牌样式。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-d0dfc31379ac5331.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;这看似美观，平时在手机上看貌似没什么问题，然而在开车的时候你就会发现，里面的号码很难看清楚。其原因是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把带有这个花边的路牌嵌入到导航提示里面之后，由于整个路牌的高度和旁边字体的高度一样，公路号码“880”的字体，比旁边的字小了很多（请比较“880”和“North”的大小）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开车的时候，手机架在机座上，离眼睛有一定距离，而且由于车速很快，你只有不超过一秒钟的安全时间可以去瞄手机。所以我经常发现瞄一眼是根本没法看清楚这个花边里面的号码（880）的，你得盯着手机看好一会儿。有时候我把头凑近手机，都很不容易看清楚。这对于开车的人是一个不小的干扰，可能会引起交通事故。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;湾区的很多高速公路号码只差一个数字，比如 280，380，680，880…… 这么小的字体，很容易看不清楚这号码到底是哪一个！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;实际上你观察一下真正的路牌，就会发现公路号码的字体，跟旁边文字的比例，并不是像 Google Maps 上那个样子。请观察下图中的路牌，号码“280”和“101”的字体，和旁边的文字“SOUTH”，“TO”，“NORTH”，“San Francisco”其实是一样大，甚至更大一些。加上 INTERSTATE 的盾形花边，这个标志的尺寸比旁边的文字要大很多。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-43f9258afbc7373a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;所以 Google Maps 一片好心，想把公路号码做得很“形象”和“直观”，做得像路牌的样子，结果比例不对，帮了倒忙。对此我提出的建议是：&lt;/p&gt;

&lt;p&gt;方式1：不要把公路号码显示为路牌的样式，直接使用像“I-440”这样的文本来显示路名。很少有人会在乎公路号码的样式是否美观，他们只在意是否能清楚地看到号码，所以这可能是最好的选择。很多其他导航软件和专用 GPS 设备（比如 Waze，Garmin）都是直接采用文本显示公路号码。&lt;/p&gt;

&lt;p&gt;方式2：保留路牌样式，但是需要把路牌的尺寸增加到真正的路牌字体比例，也就是说让路牌里的号码跟旁边的字体大小一样。这个方式放到 Google Maps 的导航提示里面，恐怕会让导航提示的宽度变大，占用更多屏幕空间，所以虽然也许可行，但可能不如第一种方式。&lt;/p&gt;

&lt;h3&gt;其它一些问题&lt;/h3&gt;

&lt;p&gt;当然，字体大小并不是我发现的 Google Maps 唯一的问题。它还有其他一些小问题，有一些我已经向 Google Maps 的 team 提供了反馈，已经修复，还有一些仍然存在。现在我把这些小问题指出来，其中一些相当的讨厌：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[已修复] Google Maps 曾经在一段时间采用这样一种设计：当它通过对交通信息进行分析，得知有另一条时间更短的路线，它会弹出一个窗口，询问用户是否要选择这条更快的路（Yes/No?）。这个窗口有十几秒的延时，到时间之后如果你没有按屏幕，窗口会自动消失，并且自动选择新的路线。&lt;/p&gt;

&lt;p&gt;缺省选择新的路线，是一个很不合理的设计。在开车的时候，你必须集中注意力在路上，几乎没有时间去相应弹出的窗口。而且这个窗口字体和按钮都很小，开车人可能根本没时间去读里面的内容，即使读了也不容易按中正确的按钮。到时间没有动作，导航系统自动切换到新的路线，而不是保留用户最初的选择。未经允许改变用户的路线选择，可以说是一个反人类的设计。&lt;/p&gt;

&lt;p&gt;我及时向 Google Maps 团队提供了强烈的反馈，这个问题已经改变。现在缺省的选择是保留原来的路线。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[还存在] Google Maps 有时候会忽然重新计算并且改变原来的路线。改变的原因也许是因为开车人没有按原路线走，然而这有可能不是开车人的意愿。举一个例子，从南湾地区去三藩市方向，有两条高速公路可以走：280 和 101。白天我一般会选择 280，因为 280 车不多，而且风景优美一些。我会在 Google Maps 界面选择 280 的路线。&lt;/p&gt;

&lt;p&gt;然而当我开出停车场，在第一个路口由于 GPS 的方向还未适应过来，我有可能转错方向。这个时候 Google Maps 会根据我的方向重新计算路线，这时候它很有可能自动把整个路线换成走 101，而不再是 280。由于最初的方向错误而换掉整体要走的高速公路，是非常不合理的。你以为它会按你原来的选择走 280，结果最后发现它把你带到了 101 的入口……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">google-maps</guid>
<pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>养生节目带来的危害</title>
<link>http://yinwang.org/blog-cn/2016/06/28/yangsheng</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;养生节目带来的危害&lt;/h2&gt;
                            &lt;p&gt;国内总是流行各种各样的“养生节目”，深受中老年人的欢迎。比如我爸妈，有时无聊了，就会转发给我一些养生节目，比如这个：『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』。这节目说，有人得了过敏性鼻炎，喷嚏鼻涕不断，严重脱发，头都半秃了，虚弱无力，性能力衰退…… 最后专家得出结论，是因为他每天早上喝一杯凉水导致的！&lt;/p&gt;

&lt;p&gt;据我观察，这些养生节目里面的理论，基本可以归为两种：好的和新的。可惜好的理论都不新，新的理论都不好。&lt;/p&gt;

&lt;h3&gt;好的理论&lt;/h3&gt;

&lt;p&gt;第一类理论，就是把人们早已熟悉的，久经考验的常识，比如早晚要刷牙之类的，拿来包装成“新理论”。这些理论当然错不到哪里去，然而却是每个人从小都已熟知的。现在挂着“专家”头衔的人出来一宣传，这些斯通见惯的常识，忽然间被老人家们当成了最新的研究成果。&lt;/p&gt;

&lt;p&gt;我遇到的这种例子挺多的。有时候父母给我发个信息，说你要注意这个那个习惯啊，不然会得什么什么样的病…… 这本来就是我从小就已经知道并且照办的事情，而且我还记得当年这东西就是我爸妈教给我的。现在让这帮“养生专家”一忽悠，倒像个新鲜事，又拿出来讲一遍，好像别人不知道一样…… “专家”的威力就是这么强大 :P&lt;/p&gt;

&lt;h3&gt;新的理论&lt;/h3&gt;

&lt;p&gt;第二类理论，就是胡编乱造出一些“新理论”，却没有经过科学实验证实。『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』就属于这一种情况。通常这种理论把问题的原因归结为某一个生活习惯（比如早上喝一杯凉水），而忽略所有其它引起问题的因素。这些理论的问题在于，它们通过臆断，得出错误的“因果关系”。&lt;/p&gt;

&lt;p&gt;据我了解，过敏性鼻炎，脱发等问题，很多都是因为基因遗传，跟人平时的生活习惯几乎没有关系。现在有一个人出现了过敏性鼻炎和脱发，而且碰巧这人早上起来喜欢喝一杯凉水，于是专家就得出一个可笑的结论：一定是喝凉水引起了过敏性鼻炎和脱发。&lt;/p&gt;

&lt;p&gt;养生专家们很喜欢把健康问题跟某些不起眼的习惯挂钩，这样就可以创造一些惊人的理论，却无法验证其真实性。他们可以说，就是因为你这个小小的习惯，导致了如此严重的健康问题。这样一来，他们就可以告诉你吃什么，不吃什么，做什么，不做什么。每过一段时间，这些人都会换一套不同的说法，让你感觉有新东西出来，却没发现这些其实跟之前的说法自相矛盾。老年人记性不好，看不出破绽，有些人为了健康不惜一切，仿佛活着就是为了不停地研究如何才能继续活着…… 这就是这帮养生专家和养生节目得以生存的关键。&lt;/p&gt;

&lt;p&gt;得出喝凉水引起了鼻炎，脱发，身体虚弱这样的结论，且不说它看起来有没有可能，你必须先经过科学实验。你不能只看一个人，因为数据量太小，很可能是偶然巧合，没法建立因果关系。所以实验必须要有两组人进行对照，就是所谓“对照实验”。一组人早上喝一杯凉水，另外一组人不喝。过一段时间，分析这两组人里面出现上述问题的人的比例，如果喝凉水的人大部分出现了问题，而不喝凉水的人大部分没有出现问题，你才有可以得出“喝凉水导致鼻炎和脱发”这样的结论。&lt;/p&gt;

&lt;p&gt;显然，这个节目里的专家并没有经过实验，而是引用（滥用）『黄帝内经』里面的各种阴阳理论。说早上阳气上升，喝一杯凉水把阳气给浇灭了，怎么能不得病哪！这显然是完全不科学，不负责任的说法。实际上这套阴阳理论是如此的模棱两可，跟占星学如出一辙，你可以利用这些说法来解释世界上的几乎任何现象！不管遇到好事还是坏事，同样的一句话，可以同时支持两种完全相反的结果。为什么它可以这样呢？因为这些说法本来模棱两可，所以不同的人从不同的角度去解释它，发现都是说得通的。&lt;/p&gt;

&lt;p&gt;这些养生节目，经常把严重身体问题的起因，归结为某些生活上的小习惯，吃什么，不吃什么之类，很容易让人忽略真正的起因，更加严重的因素，这属于一种误导。中老年人看了这些节目，往往盲目的认为坚持或者改变生活上的一些小习惯，就可以避免或者修正一些严重的身体疾患，结果耽误了真正科学研究出来的补救办法。在这种意义上，养生节目是有危害性的。我建议中老年人少看这种节目，多跟真正的医生了解科学的医疗知识。&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">yangsheng</guid>
<pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>IT业给世界带来的危机</title>
<link>http://yinwang.org/blog-cn/2016/06/20/it-and-society</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;IT业给世界带来的危机&lt;/h2&gt;
                            &lt;p&gt;昨天写了文章之后，回忆起这几年在湾区的经历，觉得自己是一个很不幸的人。然而就在今天，我的自怜奇妙的转换成了另一种感情，因为我看到了更不幸的人……&lt;/p&gt;

&lt;p&gt;正在女朋友 Cinny 的父母家吃饭，忽然窗外来了一个人。仔细一看，是个约莫十来岁年纪的漂亮白人女孩，她说：“亲爱的，你们想要一些刚从树上摘下来的新鲜李子吗？” 据女朋友妈妈介绍，她是邻居的女儿。之后我尝了一个李子，颜色已经黑透了，非常新鲜非常甜！&lt;/p&gt;

&lt;p&gt;随后我和 Cinny 出去散步。在她家的对面，耸立着两栋高大华丽的豪宅，看那样子，价值恐怕超过200万美元。两栋豪宅的中间，夹着一间样式非常不搭调的便宜小矮屋。这屋子周围被篱笆围了起来，可以看见里面种了很多的植物。在那门口的无花果树下，赫然出现这样的一个牌子：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-fbcae0ac0fa13486.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;它说：“请不要摘我的无花果。我失去了我的工作，需要依靠自己种的食物为生。我是一个生物学家，如果你知道有任何的工作，请告诉我。谢谢！” 这树上还挂着好几个类似的牌子，从它们看来，这位生物学家已经失业一年了……&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-18fdd10a61af7c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

&lt;p&gt;Cinny 说，吃饭时给我们送果子来的女孩，就是这家的孩子。我想起她甜美的笑容，不禁一阵心酸！哎，谁才是真正可怜的人？我之前在无病呻吟些什么啊……&lt;/p&gt;

&lt;p&gt;这些年来湾区的 IT 业大量的扩张，Apple，Google 等公司不停地在附近建新的办公楼。IT 业的过度发展，导致了其它行业的衰落，让附近土生土长的居民生存困难。本来公司的扩张应该引起经济的流通，社区的繁荣，人气的高涨，结果每当像 Google 这样的公司提供免费餐饮，附近就会有多少店铺关门，又有多少人失业，成为一片荒漠……&lt;/p&gt;

&lt;p&gt;是的，大家节省外出买饭的时间能为公司赚很多钱，自己也节省了不少开支。但是这些公司真的回报了社会吗？新闻早已经曝光，这些大公司利用美国税法的漏洞，每一家每年都导致政府少收上亿美元的税钱。没有收到税，就没法给这些丢了工作的人发福利，以至于他们落魄到这种地步。&lt;/p&gt;

&lt;p&gt;Cinny 告诉我，这家人可能也要卖掉房子，搬到别州去了。之前有好些邻居已经搬走了，其中有一些以前在附近开小店，卖很好吃的东西。现在这些儿时的美好回忆，都已经不在了……&lt;/p&gt;

&lt;p&gt;我们一直盲目的以为技术会改善人们的生活，很多人总是试图做一些 O2O 服务，甚至研制机器人和自动车，这样可以代替许多人的劳动。如果这些技术真的能代替繁重或者危险的劳动，那确实好。可是如果发明这些技术的公司不回报社会，反而想办法钻法律的漏洞避税，那就变得有害了。在创造这些技术的同时，我们有想过因为它们而失去工作，而又因为公司不交税，不回报社会而变卖房产，颠沛流离的无辜人们吗？&lt;/p&gt;

&lt;p&gt;作为一个 IT 人，我们不得不思考，这是不是一种无情的掠夺，我们是不是害虫？当我们帮助雇主掠夺了别人的工作之后，我们自己会不会就是下一个被社会抛弃，丢掉工作的人？“&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们在思考如何发展自己事业的同时，也应该思考如何回报社会了。否则我们面对的将是一片毫无生气的荒原，我们不会再看到幸福的笑脸……&lt;/p&gt;

&lt;p&gt;有人说这一切都是资本主义造的孽，而不能怪 IT 业。不过由于 IT 存在高度的“智能”和“自动”，它已经开始给资本主义的社会关系带来灾难性的影响。有位大胡子说，无产阶级是资本主义的掘墓人，那么我说，IT 业就是资本主义的定时炸弹，它离爆炸的那一天已经不远了。&lt;/p&gt;

&lt;p&gt;我想我们应该都能做点什么…… 话说，如果你知道湾区有招生物学家的工作，请联系我！&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">it-and-society</guid>
<pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Java 有值类型吗？</title>
<link>http://yinwang.org/blog-cn/2016/06/08/java-value-type</link>
<description>&lt;div style=&quot;margin: 2% 5% 2% 5%&quot;&gt;
            &lt;table&gt;
                &lt;tr&gt;
                    &lt;td width=&quot;60%&quot;&gt;
                        &lt;div style=&quot;padding: 2% 8% 5% 8%; border: 1px solid LightGrey;&quot;&gt;
                            &lt;h2&gt;Java 有值类型吗？&lt;/h2&gt;
                            &lt;p&gt;有人看了我之前的文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;Swift 语言的设计错误&lt;/a&gt;』，问我：“你说 Java 只有引用类型（reference type），但是根据 Java 的&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html&quot;&gt;官方文档&lt;/a&gt;，Java 也有值类型（value type）和引用类型的区别的。比如 int，boolean 等原始类型就是值类型。” 现在我来解释一下这个问题。&lt;/p&gt;

&lt;p&gt;Java 有值类型，原始类型 int，boolean 等是值类型，其实是长久以来的一种误解，它混淆了实现和语义的区别。不要以为 Java 的官方文档那样写就是权威定论，就可以说“王垠不懂” :) 当你认为王垠不懂一个初级问题的时候，都需要三思，因为他可能是大智若愚…… 看了我下面的论述，也许你会发现自己应该怀疑的是，Java 的设计者到底有没有搞明白这个问题 :P&lt;/p&gt;

&lt;p&gt;胡扯结束，现在来说正事。Java，Scheme 等语言的原始类型，比如 char，int，boolean，double 等，在“实现”上确实是通过值（而不是引用，或者叫指针）直接传递的，然而这完全是一种为了效率的优化（叫做 inlining）。这种优化对于程序员应该是不可见的。Java 继承了 Scheme/Lisp 的衣钵，它们在“语义”上其实是没有值类型的。&lt;/p&gt;

&lt;p&gt;这不是天方夜谭，为了理解这一点，你可以做一个很有意思的思维实验。现在你把 Java 里面所有的原始类型都“想象”成引用类型，也就是说，所有的 int, boolean 等原始类型的变量都不包含实际的数据，而是引用（或者叫指针），指向堆上分配的数据。然后你会发现这样“改造后”的 Java，仍然符合现有 Java 代码里能看到的一切现象。也就是说，原始类型被作为值类型还是引用类型，对于程序员完全没有区别。&lt;/p&gt;

&lt;p&gt;举个简单的例子，如果我们把 int 的实现变成完全的引用，然后来看这段代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int x = 1;    // x指向内存地址A，内容是整数1
int y = x;    // y指向同样的内存地址A，内容是整数1
x = 2;        // x指向另一个内存地址B，内容是整数2。y仍然指向地址A，内容是1。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;由于我们改造后的 Java 里面 int 全部是引用，所以第一行定义的 &lt;code&gt;x&lt;/code&gt; 并不包含一个整数，而是一个引用，它指向堆里分配的一块内存，这个空间的内容是整数 1。在第二行，我们定 int 变量 &lt;code&gt;y&lt;/code&gt;，当然它也是一个引用，它的值跟 &lt;code&gt;x&lt;/code&gt; 一样，所以 &lt;code&gt;y&lt;/code&gt; 也指向同一个地址，里面的内容是同一个整数：1。在第三行，我们对 &lt;code&gt;x&lt;/code&gt; 这个引用赋值。你会发现一个很有意思的现象，虽然 &lt;code&gt;x&lt;/code&gt; 指向了 2，&lt;code&gt;y&lt;/code&gt; 却仍然指向 1。对 &lt;code&gt;x&lt;/code&gt; 赋值并没能改变 &lt;code&gt;y&lt;/code&gt; 指向的内容，这种情况就跟 int 是值类型的时候一模一样！所以现在虽然 int 变量全部是引用，你却不能实现共享地址的引用能做的事情：对 &lt;code&gt;x&lt;/code&gt; 进行某种操作，导致 &lt;code&gt;y&lt;/code&gt; 指向的内容也发生改变。&lt;/p&gt;

&lt;p&gt;出现这个现象的原因是，虽然现在 int 成了引用类型，你却并不能对它进行引用类型所特有（而值类型没有）的操作。这样的操作包括：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;deref。就像 C 语言里的 &lt;code&gt;*&lt;/code&gt; 操作符。&lt;/li&gt;
&lt;li&gt;成员赋值。就像对 C struct 成员的 &lt;code&gt;x.foo = 2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;在 Java 里，你没法写像 C 语言的 &lt;code&gt;*x = 2&lt;/code&gt; 这样的代码，因为 Java 没有提供 deref 操作符 &lt;code&gt;*&lt;/code&gt;。你也没法通过 &lt;code&gt;x.foo = 2&lt;/code&gt; 这样的语句改变 &lt;code&gt;x&lt;/code&gt; 所指向的内存数据（内容是1）的一部分，因为 int 是一个原始类型。最后你发现，你只能写 &lt;code&gt;x = 2&lt;/code&gt;，也就是改变 &lt;code&gt;x&lt;/code&gt; 这个引用本身的指向。&lt;code&gt;x = 2&lt;/code&gt; 执行之后，原来数字 1 所在的内存空间并没有变成 2，只不过 x 指向了新的地址，那里装着数字 2 而已。指向 1 的其它引用变量比如 &lt;code&gt;y&lt;/code&gt;，不会因为你进行了 &lt;code&gt;x = 2&lt;/code&gt; 这个操作而看到 2，它们仍然看到原来那个1……&lt;/p&gt;

&lt;p&gt;在这种 int 是引用的 Java 里，你对 int 变量 &lt;code&gt;x&lt;/code&gt; 能做的事情只有两种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;读出它的值。&lt;/li&gt;
&lt;li&gt;对它进行赋值，使它指向另一个地方。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;这两种事情，就跟你能对值类型能做的两件事情没有区别。这就是为什么你没法通过对 &lt;code&gt;x&lt;/code&gt; 的操作而改变 &lt;code&gt;y&lt;/code&gt; 表示的值。所以不管 int 在实现上是传递值还是传递引用，它们在语义上都是等价的。也就是说，原始类型是值类型还是引用类型，对于程序员来说完全没有区别。你完全可以把 Java 所有的原始类型都想成引用类型，之后你能对它们做的事情，你的编程思路和方式，都不会因此有任何的改变。&lt;/p&gt;

&lt;p&gt;从这个角度来看，Java 在语义上是没有值类型的。值类型和引用类型如果同时并存，程序员必须能够在语义上感觉到它们的不同，然而不管原始类型是值类型还是引用类型，作为程序员，你无法感觉到任何的不同。所以你完全可以认为 Java 只有引用类型，把原始类型全都当成引用类型来用，虽然它们确实是用值实现的。&lt;/p&gt;

&lt;p&gt;一个在语义上有值类型的语言（比如 C#，Go 和 Swift）必须具有以下两种特性之一（或者两者都有），程序员才能感觉到值类型的存在：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;deref 操作。这使得你可以用 &lt;code&gt;*x = 2&lt;/code&gt; 这样的语句来改变引用指向的内容，导致共享地址的其它引用看到新的值。你没法通过 &lt;code&gt;x = 2&lt;/code&gt; 让其他值变量得到新的值，所以你感觉到值类型的存在。&lt;/li&gt;
&lt;li&gt;像 struct 这样的“值组合类型”。你可以通过 &lt;code&gt;x.foo = 2&lt;/code&gt; 这样的成员赋值改变引用数据（比如 class object）的一部分，使得共享地址的其它引用看到新的值。你没法通过成员赋值让另一个 struct 变量得到新的值，所以你感觉到值类型的存在。&lt;/li&gt;
&lt;/ol&gt;


&lt;p&gt;实际上，所有的数据都是引用类型就是 Scheme 和 Java 最初的设计原理。原始类型用值来传递数据只是一种性能优化（叫做 inlining），它对于程序员应该是透明（看不见）的。那些在面试时喜欢问“Java 是否所有数据都是引用”，然后当你回答“是”的时候纠正你说“int，boolean 是值类型”的人，都是本本主义者。&lt;/p&gt;

&lt;h3&gt;思考题&lt;/h3&gt;

&lt;p&gt;有人指出，Java 的引用类型可以是 null，而原始类型不行，所以引用类型和值类型还是有区别的。但是其实这并不能否认本文指出的观点，你可以想想这是为什么吗？&lt;/p&gt;

                        &lt;/div&gt;

                        &lt;div style=&quot;margin-top: 5px&quot;&gt;
                            &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                            &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:inline-block;width:728px;height:90px&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;6657867155&quot;&gt;&lt;/ins&gt;
                            &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                        &lt;/div&gt;
                    &lt;/td&gt;

                    &lt;td width=&quot;16%&quot; valign=&quot;top&quot;&gt;
                        &lt;script async src=&quot;//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js&quot;&gt;&lt;/script&gt;
                        &lt;ins class=&quot;adsbygoogle&quot; style=&quot;display:block&quot; data-ad-client=&quot;ca-pub-1331524016319584&quot; data-ad-slot=&quot;2703393155&quot; data-ad-format=&quot;auto&quot;&gt;&lt;/ins&gt;
                        &lt;script&gt;(adsbygoogle = window.adsbygoogle || []).push({});&lt;/script&gt;
                    &lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/div&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">java-value-type</guid>
<pubDate>Wed, 08 Jun 2016 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
