<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>当然我在扯淡</title>
<link>http://www.yinwang.org/</link>
<description></description>
<language>zh-cn</language>
<lastBuildDate>Tue, 30 Aug 2016 14:41:23 +0800</lastBuildDate>
<item>
<title>加入微软</title>
<link>http://yinwang.org/blog-cn/2016/08/29/microsoft</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;加入微软&lt;/h2&gt;&lt;p&gt;最近有些人试图从公司内部的 Skype 联系我，我都暂时没有回应。不过就像他们猜测的那样，我确实加入了微软。自从 Google 和 Coverity 的经历之后，我就对工作没有特别大的抱负，只希望能够有个安稳的生活。我在微软做的是很普通的编程工作，也没啥好宣扬和八卦的。&lt;/p&gt;&lt;p&gt;一些微软的朋友之前跟我联系，向我推荐微软，而且说愿意帮我引荐。在那个时候我其实已经拿了微软的 offer，所以暂时没有回应他们。在此我对这些人的好心表示感谢。如果你们愿意认识一下，或者找我吃饭聊天的话，我也很欢迎。为了避免不必要的烦扰，如果你从 Skype 发信息的话，请务必说明你的来意，为什么想联系我。谢谢！&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">microsoft</guid>
<pubDate>Mon, 29 Aug 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Tesla autopilot 引起致命车祸</title>
<link>http://yinwang.org/blog-cn/2016/07/10/tesla-autopilot-fatal-crash</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;Tesla autopilot 引起致命车祸&lt;/h2&gt;&lt;p&gt;好一段时间没关心 Tesla 了，今天才发现他们的 autopilot 终于引起了&lt;a href=&quot;http://www.pbs.org/newshour/rundown/deadly-tesla-crash-exposes-confusion-over-automated-driving&quot;&gt;致命的车祸&lt;/a&gt;。这场 Model S 撞上18轮大卡车的车祸，发生于5月7号，距今已经两个月了。 Tesla 把这事隐瞒了两个月之久，直到现在美国国家公路交通安全管理局（NHTSA）开始调查此事，才迫不得已公之于众。由于 Tesla 没有及时向政府监管部门报告事实，政府正在考虑对 Tesla 公司采取法律行动。&lt;/p&gt;&lt;p&gt;本来都懒得再提 Tesla 这公司的名字，但是由于 Tesla 对于这起车祸态度极不端正，不但隐瞒事实，而且继续找各种借口为 autopilot 开脱罪名，让这玩具级别的技术继续危害无辜开车人的安全，很多人（包括新闻机构）对此的分析很多都抓不住关键，所以我不得不再出来说几句。&lt;/p&gt;&lt;p&gt;死者名叫 &lt;a href=&quot;http://www.legacy.com/obituaries/ohio/obituary.aspx?pid=179994314&quot;&gt;Joshua Brown&lt;/a&gt;，40岁，曾作为炸弹专家，服役美国海军11年之久。退役以后成立了自己的技术公司，近段时间热衷于 Tesla 的电动车技术，还建立了一个 YouTube 频道，用于演示自己的 Tesla 车子。所以可以说，Joshua 对 Tesla 的 autopilot 使用方法已经很熟悉了。然而这不幸的事件，恰恰就发生在这个专家用户和热心人身上。&lt;/p&gt;&lt;p&gt;Tesla 方面称，那天 Joshua 行驶在佛罗里达州一条中间有隔离带的公路上，符合规定的启用了 autopilot。行车途中，前方有一辆18轮卡车左转，由于卡车车厢是白色的，后面的天空也是白色，所以 autopilot 没发现这个卡车，没有进行刹车，最后 Model S 撞上卡车，车主身亡。白色卡车衬托在白色天空上，所以 autopilot 就把卡车当成空气，这是个什么情况……&lt;/p&gt;&lt;p&gt;先不说这技术有什么问题，出了这种事情，Tesla 对此&lt;a href=&quot;https://www.teslamotors.com/en_GB/blog/tragic-loss&quot;&gt;反应&lt;/a&gt;让人非常的失望。不但没有基本的自我检查，反而各种狡辩，把责任全都推到用户身上。首先，他们从统计的角度，说明 Tesla 车引起死亡的比例，比其它车子小很多。然后旁敲侧击地想说明，就算是那人自己开车，也不能避免这种车祸。最后他们再三的强调，autopilot 的说明书已经声明，功能还不成熟，如果看到要出事而没有及时接管，你们自己负责！&lt;/p&gt;&lt;p&gt;这些都是 Tesla 老一套的诡辩方法。首先，Tesla 的死亡比例比其它车要小，并不能掩盖 autopilot 存在严重问题的事实。死亡比例小可能跟 Tesla 的技术没有很大关系，Tesla 是新公司，车都很新所以不容易出机械故障，而且买 Tesla 的都是有钱人，受过良好的教育，懂技术，所以一般不会乱开。那这种死亡比例，跟老牌子的车比是不公平的。其他牌子的车总数比 Tesla 多太多了，很多车子都十几二十年老掉牙，开车的各种人都有，酒鬼也有，老汉也有，罪犯也有，当然事故比例就上去了。如果你只看其它牌子最近几年的新车和豪华车，死亡比例拿来算一下，就很小。&lt;/p&gt;&lt;p&gt;如果你光看 autopilot 导航的总里程数，事故比例恐怕就上去了，因为很多 Tesla 用户可能没有启用 autopilot，或者用的很少。Autopilot 不是第一次引起车祸了，之前我的&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/01/10/tesla-autopilot&quot;&gt;另一篇文章&lt;/a&gt;已经提到，由于它的视觉技术不成熟，引发了许多险些发生车祸的情况，而且最近引起了好多次真正的车祸。要知道微小的比例落在一个人头上，就等于100%的不幸。等你因为 autopilot 而受害，才会发现 Tesla 摆出来的那些统计数字，对你其实毫无意义。也许，它确实造福了全人类，可惜死伤的人是你或者你的家人，而且那是因为 autopilot 极其弱智的判断错误…… 你会因为统计数字很安全而饶了 Tesla 吗？&lt;/p&gt;&lt;p&gt;另外 Tesla 喜欢旁敲侧击的指出 autopilot 的驾驶能力高于人类，而事实并不是那样。你怎么能证明人开车不能避免这车祸？Tesla 说：“驾驶员和 autopilot 都没有看到卡车。” 你们怎么知道驾驶员没有看见卡车？那可是18轮的大卡车！说白色的侧面车厢映在白色的天空，所以人看不见它，这不是搞笑吗。&lt;/p&gt;&lt;p&gt;一个东西是白色的，不等于它是看不见的，一个不透明的东西会挡住后面的景物，这一点人是很清楚的。白色的物体也会有反光，纹理会跟天空不一样，人可以通过这种反光感知它的存在。卡车不止有白色的侧面，还有黑色的轮子，车头上有烟囱，车窗，油箱，…… 各种其它颜色的附件。为了让其他人在夜间能看到车厢的大小，大卡车必须在车厢的八个角上都安装红色的警示灯，这些灯在白天不亮的时候也看得见的。就算天空是白色，人也是不可能看不见它，把卡车当成空气的。所以我猜真实情况是，驾驶员发现 autopilot 判断错误，想接管过来，但已经来不及了。要知道这个反应时间也许不到一秒！人死了，当然死无对证。&lt;/p&gt;&lt;p&gt;从多次的事故现象中，我分析出这样一个规律，虽然 Tesla 声称 Model S 上装备了雷达和声呐，但是 autopilot 的操作却似乎仅靠摄像头的“像素”，通过神经网络进行图像分析，所以它才会连18轮大卡车这么巨型的东西都没有发现，在路上看到个树影还以为是障碍物…… 这些都是人根本不会犯的奇葩错误。我请大家不要对自动驾驶技术过于乐观，急于求成。机器视觉在某些地方是很有用的技术，然而它要能被用于自动驾车，还有非常长的路要走。&lt;/p&gt;&lt;p&gt;Tesla 确实警告过人们，说这个技术还不成熟，你必须把手一直放在方向盘上，准备随时接管，然而这并不能免除 Tesla 的责任。首先，Tesla 根本就不应该把不成熟的技术发布出来，而且大肆宣传，搞得大家以为它很先进很可靠似的，争相试用。其次，说明书上的警告，在法律上也许是没有效力的。你要求别人随时接管，那么你必须在可能判断错误的时候给出警示，而且给人足够的响应时间，才能算是合理。&lt;/p&gt;&lt;p&gt;Autopilot 的设计是有严重问题的。它操纵着车子，却不给人解释自己看见了什么，准备进行什么操作，在道路情况超越了自己能力的时候，也不给人提示，以至于人根本不知道它出了问题，不能及时接管。要知道，车在直走的时候，autopilot 是否判断正确，人往往是看不出来的。一辆没有 autopilot（只有普通  cruise  control）的车子，跟一辆启用了  autopilot 的车子，在匀速直线运动的时候，人是无法察觉出任何区别的。可是人知道 autopilot 会自动刹车，而普通的  cruise  control 不能，所以人就会期望有 autopilot 的车子会刹车。等你发现它一声不吭，前面有障碍物却没有刹车，才会知道它有判断错误，可是那个时候就已经晚了。&lt;/p&gt;&lt;p&gt;所以在这种情况下，Tesla 虽然事先有“免责声明”，把责任全都推在用户头上，在法庭上其实仍然可以败诉，因为他们对用户提出的要求是不切实际的，没有人能够在上述 autopilot 判断错误情况下及时的接管过来。我建议这起车祸死者的家属把 Tesla 告上法庭，要求巨额赔偿。我也建议所有 Tesla 的车主，为了对自己和他人的生命负责，请关闭 autopilot 这个功能！Tesla 根本就不懂如何设计自动驾驶系统，技术不过硬，设计有缺陷，基本就是个玩具。生命很宝贵，用自己的生命来给所谓的“新技术”做试验品，是不值得的。&lt;/p&gt;&lt;p&gt;珍爱生命，远离 autopilot！&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tesla-autopilot-fatal-crash</guid>
<pubDate>Sun, 10 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Google Maps的设计问题</title>
<link>http://yinwang.org/blog-cn/2016/07/05/google-maps</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;Google Maps的设计问题&lt;/h2&gt;&lt;p&gt;我开车的时候喜欢用 Google Maps 导航。虽然我对 Google 这公司挺有意见，然而 Google Maps 确实是好东西。比较过其他几个导航软件（Waze，Scout Maps）之后，我发现 Google Maps 在大部分时候还是表现最好的一个。&lt;/p&gt;&lt;p&gt;然而这并不等于它的设计是没有问题的。Google Maps 时不时的会改变设计，有些地方改进了，另外一些地方却可能被改得还不如以前。我已经不止一次的向 Google Maps team 提出反馈意见。&lt;/p&gt;&lt;p&gt;现在我就把最近烦扰我的一个问题讲一下。我已经通过 app 给 Google Maps team 发送了 feedback，但我希望这种设计问题引起足够的重视，所以也在这里说一下。&lt;/p&gt;&lt;p&gt;这个最近发现的问题是，Google Maps 显示的公路号码字体太小。它把州际公路（interstate）之类的公路号码，显示成路牌上的样式。比如下面的这个 Interstate 880，被显示成带有弧形花边，红蓝底色的路牌样式。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-d0dfc31379ac5331.PNG?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;这看似美观，平时在手机上看貌似没什么问题，然而在开车的时候你就会发现，里面的号码很难看清楚。其原因是：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把带有这个花边的路牌嵌入到导航提示里面之后，由于整个路牌的高度和旁边字体的高度一样，公路号码“880”的字体，比旁边的字小了很多（请比较“880”和“North”的大小）。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在开车的时候，手机架在机座上，离眼睛有一定距离，而且由于车速很快，你只有不超过一秒钟的安全时间可以去瞄手机。所以我经常发现瞄一眼是根本没法看清楚这个花边里面的号码（880）的，你得盯着手机看好一会儿。有时候我把头凑近手机，都很不容易看清楚。这对于开车的人是一个不小的干扰，可能会引起交通事故。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;湾区的很多高速公路号码只差一个数字，比如 280，380，680，880…… 这么小的字体，很容易看不清楚这号码到底是哪一个！&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;实际上你观察一下真正的路牌，就会发现公路号码的字体，跟旁边文字的比例，并不是像 Google Maps 上那个样子。请观察下图中的路牌，号码“280”和“101”的字体，和旁边的文字“SOUTH”，“TO”，“NORTH”，“San Francisco”其实是一样大，甚至更大一些。加上 INTERSTATE 的盾形花边，这个标志的尺寸比旁边的文字要大很多。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-43f9258afbc7373a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;所以 Google Maps 一片好心，想把公路号码做得很“形象”和“直观”，做得像路牌的样子，结果比例不对，帮了倒忙。对此我提出的建议是：&lt;/p&gt;&lt;p&gt;方式1：不要把公路号码显示为路牌的样式，直接使用像“I-440”这样的文本来显示路名。很少有人会在乎公路号码的样式是否美观，他们只在意是否能清楚地看到号码，所以这可能是最好的选择。很多其他导航软件和专用 GPS 设备（比如 Waze，Garmin）都是直接采用文本显示公路号码。&lt;/p&gt;&lt;p&gt;方式2：保留路牌样式，但是需要把路牌的尺寸增加到真正的路牌字体比例，也就是说让路牌里的号码跟旁边的字体大小一样。这个方式放到 Google Maps 的导航提示里面，恐怕会让导航提示的宽度变大，占用更多屏幕空间，所以虽然也许可行，但可能不如第一种方式。&lt;/p&gt;&lt;h3&gt;其它一些问题&lt;/h3&gt;&lt;p&gt;当然，字体大小并不是我发现的 Google Maps 唯一的问题。它还有其他一些小问题，有一些我已经向 Google Maps 的 team 提供了反馈，已经修复，还有一些仍然存在。现在我把这些小问题指出来，其中一些相当的讨厌：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[已修复] Google Maps 曾经在一段时间采用这样一种设计：当它通过对交通信息进行分析，得知有另一条时间更短的路线，它会弹出一个窗口，询问用户是否要选择这条更快的路（Yes/No?）。这个窗口有十几秒的延时，到时间之后如果你没有按屏幕，窗口会自动消失，并且自动选择新的路线。&lt;/p&gt;

&lt;p&gt;缺省选择新的路线，是一个很不合理的设计。在开车的时候，你必须集中注意力在路上，几乎没有时间去相应弹出的窗口。而且这个窗口字体和按钮都很小，开车人可能根本没时间去读里面的内容，即使读了也不容易按中正确的按钮。到时间没有动作，导航系统自动切换到新的路线，而不是保留用户最初的选择。未经允许改变用户的路线选择，可以说是一个反人类的设计。&lt;/p&gt;

&lt;p&gt;我及时向 Google Maps 团队提供了强烈的反馈，这个问题已经改变。现在缺省的选择是保留原来的路线。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[还存在] Google Maps 有时候会忽然重新计算并且改变原来的路线。改变的原因也许是因为开车人没有按原路线走，然而这有可能不是开车人的意愿。举一个例子，从南湾地区去三藩市方向，有两条高速公路可以走：280 和 101。白天我一般会选择 280，因为 280 车不多，而且风景优美一些。我会在 Google Maps 界面选择 280 的路线。&lt;/p&gt;

&lt;p&gt;然而当我开出停车场，在第一个路口由于 GPS 的方向还未适应过来，我有可能转错方向。这个时候 Google Maps 会根据我的方向重新计算路线，这时候它很有可能自动把整个路线换成走 101，而不再是 280。由于最初的方向错误而换掉整体要走的高速公路，是非常不合理的。你以为它会按你原来的选择走 280，结果最后发现它把你带到了 101 的入口……&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">google-maps</guid>
<pubDate>Tue, 05 Jul 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>养生节目带来的危害</title>
<link>http://yinwang.org/blog-cn/2016/06/28/yangsheng</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;养生节目带来的危害&lt;/h2&gt;&lt;p&gt;国内总是流行各种各样的“养生节目”，深受中老年人的欢迎。比如我爸妈，有时无聊了，就会转发给我一些养生节目，比如这个：『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』。这节目说，有人得了过敏性鼻炎，喷嚏鼻涕不断，严重脱发，头都半秃了，虚弱无力，性能力衰退…… 最后专家得出结论，是因为他每天早上喝一杯凉水导致的！&lt;/p&gt;&lt;p&gt;据我观察，这些养生节目里面的理论，基本可以归为两种：好的和新的。可惜好的理论都不新，新的理论都不好。&lt;/p&gt;&lt;h3&gt;好的理论&lt;/h3&gt;&lt;p&gt;第一类理论，就是把人们早已熟悉的，久经考验的常识，比如早晚要刷牙之类的，拿来包装成“新理论”。这些理论当然错不到哪里去，然而却是每个人从小都已熟知的。现在挂着“专家”头衔的人出来一宣传，这些斯通见惯的常识，忽然间被老人家们当成了最新的研究成果。&lt;/p&gt;&lt;p&gt;我遇到的这种例子挺多的。有时候父母给我发个信息，说你要注意这个那个习惯啊，不然会得什么什么样的病…… 这本来就是我从小就已经知道并且照办的事情，而且我还记得当年这东西就是我爸妈教给我的。现在让这帮“养生专家”一忽悠，倒像个新鲜事，又拿出来讲一遍，好像别人不知道一样…… “专家”的威力就是这么强大 :P&lt;/p&gt;&lt;h3&gt;新的理论&lt;/h3&gt;&lt;p&gt;第二类理论，就是胡编乱造出一些“新理论”，却没有经过科学实验证实。『&lt;a href=&quot;http://v.qq.com/x/cover/kieigw8nv6q7fj0/b0016b9qoy1.html&quot;&gt;多喝白开水带来的危害&lt;/a&gt;』就属于这一种情况。通常这种理论把问题的原因归结为某一个生活习惯（比如早上喝一杯凉水），而忽略所有其它引起问题的因素。这些理论的问题在于，它们通过臆断，得出错误的“因果关系”。&lt;/p&gt;&lt;p&gt;据我了解，过敏性鼻炎，脱发等问题，很多都是因为基因遗传，跟人平时的生活习惯几乎没有关系。现在有一个人出现了过敏性鼻炎和脱发，而且碰巧这人早上起来喜欢喝一杯凉水，于是专家就得出一个可笑的结论：一定是喝凉水引起了过敏性鼻炎和脱发。&lt;/p&gt;&lt;p&gt;养生专家们很喜欢把健康问题跟某些不起眼的习惯挂钩，这样就可以创造一些惊人的理论，却无法验证其真实性。他们可以说，就是因为你这个小小的习惯，导致了如此严重的健康问题。这样一来，他们就可以告诉你吃什么，不吃什么，做什么，不做什么。每过一段时间，这些人都会换一套不同的说法，让你感觉有新东西出来，却没发现这些其实跟之前的说法自相矛盾。老年人记性不好，看不出破绽，有些人为了健康不惜一切，仿佛活着就是为了不停地研究如何才能继续活着…… 这就是这帮养生专家和养生节目得以生存的关键。&lt;/p&gt;&lt;p&gt;得出喝凉水引起了鼻炎，脱发，身体虚弱这样的结论，且不说它看起来有没有可能，你必须先经过科学实验。你不能只看一个人，因为数据量太小，很可能是偶然巧合，没法建立因果关系。所以实验必须要有两组人进行对照，就是所谓“对照实验”。一组人早上喝一杯凉水，另外一组人不喝。过一段时间，分析这两组人里面出现上述问题的人的比例，如果喝凉水的人大部分出现了问题，而不喝凉水的人大部分没有出现问题，你才有可以得出“喝凉水导致鼻炎和脱发”这样的结论。&lt;/p&gt;&lt;p&gt;显然，这个节目里的专家并没有经过实验，而是引用（滥用）『黄帝内经』里面的各种阴阳理论。说早上阳气上升，喝一杯凉水把阳气给浇灭了，怎么能不得病哪！这显然是完全不科学，不负责任的说法。实际上这套阴阳理论是如此的模棱两可，跟占星学如出一辙，你可以利用这些说法来解释世界上的几乎任何现象！不管遇到好事还是坏事，同样的一句话，可以同时支持两种完全相反的结果。为什么它可以这样呢？因为这些说法本来模棱两可，所以不同的人从不同的角度去解释它，发现都是说得通的。&lt;/p&gt;&lt;p&gt;这些养生节目，经常把严重身体问题的起因，归结为某些生活上的小习惯，吃什么，不吃什么之类，很容易让人忽略真正的起因，更加严重的因素，这属于一种误导。中老年人看了这些节目，往往盲目的认为坚持或者改变生活上的一些小习惯，就可以避免或者修正一些严重的身体疾患，结果耽误了真正科学研究出来的补救办法。在这种意义上，养生节目是有危害性的。我建议中老年人少看这种节目，多跟真正的医生了解科学的医疗知识。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">yangsheng</guid>
<pubDate>Tue, 28 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>老虎出租</title>
<link>http://yinwang.org/blog-cn/2016/06/27/tiger-for-rent</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;老虎出租&lt;/h2&gt;&lt;p&gt;为了挣点外快，现在开始提供老虎出租合影服务，每张照片5元（cash only）。有意者请来电 123-456-7890。&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-98872cd22bb84c91.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">tiger-for-rent</guid>
<pubDate>Mon, 27 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>欧盟草拟法案，对机器人征税</title>
<link>http://yinwang.org/blog-cn/2016/06/24/robot-tax</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;欧盟草拟法案，对机器人征税&lt;/h2&gt;&lt;p&gt;据路透社报道，欧盟正在草拟一个关于机器人的&lt;a href=&quot;http://www.reuters.com/article/us-europe-robotics-lawmaking-idUSKCN0Z72AY&quot;&gt;法案&lt;/a&gt;。由于机器人以及智能机器的使用，可能带来空前严重的失业问题，这项法案要求所有使用智能机器人的公司，如实向政府汇报由于机器人的使用，而节省下来的人的工资，然后政府据此征收社会安全税，给人发放相应的福利。这个法案跟我的一个想法类似：每当机器人取代一个人的工作，使用机器人的公司就有义务要养活那个人。&lt;/p&gt;&lt;p&gt;很多机器人公司在抱怨，说这会阻碍机器人行业的发展，然而我觉得这正是欧盟关爱人民的表现。对机器人的使用进行征税，对于社会的安全和幸福是非常有必要的。用机器人代替人的劳动，导致人失业，却不安顿好失业者的生活，属于一种掠夺或者抢劫的行为。这不但会大幅度降低社会幸福感，而且会导致社会安全问题，比如犯罪率上升等等。&lt;/p&gt;&lt;p&gt;人的权益应该是崇高致上的，所有损害人的切身利益的做法，都应该付出代价，哪怕这会阻碍技术的发展。要记住，技术是为人服务的。如果技术给人和社会带来的不是幸福，而是困苦甚至灾难，那我们就应该理智的延缓甚至取消技术的发展，或者为此征税来维护人的权益。&lt;/p&gt;&lt;p&gt;世界上聪明人太多了，却缺乏智慧的人。欧盟的这一法案让我看到了希望。我希望世界上所有国家，特别是美国和中国，都意识到这个问题。大部分的社会财富集中在极少数人手中，这样的社会是不会幸福的。就算你钱再多也一样，你只会看到一片荒凉，到处是饥饿而势利的人。你不再会有朋友，只有对你的钱感兴趣的人…… “&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们都应该明白这个道理。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">robot-tax</guid>
<pubDate>Fri, 24 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>两个计划的变动</title>
<link>http://yinwang.org/blog-cn/2016/06/22/plan-change</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;两个计划的变动&lt;/h2&gt;&lt;p&gt;我有两个计划的变动，一个是关于离开美国，另一个是关于写书计划。&lt;/p&gt;&lt;h3&gt;离开美国计划的推迟&lt;/h3&gt;&lt;p&gt;有些人可能发现了，之前写的『关于离开美国的决定』，其实算是一时冲动的结果。我对美国的意见不会变化，然而生活还是需要折中考虑，一步一步的来。我不喜欢美国的制度，绝大部分原因是因为过去几年的经历，以及亲眼目睹作为“美国人”的女朋友的一些经历。&lt;/p&gt;&lt;p&gt;美国在对于劳动者的福利和保护方面确实很不好，很多时候可以说是任凭雇主欺压员工，没有法律保障。然而一个现实的问题是，我们现在没有能力改变它。我离开中国十年了，一点都不了解现在的中国社会，也没有任何现实可行的计划让我的生活有所保障。父母对此也不大支持。在这样的情况下回国，就有点像没有带好降落伞就跳出一架引擎发出怪响的飞机 :P&lt;/p&gt;&lt;p&gt;前几年的遭遇虽然很惨，觉得根本不应该发生在我身上的事情，居然都发生了，可是我毕竟已经度过了最困难的时候。老实说，现在这个公司其实对人挺好，特别是现在的团队的同事特别好。我在这里其实已经有了一些同类的朋友，我有女朋友，女朋友的爸爸妈妈，弟弟妹妹，…… 他们都很关心我，这是很宝贵的财富。过度的思考以前的不幸，让我没有看到离开的代价，这个代价是非常大的。&lt;/p&gt;&lt;p&gt;所以在看好前面的每一步之前，我不得不推迟所谓的“离开美国计划”，不能冲动行事。当然我会继续观察国内和其它国家的情况，看好了之后也许会有动作。当然我感谢大家的支持。由于这篇文章和之前的『未来计划』，有一些现在和以前的同事都表示很关心，我也新结识了一些有相似经历和思想的人。他们找我聊天，表示关心和支持，聊得挺投机的。&lt;/p&gt;&lt;p&gt;所谓同类相吸，我觉得这些人和我，已经建立起一种互相支持的氛围。所以如果你喜欢我的想法，也可以联系我。也许有一天，我们这些意气相投的人会走到一起来……&lt;/p&gt;&lt;h3&gt;写书计划的取消&lt;/h3&gt;&lt;p&gt;之前我有感于计算机科学教育不求甚解，以讹传讹的现状，想写本书来传播我所掌握的精华。然而面对社会的现状，我不得不取消这个计划。取消的原因不是因为写不出来或者没有时间写，而是因为我发现并不是每个人都应该得到真知。卖知识是一种非常不划算的生意。有些信息太过宝贵，远不是一本书的价钱可以买得到的，甚至不是大学四年的学费可以付得起的。我不愿意让它们落到阴险的人或者敌对势力手里。&lt;/p&gt;&lt;p&gt;这里面是有一个故事的…… 曾经有个人看了我的文章联系我，加了我的 QQ。他对 PL 的东西很感兴趣，我觉得他挺聪明又好学，就给他讲了很多。不过我也看出来，他并不是科班出生，没经过名师指导，民科一样瞎弄，所以很多概念都是乱的，喜欢把问题搞复杂，但我还是耐心地给他解释。后来他的问题越来越多，暴露出的知识缺陷和误解也越来越多，始终没有说出有价值的见解。&lt;/p&gt;&lt;p&gt;直到一天，有个朋友跟我说，这人在知乎上黑我，我才恍然大悟。原来他一边在 QQ 上请教我，同时却背地里在知乎上评论我，说：“王垠就是吹得厉害，某些很基本的东西他其实都不懂。有一次我问他那什么什么，结果他吹了一通，最后也没说清楚……”&lt;/p&gt;&lt;p&gt;事实是，由于一段时间以来他不停地问问题，从我这得到了太多有价值的信息，却没有任何付出。这人是敌是友还不知道呢，所以我决定对他留一手。没想到他一边跟我虚心请教的样子，一边却在知乎上跟小白们显示牛逼，背地里黑我，把我没告诉他的事情，说成是我不懂，把我没给他看的代码，说成是我不会写……&lt;/p&gt;&lt;p&gt;这个人在知乎上很有名。为了给他留点面子和醒悟的机会，我就不点名了。然而我奉劝这类人，请不要在知乎上制造自己的名气，贬损其它人了。在网络上的名气和真实世界里的地位，是有非常大差别的。人们不会因为你在知乎上排名很高，就在现实工作中给你重要的职位。只有在真实的人际关系中踏踏实实做事，诚实为人，得到现实中人们的认可，才会得到真正的尊重。&lt;/p&gt;&lt;p&gt;出现了这样的人，让我非常的心寒，我深刻地认识到，并不是所有人都是我想象中那么善良。我无偿的把经过千辛万苦，跋山涉水得来的宝贵财富，给了一个阴险的小人。这种人很聪明，然而却缺乏洞察力和深刻的思维。让他们得到了这样的东西，这些人就会到处张扬，最后不知情的人还以为是什么天才。我用自己泛滥的爱心和拯救世界的愿望，帮助了一些别有用心的人，结果只会让世界变得更糟。&lt;/p&gt;&lt;p&gt;我不止一次的遇到这样的人，所以现在要分析什么技术问题，都得很小心点，不让人轻易得到背后的思想。鉴于这个原因，我决定取消写书的计划。我不愿意把深刻的思想用书的形式送给所有人，可是我又不会像某些作者那样随便写点肤浅的东西，所以我只好不写了。&lt;/p&gt;&lt;p&gt;就像武林高手不把绝招轻易传授一样，在技术的领域也是一样。真正的精华，只能在完全确信对方的身份和人品之后，在互惠互利的情况下，才能部分的指点。只有这样才能够平衡世界上的善恶两种势力，让强大的力量只帮助那些善良的人，最终达到一个更好的世界。我的几个教授，包括 Dan Friedman 和 Kent Dybvig 都是这样做的，对未经深入了解的人保留很多秘密，我现在终于理解了为什么。&lt;/p&gt;&lt;p&gt;这就是为什么有陌生人发 email 问我深入的问题，一般都没有回复。就算是同事我也会在潜意识里分成不同的信任级别，并不是每个人我都会跟他畅谈技术。你必须认识我，而且人品必须好，我才有可能跟你探讨问题。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">plan-change</guid>
<pubDate>Wed, 22 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>IT业给世界带来的危机</title>
<link>http://yinwang.org/blog-cn/2016/06/20/it-and-society</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;IT业给世界带来的危机&lt;/h2&gt;&lt;p&gt;昨天写了文章之后，回忆起这几年在湾区的经历，觉得自己是一个很不幸的人。然而就在今天，我的自怜奇妙的转换成了另一种感情，因为我看到了更不幸的人……&lt;/p&gt;&lt;p&gt;正在女朋友 Cinny 的父母家吃饭，忽然窗外来了一个人。仔细一看，是个约莫十来岁年纪的漂亮白人女孩，她说：“亲爱的，你们想要一些刚从树上摘下来的新鲜李子吗？” 据女朋友妈妈介绍，她是邻居的女儿。之后我尝了一个李子，颜色已经黑透了，非常新鲜非常甜！&lt;/p&gt;&lt;p&gt;随后我和 Cinny 出去散步。在她家的对面，耸立着两栋高大华丽的豪宅，看那样子，价值恐怕超过200万美元。两栋豪宅的中间，夹着一间样式非常不搭调的便宜小矮屋。这屋子周围被篱笆围了起来，可以看见里面种了很多的植物。在那门口的无花果树下，赫然出现这样的一个牌子：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-fbcae0ac0fa13486.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;它说：“请不要摘我的无花果。我失去了我的工作，需要依靠自己种的食物为生。我是一个生物学家，如果你知道有任何的工作，请告诉我。谢谢！” 这树上还挂着好几个类似的牌子，从它们看来，这位生物学家已经失业一年了……&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-18fdd10a61af7c99.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/500&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Cinny 说，吃饭时给我们送果子来的女孩，就是这家的孩子。我想起她甜美的笑容，不禁一阵心酸！哎，谁才是真正可怜的人？我之前在无病呻吟些什么啊……&lt;/p&gt;&lt;p&gt;这些年来湾区的 IT 业大量的扩张，Apple，Google 等公司不停地在附近建新的办公楼。IT 业的过度发展，导致了其它行业的衰落，让附近土生土长的居民生存困难。本来公司的扩张应该引起经济的流通，社区的繁荣，人气的高涨，结果每当像 Google 这样的公司提供免费餐饮，附近就会有多少店铺关门，又有多少人失业，成为一片荒漠……&lt;/p&gt;&lt;p&gt;是的，大家节省外出买饭的时间能为公司赚很多钱，自己也节省了不少开支。但是这些公司真的回报了社会吗？新闻早已经曝光，这些大公司利用美国税法的漏洞，每一家每年都导致政府少收上亿美元的税钱。没有收到税，就没法给这些丢了工作的人发福利，以至于他们落魄到这种地步。&lt;/p&gt;&lt;p&gt;Cinny 告诉我，这家人可能也要卖掉房子，搬到别州去了。之前有好些邻居已经搬走了，其中有一些以前在附近开小店，卖很好吃的东西。现在这些儿时的美好回忆，都已经不在了……&lt;/p&gt;&lt;p&gt;我们一直盲目的以为技术会改善人们的生活，很多人总是试图做一些 O2O 服务，甚至研制机器人和自动车，这样可以代替许多人的劳动。如果这些技术真的能代替繁重或者危险的劳动，那确实好。可是如果发明这些技术的公司不回报社会，反而想办法钻法律的漏洞避税，那就变得有害了。在创造这些技术的同时，我们有想过因为它们而失去工作，而又因为公司不交税，不回报社会而变卖房产，颠沛流离的无辜人们吗？&lt;/p&gt;&lt;p&gt;作为一个 IT 人，我们不得不思考，这是不是一种无情的掠夺，我们是不是害虫？当我们帮助雇主掠夺了别人的工作之后，我们自己会不会就是下一个被社会抛弃，丢掉工作的人？“&lt;a href=&quot;http://baike.baidu.com/view/1140346.htm&quot;&gt;独乐乐，与人乐乐，孰乐乎？不若与人。&lt;/a&gt;” 我们在思考如何发展自己事业的同时，也应该思考如何回报社会了。否则我们面对的将是一片毫无生气的荒原，我们不会再看到幸福的笑脸……&lt;/p&gt;&lt;p&gt;有人说这一切都是资本主义造的孽，而不能怪 IT 业。不过由于 IT 存在高度的“智能”和“自动”，它已经开始给资本主义的社会关系带来灾难性的影响。有位大胡子说，无产阶级是资本主义的掘墓人，那么我说，IT 业就是资本主义的定时炸弹，它离爆炸的那一天已经不远了。&lt;/p&gt;&lt;p&gt;我想我们应该都能做点什么…… 话说，如果你知道湾区有招生物学家的工作，请联系我！&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">it-and-society</guid>
<pubDate>Mon, 20 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>关于离开美国的决定</title>
<link>http://yinwang.org/blog-cn/2016/06/19/leaving-united-states</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;关于离开美国的决定&lt;/h2&gt;&lt;p&gt;很多人看了我的『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/05/14/future&quot;&gt;未来计划&lt;/a&gt;』之后联系我，热心的给我提供线索和帮助。记得差不多两年以前，我因为某些人的卑鄙作法而突然丢了工作，导致签证出现问题。在那个危机关头，也有很多人伸出援助之手。在此我对这些人一并表示由衷的感谢。&lt;/p&gt;&lt;p&gt;虽然我口头上自嘲，实际上生活过得并不差，吃好穿好住好，还有漂亮妹纸陪 :) 只是由于美国社会的不合理，我没法发挥自己的能力，没有得到我应有的回报。由于我深入的洞察力和卓越的实现能力，一个建议就可以避免团队走很多弯路，我给曾经任职的每个公司提供的价值都超过百万美元，可是我没有看到合理的回报。所以现在的生活跟我的实际能力，显然差距太远。&lt;/p&gt;&lt;p&gt;我觉得现在是该离开美国的时候了。虽然我拿着某知名低调大公司一个不错的 offer，其实我早已对美国彻底失望了，我不准备接受这个工作。一个具有卓越才能的人，在这个国家有过如此悲催的遭遇，才能一直得不到发挥，处处被压制，只能说明这个国家存在非常严重的问题。美国不再是一个尊重人才的国家，它已经被野心家和吹牛扯淡的官僚政客所控制。这次很多人推荐给我美国公司的工作，各种热门公司都有。可是简单了解他们的“文化”之后，我都失去了兴趣，放弃了跟他们面试的机会。我感谢这些人，然而我的心已经不在美国。&lt;/p&gt;&lt;p&gt;对美国的失望不止因为事业的不顺，我已经彻底厌倦了美国的生活。人们都说美国是个大农村，好山好水好寂寞，这是千真万确的。一个人的时候很无聊，两个人的时候也没有好到哪里去。我交往了一年多的新女朋友从小在美国长大，是个“融入了美国文化”的，漂亮时尚的 ABC 妹纸。跟她在一起久了，也没有感觉好到哪去。到后来约会都不知道该干什么了，因为想不到附近还有什么有意思的地方值得常去的！同事们所谓的休闲，也就是爬山一类的事情，爬一次还好，多两次就发现没意思了，正所谓好山好水好寂寞嘛 :) 在这个文化和人心的沙漠，无论你是否单身，都无法摆脱那黑压压的孤独感。&lt;/p&gt;&lt;p&gt;在中国吃个夜宵，穿上短裤拖鞋走过两个灯火通明，人行道宽敞的路口，就发现人来人往，什么都有。在美国吃个夜宵？在黑洞洞的大马路上开十几分钟的车，若隐若现的 plaza 中间忽然出现一家还亮着灯的饭店，旁边的商店饭店都早已关门，鬼屋一样的死寂。你朋友圈出现的烤串照片，说“咱美国也有吃夜宵的地方啦”，就是这样的背景，没有气氛和文化，只有味道一般般的烤串。这还是近两年才出现的，不知道哪天又因为某大公司为鼓励员工熬夜工作在内部开设夜宵而倒闭也说不准。到了荒漠中的夜宵店，走近一看，门口停着几辆车，站着十几个人。店家没好气的对你说：“等待时间大概是半小时！”&lt;/p&gt;&lt;p&gt;整个国家的设施和道路被设计来方便开车，大片的面积被停车场占据，拉大了人与人的距离，也许是美国如此无聊的一个原因。你不可能悠闲的牵着女友散个步，然后顺便买点东西吃。商店和饭店都被道路分成一小块一小块的，人行道非常狭窄，只能走一个人，或者干脆没有人行道，旁边的车以每小时40英里的速度在你耳边呼啸而过。近在眼前的商店你也没法步行到达，必须钻进那铁盒子才能安全地开到另一个地方，然后又得经过一番找车位的折腾。有时候车位全满，你还需要绕来绕去的“蹲坑”甚至“跟踪行人”，看别人走了你才能趴进去。这样一番折腾之后，本来休闲的心情，全都因为各种紧张而消失殆尽。&lt;/p&gt;&lt;p&gt;当然生活缺乏休闲精神，只是美国生活的一方面。最不满意的其实还是工作的不如意。有些人跟我说，等有了绿卡之后就会感觉自由一些了，然而我很怀疑这种说法。要说绿卡，我得来可以很容易的，我的女朋友从小就是美国公民，而且她很愿意跟我结婚 :P 我不是那么喜欢结婚的人，所以肯定不会为了绿卡而结婚。然而就算我拿到了绿卡，那又能怎样呢？美国公司混进管理层的人，往往不是靠能力，而是靠关系，而且对于中国人相当的排斥，就算你有绿卡，有美国公民身份也一样。有真知灼见的人的意见，往往被下层和中层领导所掩盖，完全得不到被上层领导赏识的机会。&lt;/p&gt;&lt;p&gt;绿卡，可以说是美国用于敲诈外国人，让他们提供廉价劳动的强有力工具。很多人为了绿卡，连续好几年忍辱负重，拿着低廉的薪水，扛着巨大的压力，做着比美国人繁重的工作，到后来人都老了，头都秃了。可是绿卡会给你自由吗？有了绿卡你就不再能去其它国家定居，否则绿卡会被收回，而且在另一个国家赚的钱还得给美国缴税。美国政府这如意算盘打得可真好，利用绿卡把别人套牢在自己国家做苦力。我看到许多有绿卡，甚至有美国公民身份的华人，我并不觉得他们过得很好。一个很实在的例子，我的女朋友就是美国公民，我知道美国政府和公司对她并不好。美国不是一个关爱人民的国家，实际上它跟奴隶社会非常的接近，所以就算你成为美国公民又能怎样？很多人跟我提到要先解决“身份问题”，我很讨厌“身份问题”这个词。身为中国的主流社会，跑到这里来跟偷渡客难民似的，没有“身份”，好像没有自己的国家一样……&lt;/p&gt;&lt;p&gt;来了美国十年了，基本上受了十年的罪。开头受了美国教育的欺骗，以为在美国能够静心的做研究，然后以为在美国可以发展自己的事业。可是到如今，一场场的骗局都已经揭穿，这一切都已经看透了。并不是我不能“融入”美国社会，而是我根本不屑于融入它。跟美国人聊天感觉就两个字，假和蠢。一百年前罗素（&lt;a href=&quot;https://en.wikipedia.org/wiki/Bertrand_Russell&quot;&gt;Bertrand Russell&lt;/a&gt;）就说过，美国是商人开的国家，美国的大学教授只是商人的仆人而已，商人只知道竞争，直到不需要竞争的时候还仍然在竞争，为所谓“生存压力”惶惶不得终日。他的话直到今天都还是对的。哈佛，斯坦福之类的学校尽培养一些商人和政客，吹牛的本事大。利用别人的劳动和发明，把功劳挂在自己头上，然后别人就以为自己是“成功人士”。&lt;/p&gt;&lt;p&gt;美国人深深地为自己的文化感到自卑，所以一有机会就附庸风雅，显示自己跟欧洲的渊源关系。星巴克的咖啡中杯不叫“medium”，非要用个意大利词叫“grande”。从法语引进的词，非得要古板的按法语发音，漱喉咙一样，你按英语发音他们还指证你说这是法语~ 美国人互相之间的关怀，比起世界上很多其他国家都要差很多，特别是比欧洲国家要差非常多，甚至比日渐势利的中国都要差一些。中国社会的一些倒退作法，包括利益熏心，学术腐败，都是被美国传染而来的。&lt;/p&gt;&lt;p&gt;美国人的教育和意识形态里鼓吹的贪婪，导致了这个国家的人民生活越来越艰难，所以就算它科技再发达，总体再有钱又能怎样？这个国家的财富对你已经不再有意义。亿万富翁们可以合法避税，收入过十亿的大公司利用税收法漏洞，把巨额收入报在不收企业税的百慕大一类的小国，结果总共只交不到3%的税，反倒让挣血汗钱的工薪阶层缴税超过收入的35%。90%以上的财富集中在10%的极少数人手里，社会最底层的人没有工作，政府却利用各种借口（比如因为你仍然有自己的房子）不提供社会福利和医疗保障。当技术的进步导致的不是人民的安逸和享受，而是进一步的失业率扩大，人民工作更辛苦，压力更大，生活困苦，医疗，福利和下一代的教育条件恶化，技术再发展又有什么意义？我怎么总觉得美国在走苏联或者纳粹德国的老路…… 我不能让自己的下一代诞生于这样的国家！&lt;/p&gt;&lt;p&gt;很多中国人不理解欧洲国家的悠闲，觉得欧洲人太懒，在技术上落后于美国，真是天大的误解。很多欧洲人看到了技术发展会带来这样的后果，所以他们很明智的决定，不要研究什么智能机器了，继续让人去干很多事情。没工作的人也有很好的福利，养小孩上大学都不要钱，无忧无虑。上班的人就算是饭店服务员，都有各种法律保障，工作条件有保证，休息时间有保证，最低工资有保证，根本不用像美国的服务员一样，需要靠小费为生。欧洲劳动法不承认美国社会流行的所谓“at-will employment”，即雇主或者雇员都可以在任何时候无条件终止雇佣关系而无需提前通知或者警告，所以雇员不用担心随时会被炒鱿鱼。这就是为什么欧洲人过得比美国人开心，在欧洲国家生活比美国有趣。&lt;/p&gt;&lt;p&gt;所以我已经决定要离开美国，这是思考了很久很久以后才做出的决定。我的下一站，当然是我的家。我会歇至少半年不工作，陪伴我的父母，会见我的老友。同时我可能静下心来思考未来的事业。我目前的想法是做一个自由职业者。我不再愿意成为某个公司的正式员工，继续做底层的编程工作。由于我的造诣和深入见解，我更愿意给一些公司做“顾问”性质的指导和初期的建模设计，而不成为那些公司的一员。由于我对各种技术深入精髓的理解，以及对于设计的见解，我可能会成立自己的咨询公司，面向企业，对各种 IT 技术提供分析和指导，或者对企业提供技术培训服务，就像著名的 &lt;a href=&quot;https://www.nngroup.com&quot;&gt;Nielsen Norman Group&lt;/a&gt;。同时我也会花时间来发展自己的核心技术，包括 Yin 语言和最近对于数据库系统和存储系统的深度探索。&lt;/p&gt;&lt;p&gt;总是有人跟我说国内的环境不好，说得跟水深火热似的，可是我觉得那只是片面观察和危言耸听。我觉得我还不至于在国内活不下去。我喜欢中国，并不因为它是我的国家，或者被政治书教的，这是通过与美国和其它国家比较得出的结论。中国的文化更加接近欧洲，而不像美国。这些国家经历了历史与战火，经历了无产阶级革命，就算失败之后，社会平等关爱的思想已经进入了很多人的心。两年前在国内待了两个月，我过街可能被车撞，在地摊上可能吃到地沟油或者毒牛奶，可是我却显然过得舒心很多，轻松很多，浪漫很多。我一点也不贪恋美国的秩序和设施的高质量。社会分配制度的不合理，文化的贫瘠，压迫，剥削，歧视和人心的险恶，使得那一切的安逸都失去了意义。当然将来我也可能周游世界其他国家，比如热爱休闲的欧洲各国，然而中国会永远是我的根据地和故乡。&lt;/p&gt;&lt;p&gt;由于回国会带来一笔不小的安家开支，在这里我再次鼓励大家为一些高价值的文章付款，比如『怎样写一个解释器』，『编程的哲学』等。每篇文章的收费大概是5美元。之前已经付费的人就不用了，如果你不喜欢或者觉得没有收获的话也请不要付费，我不想欠别人人情。请注意你的付款并不是在无偿募捐或者施舍，这也不是在进行众筹投资，这只是你在为你使用了的好东西付款。我的文章比起很多教科书都要精辟，价值显然比5美元大很多。所以如果你从中收获了益处，按照经济学的原理，你确实是应该付费的。这种费用只针对特定的文章，付费之后并不等于我以后所有的作品你都应该免费获得。付费时请注明是在为哪篇文章付费。谢谢你的理解和支持！&lt;/p&gt;&lt;p&gt;【&lt;a href=&quot;http://paypal.me/yinwang0&quot;&gt;PayPal付款链接&lt;/a&gt;】&lt;/p&gt;&lt;p&gt;支付宝二维码：&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-87cccd26dde8490a.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/200&quot; alt=&quot;&quot;&gt;&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">leaving-united-states</guid>
<pubDate>Sun, 19 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>美国社会的信息不平等现象</title>
<link>http://yinwang.org/blog-cn/2016/06/14/information-inequality</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;美国社会的信息不平等现象&lt;/h2&gt;&lt;p&gt;在美国工作过的人都知道，进入一个公司之前，雇员都要经过一种“背景调查”（background check）。这种调查一般由专门的“背景调查公司”来协助进行，他们可以通过各种渠道来获取你的信息，包括身份，住址，犯罪记录，学位信息，之前雇主信息，职位，工资，工作时间，离职原因等等。很多公司还要求你提供几个“联系人”（reference）和他们的联系方式，有些甚至要求其中有一个是你之前的 manager，这样他们可以去询问你的表现……&lt;/p&gt;&lt;p&gt;在美国大学读研究生，进去之前都需要找几个认识的教授写推荐信。进去之后每隔一段时间，教授们会召开一种八卦会议，讨论各个学生的表现。你之前对任何一个教授说的话，都可能传到别的教授耳朵里。教授们用这种机制来打探学生的底细，所以如果你在一个教授那里表现不好（当然其实可能是教授的人品问题）或者发生了矛盾，去找另一个教授的时候很可能立即吃闭门羹，或者找借口回避。在这种会议上，教授们还会决定哪些学生会被“请离学校”……&lt;/p&gt;&lt;p&gt;这表面上看上去是为了防止有问题或者不合格的人进入公司或者学校，久而久之你才发现，这种“背景调查”并不是什么好东西。它造成的“信息不平等”，导致了雇员和学生在自身权益保护上处于劣势，陷入被控制，被压迫的地位。雇员和学生如果有问题，公司和学校使用联盟的力量来解决；可是如果公司和教授有问题，学生们却没有相应的机制来维护自己的权益。&lt;/p&gt;&lt;p&gt;所以你经常发现教授欺负学生的情况，最后反而是学生被迫离开。如果一个教授人品有问题导致了矛盾，他总是会推到学生头上。学生只能默默的忍着，绝不会有另一个学生或者教授来维护你的权益，伸张正义。正如中国的一句古话，官官相护，教授和教授之间都是互相庇护的。在美国，教授和研究生是两个地位完全不同的阶级。不要以为在美国你可以对教授直呼其名，在地位上你们就是平等的，那些都是美国一直以来的广告宣传（包括电影，电视，GRE 文章……）在你头脑里产生的幻觉。&lt;/p&gt;&lt;p&gt;你发现没有，公司和学校可以调查你之前的表现和不良记录，你却没有可靠的办法来调查公司的内部情况和不良底细。如果没有熟人在公司，你是没法知道公司内部的一些龌龊做法的。某些公司里面的情况是多么龌龊，从我之前的文章你应该已经有所了解。你不但不容易找到说真话的“内线”，而且当你进入公司之后会被要求签署一种叫 NDA 的东西，也就是 Non-Disclosure Agreement。这种 NDA 很多不但要求你不能暴露公司的商业和技术机密，而且要求你不能公开公司内部的“做法”（practice）。当然做法就包括了内部的各种压榨，政治斗争，勾心斗角，领导瞎指挥，等等。&lt;/p&gt;&lt;p&gt;签了这样 NDA 的人，除非你跟他是很好的朋友，他才有可能在不被抓到证据（无记录）的情况下，亲口告诉你公司内部的真实情况。很多时候，情况要比你从外面看起来糟很多，就算它是世界知名的“伟大”公司也一样。本来你认识公司内部员工的机会就不是很多，再除去本来就精通政治斗争的人，那些喜欢晒幸福显牛逼的人，那些由于签了 NDA 而三缄其口的人，就没有很多机会听到另外方面的信息。&lt;/p&gt;&lt;p&gt;你可以从 Glassdoor 之类的网站了解一些公司的负面信息，然而经验告诉我，Glassdoor 并不是没有“审查”的。你大体上说一下不好的感觉可以，然而如果你说到具体的地方，review 就会被 Glassdoor 封锁，理由是里面有脏话，或者违反“社区规则”（community guidelines）。你以为真是因为脏话吗？等你删掉所有的脏话和用星号替换的脏话（比如 s**t），会发现仍然无法通过审查。他们不会告诉你为什么，只是反复的跟你说违反了社区规则。至于怎么违反了，你是永远琢磨不出来的。&lt;/p&gt;&lt;p&gt;到底哪里有问题呢？问题就在于你的 review 太具体了，包含了确凿的证据，别人一看就知道那是真的。Glassdoor 的所谓社区规则，让你无法显示出具体的证据，以至于人们看到你的反面 review 也无法确信你说的是实话。有些甚至可能以为你是个人性格问题，要求太高，对公司不满而已。当你忽略了这些反面 review，进入公司一看，才发现他们说的都是真的…… 所以像 Glassdoor 这种试图朝 LinkedIn 竞争者方向发展，目的在于盈利的公司，它们其实是不敢让这样的 review 存在的。否则得罪了某些牛气的公司或者投资者，自己可就吃不了兜着了。要记住 Glassdoor 也是一家公司，然而能够给公司提供公正 review 的地方，它自己绝对不应该是一家公司。&lt;/p&gt;&lt;p&gt;由于新的工作都需要背景调查，甚至要求给你之前的上司打电话，所以知道这一点的人都会在工作中唯唯诺诺，不敢得罪任何人，就算你的上司人品非常差也一样。这样一来，背景调查和推荐制度，就成为了管理层控制工薪阶层和学生强有力的工具。你的上司比较放心，无论他如何瞎指挥，如何欺负陷害你，你都得在他面前笑嘻嘻的，不敢当面冒犯。如果他对你不满意，就算你离开这个公司，将来的工作也不好找。因为之后的公司可能要求打电话跟他询问你的情况，到时候他可以在背地里狠狠黑你一番，然后还跟你说自己高度的赞扬了你。等你过五关斩六将，到了最后却莫名其妙没有拿到以为可以顺手拈来的工作，才发现他也许是一只笑面虎。&lt;/p&gt;&lt;p&gt;我在 Google 和 Coverity 的两个上司都是这样的人。其中 Coverity 的上司曾经在 2013 年直接导致我失去一个很好的工作机会，幸好本来要给我 offer 的公司里一个好心人事后告诉了我原因——Coverity 的 manager 提供了“让人震惊的负面信息”！在那之前我一直以为，虽然这人帮着公司压榨我们，但平时又跟我哭诉说是被迫的，所以也许还有点人性。当新公司要求之前公司的联系人中包含一个 manager 的时候，由于只有 Google 的那家伙和他可以选，我写了他的名字。结果呢，同事给了我好评，然后这个 manager 本来的面目就显示出来了…… 现在你知道美国的人际关系可以多么的微妙和复杂了吧，一个人在背后戳你一刀，你也许直到最后都没有发现，而且很多时候你的新公司明确要求你提供让别人捅你一刀的机会……&lt;/p&gt;&lt;p&gt;这就是中国人心目中简单纯朴善良的美国人，他们制造了世界上最强大的无形锁链，根本不需要政府出手，利用整个社会的集体力量来操控和挟制每个人的行为，使得他们不敢有不服从的举动，不敢公开公司和学校的不良做法。我之所以在博文里曝光一些公司的行为，就是为了抵抗这种信息的不平等，为了破坏这种无形的锁链。&lt;/p&gt;&lt;p&gt;有些人每次看到我批评前任雇主，就觉得我是大嘴巴，说得好像我在欺负雇主一样。我这种资产为负数的区区小民（负人阶级），哪里能动得了牛逼哄哄的 Google，不可一世的 Coverity 的汗毛呢？可是你发现没有，被我曝光的全都是强权势力，而且它们都对我的身心健康和切身利益产生了严重的危害。我从来没有说过我前女友，我前同事的故事，就算他们有些做法相当的不好，也绝对不会公开出来。因为他们没有像公司那样强大的权力和危害，可以伤害大量的人却不受惩罚，可以导致整个社会文明的败坏。所以就算我受到很大的伤害，也要保护这些人的隐私，因为他们还有醒悟和改进自己的机会。&lt;/p&gt;&lt;p&gt;然而对于公司和大学这样的强权，如果出现严重侵害切身利益的恶劣行为，我就会毫不留情的揭露。就算 NDA 禁止透露某些信息也一样，我不会让 NDA 阻碍我对伤害自己的恶劣行径进行披露。就像你被别人打了，打人者逼你签字画押，让你保证不说出去，不然上法院告你。你去遵循这种条款不是很可笑吗？本来该被告上法庭的是打人者，到头来打人者却要挟上法院告你，试图封你的嘴，掩盖真相。写 GRE 作文的时候大家都分析过如何对待“unjust law”（不正义的法律），现在是拿出来用的时候了，用于掩盖公司丑恶行径的 NDA 条款是不正义的法律，所以我们应该联合起来废除它！当然这里说要揭露的，不包括商业和技术机密。&lt;/p&gt;&lt;p&gt;这里我应该强调一下，并不是所有问题都属于“严重侵害”，都需要进行揭露。这些侵害只包括那种对人的身心健康，切身的基本利益，也就是所谓“人权”产生危害的。比如利用高压甚至威胁剥夺员工休息时间，危害员工生命安全和健康，暴力谩骂等行为，缺乏对人的基本尊重的行为，才列入被揭露之列。其它的常见问题，比如节奏太慢，工作缺乏挑战性，process 太繁琐，同事比较笨，…… 由于没有造成伤害，所以不包括在内。&lt;/p&gt;&lt;p&gt;一些典型的公司恶劣行径例子：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;Coverity 故意对任务设置过短的时间，然后通过解雇相威胁，导致员工严重超时工作，无耻剥夺员工的休息时间。&lt;/li&gt;
&lt;li&gt;Sourcegraph 在员工短时间完成重大贡献之后，使用无理借口解雇，收回早期员工的大额股票份额。这是相当于抢劫的犯罪行为。&lt;/li&gt;
&lt;li&gt;Amazon 被多次曝光的&lt;a href=&quot;http://www.nytimes.com/2015/08/16/technology/inside-amazon-wrestling-big-ideas-in-a-bruising-workplace.html&quot;&gt;极度压榨的工作环境&lt;/a&gt;，对怀孕女员工的&lt;a href=&quot;https://medium.com/@jcheiffetz/i-had-a-baby-and-cancer-when-i-worked-at-amazon-this-is-my-story-9eba5eef2976#.fooa1dmgi&quot;&gt;不公正待遇&lt;/a&gt;，等等……&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;有人跟我说我这么曝光以前的雇主，新的公司会对我有所顾忌，这样的行为等于自杀。我其实一点都不担心这个事情。虽然恶劣的行径是一定会被揭穿的，然而胸怀坦荡，对人友好，心里没有鬼的公司却大可不必担心。对我有所顾忌是应该的，我理所应当有自己的威严——公司都应该知道，王垠不是好惹的，但他却是非常讲理的。你可以看到，被曝光的雇主都有非常严重的恶劣行为，甚至可以告上法庭，要求赔偿。我对这样的公司躲都来不及，如果类似的不地道的公司看到了我的文章而回避我，那正好！因为我正想很有效的过滤掉这样的公司，省得浪费时间去跟他们聊。剩下的有良心的公司，自然会发现我是朋友，而且是非常有价值的人，从而愿意跟我合作。&lt;/p&gt;&lt;p&gt;如果你被公司欺负了，却担心曝光了公司的恶劣行为会导致以后找不到工作，那你就助长了这种公司的气焰。他们就会打着假面具继续害人，把大家都蒙在鼓里。这样坏人就会横行霸道，导致整个社会环境的恶化。所以这些人对我的做法的担心，说我是在自杀，不但是多余的，而且是有害的，甚至可以被视为一种恐吓行为。我希望广大的劳动群众都能有如此的勇气，勇于站出来说真话，世界才能得到信息的平等。只有在信息上平等，公司的不良行为才能受到节制，有良心的公司才能得以发扬光大，人类才有可能得到物质上平等的机会，最终消灭人压迫人，人剥削人的制度。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">information-inequality</guid>
<pubDate>Tue, 14 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Java 有值类型吗？</title>
<link>http://yinwang.org/blog-cn/2016/06/08/java-value-type</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;Java 有值类型吗？&lt;/h2&gt;&lt;p&gt;有人看了我之前的文章『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/06/swift&quot;&gt;Swift 语言的设计错误&lt;/a&gt;』，问我：“你说 Java 只有引用类型（reference type），但是根据 Java 的&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html&quot;&gt;官方文档&lt;/a&gt;，Java 也有值类型（value type）和引用类型的区别的。比如 int，boolean 等原始类型就是值类型。” 现在我来解释一下这个问题。&lt;/p&gt;&lt;p&gt;Java 有值类型，原始类型 int，boolean 等是值类型，其实是长久以来的一种误解，它混淆了实现和语义的区别。不要以为 Java 的官方文档那样写就是权威定论，就可以说“王垠不懂” :) 当你认为王垠不懂一个初级问题的时候，都需要三思，因为他可能是大智若愚…… 看了我下面的论述，也许你会发现自己应该怀疑的是，Java 的设计者到底有没有搞明白这个问题 :P&lt;/p&gt;&lt;p&gt;胡扯结束，现在来说正事。Java，Scheme 等语言的原始类型，比如 char，int，boolean，double 等，在“实现”上确实是通过值（而不是引用，或者叫指针）直接传递的，然而这完全是一种为了效率的优化（叫做 inlining）。这种优化对于程序员应该是不可见的。Java 继承了 Scheme/Lisp 的衣钵，它们在“语义”上其实是没有值类型的。&lt;/p&gt;&lt;p&gt;这不是天方夜谭，为了理解这一点，你可以做一个很有意思的思维实验。现在你把 Java 里面所有的原始类型都“想象”成引用类型，也就是说，所有的 int, boolean 等原始类型的变量都不包含实际的数据，而是引用（或者叫指针），指向堆上分配的数据。然后你会发现这样“改造后”的 Java，仍然符合现有 Java 代码里能看到的一切现象。也就是说，原始类型被作为值类型还是引用类型，对于程序员完全没有区别。&lt;/p&gt;&lt;p&gt;举个简单的例子，如果我们把 int 的实现变成完全的引用，然后来看这段代码：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;int x = 1;    // x指向内存地址A，内容是整数1
int y = x;    // y指向同样的内存地址A，内容是整数1
x = 2;        // x指向另一个内存地址B，内容是整数2。y仍然指向地址A，内容是1。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于我们改造后的 Java 里面 int 全部是引用，所以第一行定义的 &lt;code&gt;x&lt;/code&gt; 并不包含一个整数，而是一个引用，它指向堆里分配的一块内存，这个空间的内容是整数 1。在第二行，我们定 int 变量 &lt;code&gt;y&lt;/code&gt;，当然它也是一个引用，它的值跟 &lt;code&gt;x&lt;/code&gt; 一样，所以 &lt;code&gt;y&lt;/code&gt; 也指向同一个地址，里面的内容是同一个整数：1。在第三行，我们对 &lt;code&gt;x&lt;/code&gt; 这个引用赋值。你会发现一个很有意思的现象，虽然 &lt;code&gt;x&lt;/code&gt; 指向了 2，&lt;code&gt;y&lt;/code&gt; 却仍然指向 1。对 &lt;code&gt;x&lt;/code&gt; 赋值并没能改变 &lt;code&gt;y&lt;/code&gt; 指向的内容，这种情况就跟 int 是值类型的时候一模一样！所以现在虽然 int 变量全部是引用，你却不能实现共享地址的引用能做的事情：对 &lt;code&gt;x&lt;/code&gt; 进行某种操作，导致 &lt;code&gt;y&lt;/code&gt; 指向的内容也发生改变。&lt;/p&gt;&lt;p&gt;出现这个现象的原因是，虽然现在 int 成了引用类型，你却并不能对它进行引用类型所特有（而值类型没有）的操作。这样的操作包括：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;deref。就像 C 语言里的 &lt;code&gt;*&lt;/code&gt; 操作符。&lt;/li&gt;
&lt;li&gt;成员赋值。就像对 C struct 成员的 &lt;code&gt;x.foo = 2&lt;/code&gt; 。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;在 Java 里，你没法写像 C 语言的 &lt;code&gt;*x = 2&lt;/code&gt; 这样的代码，因为 Java 没有提供 deref 操作符 &lt;code&gt;*&lt;/code&gt;。你也没法通过 &lt;code&gt;x.foo = 2&lt;/code&gt; 这样的语句改变 &lt;code&gt;x&lt;/code&gt; 所指向的内存数据（内容是1）的一部分，因为 int 是一个原始类型。最后你发现，你只能写 &lt;code&gt;x = 2&lt;/code&gt;，也就是改变 &lt;code&gt;x&lt;/code&gt; 这个引用本身的指向。&lt;code&gt;x = 2&lt;/code&gt; 执行之后，原来数字 1 所在的内存空间并没有变成 2，只不过 x 指向了新的地址，那里装着数字 2 而已。指向 1 的其它引用变量比如 &lt;code&gt;y&lt;/code&gt;，不会因为你进行了 &lt;code&gt;x = 2&lt;/code&gt; 这个操作而看到 2，它们仍然看到原来那个1……&lt;/p&gt;&lt;p&gt;在这种 int 是引用的 Java 里，你对 int 变量 &lt;code&gt;x&lt;/code&gt; 能做的事情只有两种：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;读出它的值。&lt;/li&gt;
&lt;li&gt;对它进行赋值，使它指向另一个地方。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;这两种事情，就跟你能对值类型能做的两件事情没有区别。这就是为什么你没法通过对 &lt;code&gt;x&lt;/code&gt; 的操作而改变 &lt;code&gt;y&lt;/code&gt; 表示的值。所以不管 int 在实现上是传递值还是传递引用，它们在语义上都是等价的。也就是说，原始类型是值类型还是引用类型，对于程序员来说完全没有区别。你完全可以把 Java 所有的原始类型都想成引用类型，之后你能对它们做的事情，你的编程思路和方式，都不会因此有任何的改变。&lt;/p&gt;&lt;p&gt;从这个角度来看，Java 在语义上是没有值类型的。值类型和引用类型如果同时并存，程序员必须能够在语义上感觉到它们的不同，然而不管原始类型是值类型还是引用类型，作为程序员，你无法感觉到任何的不同。所以你完全可以认为 Java 只有引用类型，把原始类型全都当成引用类型来用，虽然它们确实是用值实现的。&lt;/p&gt;&lt;p&gt;一个在语义上有值类型的语言（比如 C#，Go 和 Swift）必须具有以下两种特性之一（或者两者都有），程序员才能感觉到值类型的存在：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;deref 操作。这使得你可以用 &lt;code&gt;*x = 2&lt;/code&gt; 这样的语句来改变引用指向的内容，导致共享地址的其它引用看到新的值。你没法通过 &lt;code&gt;x = 2&lt;/code&gt; 让其他值变量得到新的值，所以你感觉到值类型的存在。&lt;/li&gt;
&lt;li&gt;像 struct 这样的“值组合类型”。你可以通过 &lt;code&gt;x.foo = 2&lt;/code&gt; 这样的成员赋值改变引用数据（比如 class object）的一部分，使得共享地址的其它引用看到新的值。你没法通过成员赋值让另一个 struct 变量得到新的值，所以你感觉到值类型的存在。&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;实际上，所有的数据都是引用类型就是 Scheme 和 Java 最初的设计原理。原始类型用值来传递数据只是一种性能优化（叫做 inlining），它对于程序员应该是透明（看不见）的。那些在面试时喜欢问“Java 是否所有数据都是引用”，然后当你回答“是”的时候纠正你说“int，boolean 是值类型”的人，都是本本主义者。&lt;/p&gt;&lt;h3&gt;思考题&lt;/h3&gt;&lt;p&gt;有人指出，Java 的引用类型可以是 null，而原始类型不行，所以引用类型和值类型还是有区别的。但是其实这并不能否认本文指出的观点，你可以想想这是为什么吗？&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">java-value-type</guid>
<pubDate>Wed, 08 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>Swift 语言的设计错误</title>
<link>http://yinwang.org/blog-cn/2016/06/06/swift</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;Swift 语言的设计错误&lt;/h2&gt;&lt;p&gt;在『&lt;a href=&quot;http://www.yinwang.org/blog-cn/2015/11/21/programming-philosophy&quot;&gt;编程的智慧&lt;/a&gt;』一文中，我分析和肯定了 Swift 语言的 optional type 设计，但这并不等于 Swift 语言的整体设计是完美没有问题的。其实 Swift 1.0 刚出来的时候，我就发现它的 array 可变性设计存在严重的错误。Swift 2.0 修正了这个问题，然而他们的修正方法却没有击中要害，所以导致了其它的问题。这个错误一直延续到今天。&lt;/p&gt;&lt;p&gt;Swift 1.0 试图利用 var 和 let 的区别来指定 array 成员的可变性，然而其实 var 和 let 只能指定 array reference 的可变性，而不能指定 array 成员的可变性。举个例子，Swift 1.0 试图实现这样的语义：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;]

// 可以对 array 成员赋值
shoppingList[0] = &quot;Salad&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;let shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;]

// 不能对 array 成员赋值，报错
shoppingList[0] = &quot;Salad&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这是错误的。在 Swift 1.0 里面，array 像其它的 object 一样，是一种“reference type”。为了理解这个问题，你应该清晰地区分 array reference 和 array 成员的区别。在这个例子里，&lt;code&gt;shoppingList&lt;/code&gt; 是一个 array reference，而 &lt;code&gt;shoppingList[0]&lt;/code&gt; 是访问一个 array 成员，这两者有着非常大的不同。&lt;/p&gt;&lt;p&gt;var 和 let 本来是用于指定 &lt;code&gt;shoppingList&lt;/code&gt; 这个 reference 是否可变，也就是决定 &lt;code&gt;shoppingList&lt;/code&gt; 是否可以指向另一个 array 对象。正确的用法应该是这样：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;]

// 可以对 array reference 赋值
shoppingList = [&quot;Salad&quot;, &quot;Noodles&quot;]

// 可以对 array 成员赋值
shoppingList[0] = &quot;Salad&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;let shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;]

// 不能对 array reference 赋值，报错
shoppingList = [&quot;Salad&quot;, &quot;Noodles&quot;]

// let 不能限制对 array 成员赋值，不报错
shoppingList[0] = &quot;Salad&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也就是说你可以用 var 和 let 来限制 &lt;code&gt;shoppingList&lt;/code&gt; 这个 reference 的可变性，而不能用来限制 &lt;code&gt;shoppingList[0]&lt;/code&gt; 这样的成员访问的可变性。&lt;/p&gt;&lt;p&gt;var 和 let 一旦被用于指定 array reference 的可变性，就不再能用于指定 array 成员的可变性。实际上 var 和 let 用于局部变量定义的时候，只能指定栈上数据的可变性。如果你理解 reference 是放在栈（stack）上的，而 Swift 1.0 的 array 是放在堆（heap）上的，就会明白array 成员（一种堆数据）可变性，必须用另外的方式来指定，而不能用 var 和 let。&lt;/p&gt;&lt;p&gt;很多古老的语言都已经看清楚了这个问题，它们明确的用两种不同的方式来指定栈和堆数据的可变性。C++ 程序员都知道 &lt;code&gt;int const *&lt;/code&gt; 和 &lt;code&gt;int * const&lt;/code&gt; 的区别。Objective C 程序员都知道 &lt;code&gt;NSArray&lt;/code&gt; 和 &lt;code&gt;NSMutableArray&lt;/code&gt; 的区别。我不知道为什么 Swift 的设计者看不到这个问题，试图用同样的关键字（var 和 let）来指定栈和堆两种不同位置数据的可变性。实际上，不可变数组和可变数组，应该使用两种不同的类型来表示，就像 Objective C 的 &lt;code&gt;NSArray&lt;/code&gt; 和 &lt;code&gt;NSMutableArray&lt;/code&gt; 那样，而不应该使用 var 和 let 来区分。&lt;/p&gt;&lt;p&gt;Swift 2.0 修正了这个问题，然而可惜的是，它的修正方式是错误的。Swift 2.0 做出了一个离谱的改动，它把 array 从 reference type 变成了所谓 value type，也就是说把整个 array 放在栈上，而不是堆上。这貌似解决了以上的问题，由于 array 成了 value type，那么  &lt;code&gt;shoppingList&lt;/code&gt; 就不是  reference，而代表整个 array 本身。所以在 array 是 value type 的情况下，你确实可以用 var 和 let 来决定它的成员是否可变。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;let shoppingList = [&quot;Eggs&quot;, &quot;Milk&quot;]

// 不能对 array 成员赋值，因为 shoppingList 是 value type
// 它表示整个 array 而不是一个指针
// 这个 array 的任何一部分都不可变
shoppingList[0] = &quot;Salad&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这看似一个可行的解决方案，然而它却没有击中要害。这是一种削足适履的做法，它带来了另外的问题。把 array 作为 value type，使得每一次对 array 变量的赋值或者参数传递，都必须进行拷贝。你没法让两个变量指向同一个 array，也就是说 array 不再能被共享。比如：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;var a = [1, 2, 3]

// a 的内容被拷贝给 b
// a 和 b 是两个不同的 array，有相同的内容
var b = a   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这违反了程序员对于数组这种大型结构的心理模型，他们不再能清晰方便的对 array 进行思考。由于 array 会被不经意的自动拷贝，很容易犯错误。数组拷贝需要大量时间，就算接收者不修改它也必须拷贝，所以效率上有很大影响。不能共享同一个 array，在里面读写数据，是一个很大的功能缺失。由于这个原因，没有任何其它现代语言（Java，C#，……）把 array 作为 value type。&lt;/p&gt;&lt;p&gt;如果你看透了 value type 的实质，就会发现这整个概念的存在，在具有垃圾回收（GC）的现代语言里，几乎是没有意义的。有些新语言比如 Swift 和 Rust，试图利用 value type 来解决内存管理的效率问题，然而它带来的性能提升其实是微乎其微的，给程序员带来的麻烦和困扰却是有目共睹的。完全使用 reference type 的语言（比如 Java，Scheme，Python），程序员不需要思考 value type 和 reference type 的区别，大大简化和加速了编程的思维过程。Java 不但有非常高效的 GC，还可以利用 escape analysis 自动把某些堆数据放在栈上，程序员不需要思考就可以达到 value type 带来的那么一点点性能提升。相比之下，Swift，Rust 和 C# 的 value type 制造的更多是麻烦，而没有带来实在的性能优势。&lt;/p&gt;&lt;p&gt;Swift 1.0 犯下这种我一眼就看出来的低级错误，你也许从中发现了一个道理：编译器专家并不等于程序语言专家。很多经验老到的程序语言专家一看到 Swift 最初的 array 设计，就知道那是错的。只要团队里有一个语言专家指出了这个问题，就不需要这样反复的修改折腾。为什么 Swift 直到 1.0 发布都没有发现这个问题，到了 2.0 修正却仍然是错的？我猜这是因为 Apple 并没有聘请到合格的程序语言专家来进行 Swift 的设计，或者有合格的人，然而他们的建议却没有被领导采纳。Swift 的首席设计师是 Chris Lattner，也就是 LLVM 的设计者。他是不错的编译器专家，然而在程序语言设计方面，恐怕只能算业余水平。编译器和程序语言，真的是两个非常不同的领域。Apple 的领导们以为好的编译器作者就能设计出好的程序语言，以至于让 Chris Lattner 做了总设计师。&lt;/p&gt;&lt;p&gt;Swift 团队不像 Go 语言团队完全是一知半解的外行，他们在语言方面确实有一定的基础，所以 Swift 在大体上不会有特别严重的问题。然而可以看出来这些人功力还不够深厚，略带年轻人的自负，浮躁，盲目的创新和借鉴精神。有些设计并不是出自自己深入的见解，而只是“借鉴”其它语言的做法，所以可能犯下经验丰富的语言专家根本不会犯的错误。第一次就应该做对的事情，却需要经过多次返工。以至于每出一个新的版本，就出现一些“不兼容改动”，导致老版本语言写出来的代码不再能用。这个趋势在 Swift 3.0 还要继续。由于 Apple 的统治地位，这种情况对于 Swift 语言也许不是世界末日，然而它确实犯了语言设计的大忌。一个好的语言可以缺少一些特性，但它绝不应该加入错误的设计，导致日后出现不兼容的改变。我希望 Apple 能够早日招募到资深一些的语言设计专家，虚心采纳他们的建议。BTW，如果 Apple 支付足够多的费用，我倒可以考虑兼职做他们的语言设计顾问 ;-)&lt;/p&gt;&lt;h3&gt;Java 有 value type 吗？&lt;/h3&gt;&lt;p&gt;有人看了以上的内容，问我：“你说 Java 只有 reference type，但是根据 Java 的&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html&quot;&gt;官方文档&lt;/a&gt;，Java 也有 value type 和 reference type 的区别的。” 由于这个问题相当的有趣，我另外写了一篇&lt;a href=&quot;http://www.yinwang.org/blog-cn/2016/06/08/java-value-type&quot;&gt;文章&lt;/a&gt;来回答这个问题。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">swift</guid>
<pubDate>Mon, 06 Jun 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>我的 tweet 系统</title>
<link>http://yinwang.org/blog-cn/2016/05/25/my-tweet</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;我的 tweet 系统&lt;/h2&gt;&lt;p&gt;有时候灵光乍现，却又不想写成完整的文章，所以尝试过使用 twitter 和微博，然而最终我发现它们有各种缺点。所以我想出一个圡办法：自己手动整理一个列表，把想说的放进去，加上日期，就算是我的 tweet 系统。&lt;/p&gt;&lt;p&gt;这个系统有一系列强大的功能：无法 follow 或订阅，不能评论，不方便转载。可以随意修改，随意排序，不限字数。不能随时随地增加内容，防止成瘾。心诚的人必须主动来这里看，理解更深入，自动过滤心理不正常的人，等等…… 这是迄今为止最好最完善的 social network 系统。本系统的座右铭是：我想写 tweet，所以我就写了。你们想看就看，不想看就算了。&lt;/p&gt;&lt;p&gt;请点击&lt;a href=&quot;http://www.yinwang.org/tweet.html&quot;&gt;这里&lt;/a&gt;访问我的 tweet 系统。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">my-tweet</guid>
<pubDate>Wed, 25 May 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>正面思维的误区</title>
<link>http://yinwang.org/blog-cn/2016/05/22/positive-thinking</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;正面思维的误区&lt;/h2&gt;&lt;p&gt;有些人喜欢宣扬所谓“正面思维”（positive thinking），而不顾事实真相。每当你批评一些事情，他们就会拿出正面思维这个万能法宝来压制你，说：“你这人怎么这么 negative？要 positive，要看到事物好的方面才对！”&lt;/p&gt;&lt;p&gt;比如这次有人说：“你把之前每个东家都喷了一遍。这里面难道就没有你自己的问题吗？” 我只能说，如果它们真的就是那么恶劣，那我有什么办法呢？由于没来得及选择，连续进入好几家问题公司，其实很正常。我不是一个完美的人，然而在公司的人际关系上，我可以说是仁至义尽了。我没架子，容易相处，这点很多同事都知道，甚至厨师和扫地大妈都知道。然而我绝对不是好欺负的。&lt;/p&gt;&lt;p&gt;像 Coverity，Sourcegraph 这类极品，欺压员工，无耻利用，行为极其恶劣，难道我还能说它们好话不成？我的心理不知道要扭曲到什么程度，才能发掘出他们好的地方来。这些公司的恶劣行径，严重损害了员工的身心健康，伤害了他们的事业发展，在某种程度上可以说是犯罪行为，没有把这些人告上法庭就已经不错了。关于这些公司，有很多骇人听闻的细节我还没有说出来，我保留对这些进行进一步揭露的权利。&lt;/p&gt;&lt;p&gt;然而这不是今天的主题，我今天想谈的是所谓“正面思维”。很多人没有意识到，盲目的正面思维，其实是一个很严重的问题。正面并没有什么问题，快乐是好事，然而它们应该是结果，而不应该是目的。如果一个社会需要刻意去提倡“正面”和“快乐”，去宣扬它们，通过舆论压力或者暴力，迫使每个人都“正面思维”，那就有严重问题了。文化大革命的时候，人们的思维可真是很正面啊，各种歌颂…… 你要是敢说任何不好听的话，立即被打成反革命右派。可是今天，我发现这种文革似的“正面思潮”，又有抬头之势。其实，它在美国已经泛滥成灾，以至于有人专门写了一本书来批判这种“正面思维”：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://www.amazon.com/Bright-sided-Relentless-Promotion-Positive-Undermined-ebook/dp/B002SKDGQ0&quot;&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-28fd151402f7b345.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200&quot;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;当你遇到困难的时候，美国人喜欢说：“别担心，一切都会好起来的……”，“要专注于事物好的方面……”，“只要你努力，就会有好结果……”，“困难是临时的，面包会有的，Go 语言会改进的……”，“危机会过去的，经济会持续增长的⋯⋯”，“美国是世界上最伟大的国家，上帝保佑美利坚……” 看看这本书，你就知道这些说法有多大的欺骗性。整个美国，其实都沉浸在人们不切实际的“正面幻想”之中。&lt;/p&gt;&lt;p&gt;“正面思维”跟美国的剥削制度和资本主义，是密不可分的。美国总是宣称自己是民主自由的国家。听到这个，比美国民主和自由很多的国家，都笑了。一个真正民主自由的国家，有什么必要反复的宣称自己是民主和自由的呢？事实上，美国是一个剥削和压迫非常严重的国家，美国人民并不幸福。实际上，正面思维就是剥削者想出来，用于安抚人民，让人安心做廉价劳动力的工具。一些所谓“成功人士”，总是鼓励大家要上进，要看到事物好的方面，说失业是一种福分，要安于现状，一步一步奋斗，往上爬！然后呢，自己却在背后玩弄权术，利用人们的正面不设防的心理，招摇撞骗，投机取巧，贬低人的价值，压低雇员工资，让别人加班加点，动作慢了随时开掉。自己却不劳而获，靠着一口官腔（所谓“领导才能”）飞黄腾达。&lt;/p&gt;&lt;p&gt;在美国，正面思维是一个产业。号称“快乐民族”的美国人，每年消耗掉世界上三分之二的抗抑郁症药物。美国出产层出不穷的正面思维和“成功学”书籍，DVD，以及其他产品：『&lt;a href=&quot;https://en.wikipedia.org/wiki/How_to_Win_Friends_and_Influence_People&quot;&gt;人性的弱点&lt;/a&gt;』，『&lt;a href=&quot;https://en.wikipedia.org/wiki/Chicken_Soup_for_the_Soul&quot;&gt;心灵的鸡汤&lt;/a&gt;』，『&lt;a href=&quot;https://en.wikipedia.org/wiki/Who_Moved_My_Cheese%3F&quot;&gt;谁动了我的奶酪&lt;/a&gt;』，『&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Secret_(book&quot;&gt;秘密&lt;/a&gt;)』…… 出产成千上万的所谓人生导师，职场教练，宗教领袖，知心大妈，心理医生，鸡汤和蛇油贩子…… 他们的谋生方式，就是训练你如何正面思维，抑制负面情绪。这些人不能给你任何切实可行改善生活的办法，而只是告诉你，如何才能把生活的挫折，社会的不合理，不公平，都想成自己的思想有问题，或者自己不够努力，不够好。不论遇到什么样的不幸或者不公正待遇，你都不能抱怨抗议，反而还得“心存感激”，因为你活着就是上帝最好的恩赐。这也就是为什么美国有个节日叫“感恩节”，除了美国及其附庸加拿大，世界上没有其它国家庆祝感恩节。&lt;/p&gt;&lt;p&gt;美国的正面思维产业是如此的发达，甚至产生了一门学科，叫做“正面心理学”。哈佛大学还开设了红极一时的『&lt;a href=&quot;https://positivepsychologyprogram.com/harvard-positive-psychology-course-1504&quot;&gt;正面心理学&lt;/a&gt;』课程（所谓“幸福课”）。我当年看了一阵子这课的&lt;a href=&quot;https://www.youtube.com/watch?v=K8qpn6kNfPc&amp;amp;list=PL28D16304BA57DD7E&quot;&gt;视频&lt;/a&gt;，发现它真的很不寻常。课程进行到将近一半，教授仍然在做一般课程第一堂课的那种“动员工作”。没有传授任何切实可行的方法，只是反反复复地试图说服你，为什么你应该学正面心理学…… 老师啊，我坐在你课堂上半学期了，你还在告诉我为什么应该上你的课？！后来我发现，这个学科很像传销。它并不能让人快乐起来，然而它确实能教会你如何说服别人来上这门课，能把你训练成跟老师一样的“幸福课推销员”，然后你又可以去训练下一代的推销员…… 最后大家都成了推销员，然而推销员自己并不快乐，因为他们没有真正的产品和客户。&lt;/p&gt;&lt;p&gt;你知道为什么自从小布什做总统以来，美国的正面思维产业越来越红火了吗？因为小布什本来就是拉拉队长（cheerleader）出生，他以前的工作就是给大家加油鼓气的。小布什要求美国人民，一定要正面，一定要认为美国是世界上最伟大的国家，一定要认为美国人民是上帝的宠儿！;-)&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-8c0c6feb3e7cffc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/300&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;在 Cornell 和 Google 的时候，我饱尝了盲目的正面思维所带来的危害。Cornell 这学校有个奇怪的现象，跟同学聊天时，如果你想打听某个教授的学术或者为人，得到的回应必然是：“他好牛！” “好厉害！” “非常聪明！” 之类的语言。你听不到任何人说不好的方面，比如：“他讲课像是背书”，“他的研究没有实质意义”，“他的学生都很累”之类的负面信息。所以在 Cornell，你无法从同学那里得到任何信息，每个人都饱尝了与某些教授打交道的辛酸，可是每个人都把那些秘密藏在心底。他们对你说：“嗯，他很厉害，他的研究很伟大……”&lt;/p&gt;&lt;p&gt;这种铺天盖地的正面信息，是无益甚至有害的。如果你只听到正面的声音，那你就无法做出正确的决定。这就像你在网上买东西，如果只看正面的评价，那你很可能买到有问题的商品。正确的作法，应该是正面负面的信息都看。特别是负面的信息，必须仔细看。它们可以告诉你，这个产品有哪些烦扰其他人的缺陷，会不会影响到你的使用。一般我在网上如果被一个产品吸引，我首先看的是一颗星的评价，因为给一颗星的人，一般是恨透了这个产品。当然里面有些无知或者不知好歹的人，你可以忽略，但是大部分人会告诉你，他们不喜欢这个产品的具体原因。我很会分析这些评价，这就是为什么我家里的很多产品，都是非常好用的。&lt;/p&gt;&lt;p&gt;Cornell 这个学校，就是缺乏这种有益的负面评价。你总是听说每个教授都很牛，人都很好，…… 然而当你真正跟他们接触，就发现事实并非如此。你一次次的跳入火坑，然后才开始希望，要是开头的时候听到一些负面的信息，该多好。可是每个人表面上都是那么的 positive，每个人都认为 negative 是错误的心理，每个人都在强装笑容。这是一个多么可怕的地方！&lt;/p&gt;&lt;p&gt;Google 的气氛非常类似于 Cornell。Google 员工吃饭时，谈论每个项目或者团队，都带着玫瑰色的光环，仿佛 Google 做的一切都是美好的，先进的，有前途的。在每个星期的 TGIF（Tell Googlers It&#39;s Friday）大会上，founder 们都在大讲台上宣布各种好消息，而对坏消息闭口不提或者一笔带过。下面的 Google 员工们群情激昂，对一些小不点的事情各种欢呼鼓掌尖叫，跟传销大会似的。事实上，Google 内部有许多穷途末路的项目。表面看上去很厉害的样子，等你进去才发现是死路一条，垂死挣扎。项目领导平时紧紧张张，生怕上面来人调查，把自己的项目杀掉。在公司内部搞各种政治，东拉西扯建立各种依赖关系，这样自己的项目才得以生存。&lt;/p&gt;&lt;p&gt;这种虚伪的正面氛围，存在于很多的美国公司，员工每个星期都被领导打各种鸡血针，保持激昂向上的状态。我曾经跟英国，法国，德国，意大利，瑞典，波兰等国家的同事聊天，他们都暗自嘲笑美国人，说过度正面，传销式的群情激昂，吃错药了一样，确实是美国文化的一大特色。欧洲人比较务实，不搞这套，好的就说好，坏的就批评或者嘲笑，直率坦荡。当然，我不能说所有美国公司都有这种问题，所以我仍然存在希望，找到稍微实在点的公司。&lt;/p&gt;&lt;p&gt;盲目的正面思维，忽略问题，并不能解决问题。你必须看到负面的事实，才有可能避免困难，得到好的结果。正面思维和浮夸的气氛，正在侵蚀 Google 和很多其它美国公司。为了看清楚正面思维的危害性，我推荐你看看这本书，名叫『负面思维的威力』：&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Power-Negative-Thinking-Unconventional-Achieving/dp/054402771X&quot;&gt;
&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/68562-f879b3a439066457.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/200&quot;&gt;&lt;/a&gt;&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">positive-thinking</guid>
<pubDate>Sun, 22 May 2016 00:00:00 +0800</pubDate>
</item>
<item>
<title>未来计划</title>
<link>http://yinwang.org/blog-cn/2016/05/14/future</link>
<description>&lt;p&gt;
  　　
  &lt;/p&gt;&lt;h2&gt;未来计划&lt;/h2&gt;&lt;p&gt;生活就像一出戏，一环扣着一环。很多人对我说，我是一个非常有才华的人，只是没有被放到合适的位置。他们说的是实话。虽然我通过努力，得到了精华的知识和独立深入的思维能力，然而由于一些早期的错误抉择，再加上遇到一些错误的人，我的生活一度陷入困境。直到现在缓过气来，我才可以开始考虑一个更好的未来。&lt;/p&gt;&lt;h3&gt;曲折的过去&lt;/h3&gt;&lt;p&gt;我的第一个错误，来自于一个不切实际的浪漫幻想。我把爱情看得太简单，太容易，太伟大。我错误地改变了我爱的女孩的生活轨迹。这一个错误，我用了十年的时间来偿还，同时又导致了另外一系列的错误，以至于我颠沛流离。&lt;/p&gt;&lt;p&gt;我的第二个错误，是进入 Google 做实习。本来就不喜欢那里，为了养家糊口挣点小钱，下一年却还去同一个地方，结果弄得自己很不舒服，而且失去了其它更好的机会。&lt;/p&gt;&lt;p&gt;我的第三个错误，在于离开 Indiana 大学之后，进入 Coverity 工作。虽然 Glassdoor 上面恶评如潮，说那里“氛围有毒”，我却因为 Coverity 似乎有很强的技术实力，拥有像 NASA，Boeing，Lockheed Martin 一类的高大上客户，而对这个公司产生了尊敬。结果呢，我花了几个月的时间，修补别人过去一年里留下来的各种蹊跷 bug。加班加点的工作，人家却完全不拿你当个东西。一知半解的所谓 architect，从来不写代码，却指手画脚，不切实际地给你设置每个任务的“时间上限”。拿着低廉的薪水，还被 manager 各种蛮横威胁，慢一点就要炒你鱿鱼的味道。&lt;/p&gt;&lt;p&gt;离开 Coverity 之后，困境却远远没有结束。我饱尝了三藩市区各种 startup 面试的肤浅和无理。也有些公司（比如 Twitter）面试一切都很顺利，最后却莫名其妙没有 offer。以至于两个月过去了，一个 offer 都没有拿到。学生签证毕业后的“OPT”，最多只能有三个月没有工作。Coverity 的 founder 倒不是个坏人，在他的介绍帮助下，我找到了下一份工作，在一个做语音 app 的公司。这公司也是个肤浅小店，而且人家连“Software Engineer”的职位都没给我，让我去做被公司里的 iOS 和 Android developer 都看不起的“Data Engineer”的工作。于是饱尝了所谓“Data Scientist”的辛酸，折腾 Neo4J 这类垃圾数据库的痛苦。每次跟那些 app 程序员聊天，别人都显示出一副“你会写代码吗？”一样的神情……&lt;/p&gt;&lt;p&gt;最后就遇到了 Sourcegraph 的两位 founder。开头受到如此“三顾茅庐”的礼遇，采用了我精深的代码，而且两位貌似比较懂行，所以以为能得到应有的尊重。哪知道花了两个月把 RubySonar 做完之后才发现，人家可没把你当回事，反而说你 performance 有问题，说你做这东西“居然花了两个月”，找借口开掉！我让你们自己做，做个两年看能不能做出来？不理解，不满意，也不能用正确的方式表达出来，却在我背后把键盘敲得猛响发泄。我察觉到有人不爽，还礼貌的问，我是不是有些地方做得不够好？结果跟我说没事，然后继续在背后使闷气……&lt;/p&gt;&lt;p&gt;其实这两位 founder 都是 Go 语言的拥鳖。整个 server 是 Go 语言写的，乱得不成样子，各种 bug，却仍然因为自己用 Go 语言而自豪，鄙视 Python，Ruby，Java 和所有其它语言。自己选错了工具，却写 blog 把 AngularJS 骂了一顿，说换用了 Go 的 HTML template 之后很开心，而其实 Go HTML template 其实是个烂东西。开源会议的时候去给 Go 语言的团队捧场，使用“live blog”的方式给 Go 语言团队各种有失身份的吹牛拍马。每次有 Stanford 学生来面试，founder 们可真是兴奋异常，校友来校友去的。虽然我的职位叫做“Lead Researcher”，可经常是面试的“Stanford校友”来了，跟我连个正式的介绍都没有。有次一个 Stanford 本科生来面试，跟 founder 们说：“我上过一门 CSxxxx 的课。” 我在旁边听到了，好奇这是什么有趣的课，就问：“CSxxxx 是什么？” 本科生瞟了我一眼，答：“哦，这是 Stanford 的一门课，叫做‘算法’”。言下之意就是我们 Stanford 的人会算法，算法是什么，你知道么？最后招了一个 Stanford 的学生来实习，想给 Clojure 做一个类似 PySonar 的类型推导，也不虚心请教，自以为是，最后一筹莫展，连门都没有摸到就结束了。&lt;/p&gt;&lt;p&gt;Sourcegraph founder 们的忽然翻脸，最后才导致了我第一次使用自己的 blog 发出求救信息。跟 OPT 不一样，H1-b 签证有苛刻的限制，一旦工作突然中止，外国人不可能有足够时间找到下一份工作，他们必须在很短时间内离境。美国名牌大学的学生，做出如此卑劣的事情，由此可见美国的“世界一流大学”，树造的是什么样的人。罗素（Bertrand Russell）在一百年前就说，美国是商人开的国家，美国的教授只不过是商人的仆人。在美国待得越久，我对此的感悟就越深。&lt;/p&gt;&lt;p&gt;幸好当时许多的同胞，伸出了援助的双手，让我感觉到中华民族作为一家人的温暖。在此我要感谢在那段时间帮助和鼓励过我的所有人，才让我顺利走到了今天。&lt;/p&gt;&lt;p&gt;由于时间紧迫，我迅速拿到两个 offer 之后，就从其中选择了一个，却仍然没能避免必须飞回国内重新签证的麻烦。谁知我到了国内感觉很好，就不想再回到美国，可惜当时有重任在身，不得已又回来了。这在当时看来是一个不错的 offer，它解决了我的燃眉之急，我顺利的完成了为前女友付完学费的任务。&lt;/p&gt;&lt;h3&gt;更好的未来&lt;/h3&gt;&lt;p&gt;所以很多人说，我没有处于合适的地位，确实是这样。一方面我有天赋才能，有名师指点。另一方面我的生活却支离破碎，没有自由。有谁知道在这“天才”的光环下，有多少的苦楚。虽然解决了危机，然而我的生活却远远没有开始。我的收入远远落后于跟我同等水平，甚至刚毕业的人。收入除去美国的重税和高房租，欠下的车贷，基本的生活费用，过了一年我的账上仍然是负数。现有的收入远远无法满足在这个地区过上基本生活的需要，连房子的首付都付不起。有些人期望我对社会做出“贡献”，可是社会给了我什么呢？这样的生活还怎么做贡献？谁是社会？什么是贡献？&lt;/p&gt;&lt;p&gt;我很感谢帮助我找到现在工作的人，我也喜欢我的队友们，但是由于各种原因，我不觉得现在的公司能够发挥我应有的作用。虽然有深入的见解，我却没有处于让它们可以被采纳的地位。做出了大的贡献，也没有得到相应的奖励和加薪。这就是我的现状，也许你没有想到。&lt;/p&gt;&lt;p&gt;所以我决定在世界范围之内寻找新的机会和合作伙伴。我已经拿到不错的 offer，但我可能漏掉了考虑某些很好的公司。所以还是希望扩展一下搜索范围，开阔一下眼界，走出更好的下一步。如果你理解我说的一些东西，你有一颗类似的心，自知却不傲慢，踏踏实实做事，你有比较好的机会或者合作项目，请&lt;a href=&quot;mailto:shredderyin@gmail.com&quot;&gt;联系我&lt;/a&gt;。&lt;/p&gt;&lt;p&gt;由于这么多次的惨痛经历，我不再想为 startup 公司工作，除非是作为 founder。我尊敬一些成熟低调的大公司，比如 IBM，Intel，AMD，微软，Oracle（Sun）…… 对 Google 和 Tesla 这样年轻浮躁的公司不感兴趣。我感兴趣的领域包括系统平台，数据库，程序语言，编译器，运行时系统（比如 JVM），并行和分布式计算，硬件设备，以及一切跟性能相关的问题。&lt;/p&gt;</description>
<author>yinwang0</author>
<guid isPermaLink="false">future</guid>
<pubDate>Sat, 14 May 2016 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
