<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:media="http://search.yahoo.com/mrss/">
<channel>
<title>雾雨魔法店</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/</link>
<description>http://zhuanlan.zhihu.com/marisa/20419321</description>
<language>zh-cn</language>
<lastBuildDate>Tue, 28 Nov 2017 13:39:21 +0800</lastBuildDate>
<item>
<title>Taba Taba!</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-28-31466428.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Taba Taba!&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31466428&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天发现了篇paper，&lt;a href=&quot;http://brics.dk/RS/05/3/BRICS-RS-05-3.pdf&quot;&gt;http://brics.dk/RS/05/3/BRICS-RS-05-3.pdf&lt;/a&gt;&lt;/p&gt;&lt;p&gt;就是一个小trick，可以用于在2n pattern match下算出zip l (rev r)&lt;/p&gt;&lt;p&gt;看完以后觉得很简单啊，一点都不像某SM（Selection Monad（特大雾&lt;/p&gt;&lt;p&gt;不过为啥想不到呢，orz&lt;/p&gt;&lt;p&gt;最后：&lt;/p&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-f6eba3265331b7fcae96f281a17bbc0d_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;688&quot; data-rawheight=&quot;87&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-bc18b93eb1df21c1c6d5d9632b9e58da_r.jpg&quot; data-caption=&quot;&quot; data-size=&quot;normal&quot; data-rawwidth=&quot;680&quot; data-rawheight=&quot;383&quot;&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>脚本少女魔理沙</author>
<guid isPermaLink="false">2017-11-28-31466428</guid>
<pubDate>Tue, 28 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Lens: 从入门到再次入门</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-24-31328798.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Lens: 从入门到再次入门&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31328798&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-28c51979d43ba132a98057d07b183025_r.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;类型补全计画&lt;/h2&gt;&lt;p&gt;从上一篇我们可以看出，Lens 就是整合在一起的 &lt;code class=&quot;inline&quot;&gt;Getter&lt;/code&gt;和 &lt;code class=&quot;inline&quot;&gt;Setter&lt;/code&gt;，借助&lt;code class=&quot;inline&quot;&gt;set&lt;/code&gt;&lt;i&gt;, &lt;/i&gt;&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;&lt;i&gt;, &lt;/i&gt;&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;这三个函数，我们可以分别使用 Lens 的&lt;code class=&quot;inline&quot;&gt;Getter&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;Setter&lt;/code&gt;。但是我们目前的 Lens 类型定义并不是完整的，因此我们首先对 Lens 的类型进行补全。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens s a = Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; (s -&amp;gt; f s)&lt;/code&gt;&lt;p&gt;首先让我们看这样一个例子： &lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;set _1 ((1,2),3) 3
set _1 ((1,2),3) True&lt;/code&gt;&lt;p&gt;在我们目前的类型定义上面的代码第一行可以正常工作，而第二行则不可以。但是第二行确实是合乎逻辑的，我们的确有时候需要讲一个原本是数字的地方设置为布尔值或是其他的什么东西。&lt;/p&gt;&lt;p&gt;让我们将原先的 Lens 类型定义进行简单的改变，这样就可以在通过 Lens 对数据操作时改变数据的类型。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens s t a b = Functor f =&amp;gt; (a -&amp;gt; f b) -&amp;gt; (s -&amp;gt; f t)&lt;/code&gt;&lt;p&gt;我们可以可以直观地解读这个新的类型定义的含义，对&lt;code class=&quot;inline&quot;&gt;s&lt;/code&gt;类型的量的一个&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;类型的域进行某种操作，之后该域变为&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;，相应的&lt;code class=&quot;inline&quot;&gt;s&lt;/code&gt;变为&lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt;。当然这里的&lt;code class=&quot;inline&quot;&gt;s&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;t&lt;/code&gt;的关系并不是随意的，而是依赖于&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;的关系。&lt;/p&gt;&lt;p&gt;现在我们之前使用的 Lens 类型将定义如下：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens&#39; s a = Lens s s a a
-- Or
{-# LANGUAGE LiberalTypeSynonyms #-}
type Simple f a b = f a a b b
type Lens&#39; = Simple Lens &lt;/code&gt;&lt;p&gt;在这个定义下我们可以定义出由&lt;code class=&quot;inline&quot;&gt;getter&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;setter&lt;/code&gt;构建 Lens 的函数&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;lens :: (s -&amp;gt; a) -&amp;gt; (s -&amp;gt; b -&amp;gt; t) -&amp;gt; Lens s t a b
lens getter setter f s = setter s &amp;lt;$&amp;gt; f (getter s)&lt;/code&gt;&lt;p&gt;下面让我们来回忆一下&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的定义&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;over lens f = runIdentity . lens (Identity . f)
view lens b = getConst $ lens Const b &lt;/code&gt;&lt;p&gt;我们发现在&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;分别取&lt;code class=&quot;inline&quot;&gt;Identity&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;Const&lt;/code&gt;的时候，Lens 就分别表现出了 &lt;code class=&quot;inline&quot;&gt;Setter&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;Getter&lt;/code&gt;的特性。对于&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;而言，他们只需要使用单一的 Functor ，因此我们可以专门定义&lt;code class=&quot;inline&quot;&gt;Getter&lt;/code&gt;与&lt;code class=&quot;inline&quot;&gt;Setter&lt;/code&gt;的类型。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Getting r s a = (a -&amp;gt; Const r a) -&amp;gt; s -&amp;gt; Const r s
type Setter s t a b = (a -&amp;gt; Identity b) -&amp;gt; s -&amp;gt; Identity t
type Setting = Simple Setter &lt;/code&gt;&lt;p&gt;在有了这个定义之后，我们就可以修改之前三个常用函数的类型签名：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view :: Getting a s a -&amp;gt; b -&amp;gt; a
over :: Setter s t a b -&amp;gt; (a -&amp;gt; b) -&amp;gt; s -&amp;gt; t
set  :: Setter s t a b -&amp;gt; b -&amp;gt; s -&amp;gt; t&lt;/code&gt;&lt;p&gt;这样的改变看似没有什么作用，但通过这样的改变，三个常用函数不再以 Lens 为作用对象，而是更加聚焦于一类更加通用的类型。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;作为概念积类型的类型与作为概念的值&lt;/h2&gt;&lt;p&gt;通过之前的例子，我们可以看到我们用 Lens 来操作一个&lt;b&gt;积类型(Product Type)&lt;/b&gt;，例如元组、Record 或是列表；于此相对，Lens 不能用来操作&lt;b&gt;和类型(Sum Type)&lt;/b&gt;。我们可以用 Lens 改变或是读取积类型的某个&lt;b&gt;部分(Component)&lt;/b&gt;的值。但是实际上，我们不需要一个&lt;b&gt;实在的&lt;/b&gt;积类型，也不需要一个实在的部分，只需要概念上的积类型与概念上的部分即可。这样的表述显得非常抽象，让我们来看几个例子。&lt;/p&gt;&lt;p&gt;第一个例子是列表，从定义来看，列表的确是一个积类型，它由相继的元素组成，它的各个部分就是各个组成元素。但是，我们将要操作的却不是这些实在的部分，而是抽象的部分，&lt;b&gt;列表的长度&lt;/b&gt;。&lt;/p&gt;&lt;p&gt;让我们定义这个玄乎的&lt;code class=&quot;inline&quot;&gt;_length&lt;/code&gt;Lens ：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;_length :: Lens&#39; [a] Int
_length f l = const l &amp;lt;$&amp;gt; f (length l)&lt;/code&gt;&lt;p&gt;可以看出，它可以从一个列表中提取出它的长度，但是不会改变它的长度&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view (_1._length) (&quot;hello&quot;, 3)
--&amp;gt; 5
set (_1._length) 9 (&quot;world&quot;, 3) 
--&amp;gt; (&quot;world&quot;,3)&lt;/code&gt;&lt;p&gt;在这个例子中，长度并不是列表的一个实在的部分，我们操作的积类型也不是一个实在的积类型，而是概念中的某种包含长度的积类型。&lt;/p&gt;&lt;p&gt;再看第二个例子，我们操作一个数字的绝对值。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;_abs :: (Num a, Ord a) =&amp;gt; Lens&#39; a a
_abs f i = setabs &amp;lt;$&amp;gt; f (abs i)
  where sgn x
            | x &amp;gt;= 0 = 1
            | x &amp;lt;  0 = -1
        setabs x
               | x &amp;gt;= 0 = x*sgn i
               | x &amp;lt;  0 = error &quot;Abs must be non-negative&quot;
view _abs -123
--&amp;gt; 123
set _abs 13 -99
--&amp;gt; -13&lt;/code&gt;&lt;p&gt;可以看出，概念上，数字确实含有“绝对值”这一部分的值，但是数字与绝对值的关系同样也不是“元组与每个元素”之间的关系，也不是“记录与它的域”的关系。同时，数字本身，并不明显是那种积类型，这里我们同样是将其看作了概念上的积类型。&lt;/p&gt;&lt;p&gt;引入这两个例子的目的是说明，Lens 是某种更加抽象与普遍化的工具，它不仅仅用来处理具体的数据结构与数据结构内部的值，也可以用来处理各种各样的情况；Lens 聚焦于某个数据结构（实在的或是概念上的）的某个值上，这无关乎这个值是实在地存在于这个数据结构里，还是抽象地、概念上地存在于这个数据上，这为我们以后利用 Lens 完成语义的表达提供了可行性。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;多焦点数据操作&lt;/h2&gt;&lt;p&gt;Lens 在工作的过程中，对某个数据结构内某个值应用了一个&lt;code class=&quot;inline&quot;&gt;a -&amp;gt; f b&lt;/code&gt;的函数，并最终得到一个&lt;code class=&quot;inline&quot;&gt;f t&lt;/code&gt;类型的新数据结构。假设现在我们想要操作某个列表&lt;code class=&quot;inline&quot;&gt;[a]&lt;/code&gt;中的所有元素，那么我们期望对列表中的每个元素应用&lt;code class=&quot;inline&quot;&gt;a -&amp;gt; f b&lt;/code&gt;的函数，并且最终得到一个&lt;code class=&quot;inline&quot;&gt;f [b]&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;对于应用某个函数于列表中的每个元素这一任务，我们有非常熟悉的解决方案&lt;code class=&quot;inline&quot;&gt;map&lt;/code&gt;。 &lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;f :: a -&amp;gt; f b
xs :: [a]
---
map f xs :: [f b] &lt;/code&gt;&lt;p&gt;但是我们期望得到的类型是&lt;code class=&quot;inline&quot;&gt;f [b]&lt;/code&gt;而不是&lt;code class=&quot;inline&quot;&gt;[f b]&lt;/code&gt;，我们需要一个将函子的列表转换为列表的函子的函数，而实际上，函子没有足够的约束来支持这样的操作，最简单的例子就是，一个空函子的列表我们没法直接找到对应的空列表的函子；此外更一般的场合我们需要将&lt;code class=&quot;inline&quot;&gt;f a&lt;/code&gt;合并至&lt;code class=&quot;inline&quot;&gt;f [a]&lt;/code&gt;得到一个新的&lt;code class=&quot;inline&quot;&gt;f [a]&lt;/code&gt;的函数，其类型为&lt;code class=&quot;inline&quot;&gt;f a -&amp;gt; f [a] -&amp;gt; f [a]&lt;/code&gt;，而我们有的列表拼接函数的类型为&lt;code class=&quot;inline&quot;&gt;a -&amp;gt; [a] -&amp;gt; [a]&lt;/code&gt;，这也不是函子的升格可以直接完成的。而应用函子恰巧有我们需要的&lt;code class=&quot;inline&quot;&gt;pure&lt;/code&gt;函数处理第一种情况，又有可以对双参数函数升格的&lt;code class=&quot;inline&quot;&gt;liftA2&lt;/code&gt;。由此看来，我们需要的是使用应用函子代替函子完成我们的需要。&lt;/p&gt;&lt;p&gt;有了这些分析，我们不难写出将函子的列表提取为列表的函子的函数。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;(&amp;lt;:&amp;gt;) :: Applicative f =&amp;gt; f a -&amp;gt; f [a] -&amp;gt; f [a],
(&amp;lt;:&amp;gt;) = liftA2 (:)
sequenceA :: (Applicative f) =&amp;gt; [f a] -&amp;gt; f [a]  
sequenceA [] = pure []  
sequenceA (x:xs) = x &amp;lt;:&amp;gt; sequenceA xs&lt;/code&gt;&lt;p&gt;接下来我们需要的操作列表中全部元素的 Lens 的实现也可以容易给出，因为我们先前已经通过&lt;code class=&quot;inline&quot;&gt;map&lt;/code&gt;实现了&lt;code class=&quot;inline&quot;&gt;(a -&amp;gt; f b) -&amp;gt; [a] -&amp;gt; [f b]&lt;/code&gt;，只需再对结果应用刚实现的&lt;code class=&quot;inline&quot;&gt;sequenceA&lt;/code&gt;就可以恰好得到我们需要的 Lens 类型。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;_every :: Applicative f =&amp;gt; (a -&amp;gt; f b) -&amp;gt; [a] -&amp;gt; f [b]
_every f xs = sequenceA $ map f xs

over _every (+1) [2,3,4]
--&amp;gt; [3,4,5]&lt;/code&gt;&lt;p&gt;由于应用函子是特殊的函子，所以&lt;code class=&quot;inline&quot;&gt;_every&lt;/code&gt;是特殊的 Lens， 我们将这类 Lens 命名为 Traversal。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Traversal s t a b = Applicative f =&amp;gt; (a -&amp;gt; f b) -&amp;gt; s -&amp;gt; f t
type Traversal&#39; s a = Traversal s s a a&lt;/code&gt;&lt;p&gt;取这个名字的原因是，在标准库&lt;code class=&quot;inline&quot;&gt;Data.Traversal&lt;/code&gt;中实际上恰好有一个函数&lt;code class=&quot;inline&quot;&gt;traverse&lt;/code&gt;符合我们的要求， 这个函数并非为 Lens 专门设计，但它的类型恰好与我们先前的&lt;code class=&quot;inline&quot;&gt;_every&lt;/code&gt; 相同，不仅如此这个函数不仅可以在列表上工作，也可以在所有&lt;code class=&quot;inline&quot;&gt;Traversable&lt;/code&gt;类型上工作。由于这类 Lens 操作均依赖于&lt;code class=&quot;inline&quot;&gt;traverse&lt;/code&gt;， 所以取名为 Traversal 。&lt;/p&gt;&lt;p&gt;让我们简单地看一下 Traversal 是如何与&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;一通工作的： &lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;traverse :: Applicative f =&amp;gt; (a -&amp;gt; f b) -&amp;gt; t a -&amp;gt; f (t b)
over traverse (+1) [2,3,4]
runIdentity . traverse (Identity . (+1)) [2,3,4]
runIdentity $ sequenceA $ map (Identity . (+1)) [2,3,4]
runIdentity $ sequenceA [Identity 3, Identity 4, Identity 5]
runIdentity $ Identity 3 &amp;lt;:&amp;gt; Identity 4 &amp;lt;:&amp;gt; Identity 5 &amp;lt;:&amp;gt; Identity []
runIdentity $ Identity [3, 4, 5]
--&amp;gt; [3,4,5]&lt;/code&gt;&lt;p&gt;但是，现在我们的 Traversal 不能正确与&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;工作。 例如，对于下面的代码&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view traverse [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
view traverse [1,2,3]&lt;/code&gt;&lt;p&gt;我们期望的结果是这样的，我们只需要它原封不动地返回即可&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
[1,2,3]&lt;/code&gt;&lt;p&gt;而实际上，我们得到了看似匪夷所思的结果&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;&quot;123&quot;
--Ambiguous type variable ‘a0’ arising from a use of ‘print’&lt;/code&gt;&lt;p&gt;让我们展开 Traversal 与&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;工作的过程 &lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view traverse [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
getConst $ traverse (Const b) [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
getConst $ sequenceA $ map (Const b) [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
getConst $ sequenceA  [Const &quot;1&quot;, Const &quot;2&quot;, Const &quot;3&quot;]
getConst $ sequenceA  Const &quot;1&quot; &amp;lt;:&amp;gt; Const &quot;2&quot; &amp;lt;:&amp;gt; Const &quot;3&quot; &amp;lt;:&amp;gt; pure []&lt;/code&gt;&lt;p&gt;我们实际上清楚&lt;code class=&quot;inline&quot;&gt;Const a&lt;/code&gt;本身并非应用函子,&lt;code class=&quot;inline&quot;&gt;Monoid a =&amp;gt; Const a&lt;/code&gt;才是 ，这个&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;类型的值不是“容器”内的值，而是“容器”的一部分，容器内并不存在值。于是，将应用函子范畴上的值应用到应用函子范畴上的函数时，内部并无操作，有的只是“容器”的合并。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;instance Monoid a =&amp;gt; Applicative (Const a) where
  pure _ = Const empty
  (Const x) &amp;lt;*&amp;gt; (Const y) = Const (x &amp;lt;&amp;gt; y)&lt;/code&gt;&lt;p&gt;列表的默认&lt;code class=&quot;inline&quot;&gt;mappend&lt;/code&gt;操作 列表合并，所以我们就可以将上面的计算继续写下去了&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;getConst $ sequenceA  Const &quot;1&quot; &amp;lt;:&amp;gt; Const &quot;2&quot; &amp;lt;:&amp;gt; Const &quot;3&quot; &amp;lt;:&amp;gt; pure []
getConst $ sequenceA  Const &quot;1&quot; &amp;lt;:&amp;gt; Const &quot;2&quot; &amp;lt;:&amp;gt; Const &quot;3&quot; &amp;lt;:&amp;gt; Const &quot;&quot;
getConst $ sequenceA  Const &quot;1&quot; &amp;lt;:&amp;gt; Const &quot;2&quot; &amp;lt;:&amp;gt; Const &quot;3&quot;
getConst $ sequenceA  Const &quot;1&quot; &amp;lt;:&amp;gt; Const &quot;23&quot;
getConst $ sequenceA  Const &quot;123&quot;
&quot;123&quot;&lt;/code&gt;&lt;p&gt;可以看出，这并不是匪夷所思的结果，而是在这些定义下的合理结果。实际上，从&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;类型上我们也可以看出它的确做了它应当的工作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view :: Getting a s a -&amp;gt; s -&amp;gt; a

view traverse [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
-- view :: Getting String [String] String -&amp;gt; [String] -&amp;gt; String&lt;/code&gt;&lt;p&gt;它最终确实给了我们一个字符串。&lt;/p&gt;&lt;p&gt;所以，我们需要构建专用于 Traversal 的&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;函数。考虑之前&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的定义&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view :: Getting a b a -&amp;gt; b -&amp;gt; a
view lens = getConst . lens Const &lt;/code&gt;&lt;p&gt;这里他将原来的值不加改变地喂给了&lt;code class=&quot;inline&quot;&gt;getConst&lt;/code&gt;， 我们可以讲原始值套在一个 Monoid 里完成我们需要的效果。这里，我们需要的就是最终得到一个列表，因此只需要再套一层列表的 Monoid 即可，外面套的这层 Monoid 会互相合并，最终只剩下一个列表，里面排满了原来的元素。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;toListOf :: Getting [a] s a -&amp;gt; s -&amp;gt; [a]
toListOf lens = getConst . lens (\x -&amp;gt; Const [x])

toListOf traverse [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
--&amp;gt; [&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]
toListOf traverse [1,2,3]
--&amp;gt; [1,2,3]&lt;/code&gt;&lt;p&gt;这个函数似乎没有多大用处，它原封不动地返回了原本的列表。但是，我们可以依托于&lt;code class=&quot;inline&quot;&gt;traverse&lt;/code&gt; 构建更多更有用的 Traversal。&lt;/p&gt;&lt;p&gt;例如聚焦于一个列表中全部满足某个条件的 Traversal&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;_all :: Eq a =&amp;gt; a -&amp;gt; Traversal&#39; [a] a
_all st f s = traverse update s
  where
    update old = if st old then f old else pure old
    
toListOf (_all (/=0)) [1,2,0,3,4,0,5]
--&amp;gt; [1,2,3,4,5] &lt;/code&gt;&lt;p&gt;同时，我们描述过 Traversal 是一种特殊的 Lens， 所以它具有 Lens 各种有用的性质，例如通过互相复合来处理嵌套的列表。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;toListOf (traverse.traverse) [[1,2],[1,2,3,4]]
--&amp;gt; [1,2,1,2,3,4]
xs = [[1,2],[1,2,3,4],[4,5,6],[23,4,5,5,4],[1],[2,3]]
over (_all (\x-&amp;gt; length x &amp;lt;= 3 ) .traverse) (+1) xs
-- &amp;gt;[[2,3],[1,2,3,4],[5,6,7],[23,4,5,5,4],[2],[3,4]]&lt;/code&gt;&lt;p&gt;或者与普通的 Lens 复合，来完成复杂的操作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;toListOf (traverse._1) [(1,2),(3,4),(5,6)]
--&amp;gt; [1,3,5]&lt;/code&gt;&lt;p&gt;需要注意的是，Traversal 是特殊的 Lens，也就是说在 Lens 上多出一些特定的限制，因此 Traversal 与普通 Lens 的复合将会仍然继承这些限制，即 Traversal 与 Lens 的复合仍是 Traversal。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;使用更多 Monoid 来获得多种效果&lt;/h2&gt;&lt;p&gt;在上面我们使用了&lt;code class=&quot;inline&quot;&gt;[]&lt;/code&gt;这一 Monoid 来实现了合成列表的效果，实际上，我们还可以使用其他Monoid。下面让我们看几个例子。&lt;/p&gt;&lt;p&gt;第一个例子是将包装过的 &lt;code class=&quot;inline&quot;&gt;Maybe&lt;/code&gt;作为一个 Monoid，并取名为 &lt;code class=&quot;inline&quot;&gt;First&lt;/code&gt; 。从名字我们也可以看出来，它的作用就是取出列表的首个元素。 &lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;newtype First a = First (Maybe a)

instance Monoid (First a) where
  mempty = First Nothing
  mappend (First Nothing) y = y
  mappend        x        _ = x

preview :: Getting (First a) s a -&amp;gt; s -&amp;gt; Maybe a
preview lens = getFirst . getConst . lens (Const . First . Just)

preview (_all (/=0)) [3, 2, 1, 0]
--&amp;gt; Just 3

preview (_all (/=0)) [0,0,0]
--&amp;gt; Nothing&lt;/code&gt;&lt;p&gt;同样，修改 &lt;code class=&quot;inline&quot;&gt;mappend&lt;/code&gt;的定义我们可以得到 &lt;code class=&quot;inline&quot;&gt;Last&lt;/code&gt;，这里不再具体给出。 &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;第二个例子是包装过的&lt;code class=&quot;inline&quot;&gt;Bool&lt;/code&gt;，我们可以用它来判断一个列表中是否含有某个元素&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;newtype Any = Any { getAny :: Bool }

instance Monoid Any where
  mempty = Any False
  Any x `mappend` Any y = Any (x || y)
  
has :: Getting Any s a -&amp;gt; s -&amp;gt; Bool
has l = getAny . getConst . l (const $ Const (Any True)) 

has (_all (==0)) [3, 2, 1, 0]
--&amp;gt; True&lt;/code&gt;&lt;p&gt;我们发现，由于 Traversal 具有良好的抽象能力，我们仅仅选用不同的 Monoid 就实现了多种多用的效果，这无疑是非常令人振奋的。&lt;/p&gt;</description>
<author>孙浩然</author>
<guid isPermaLink="false">2017-11-24-31328798</guid>
<pubDate>Fri, 24 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>SKI组合子演算入门</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-21-31269072.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;SKI组合子演算入门&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31269072&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-30a6a81c41a2104b5a86f912660be680_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;题图的PixivID为：&lt;i&gt;pixiv-ID: &lt;a href=&quot;https://www.pixiv.net/member_illust.php?mode=medium&amp;amp;illust_id=39597155&quot;&gt;39597155&lt;/a&gt;，画师为&lt;/i&gt;&lt;a href=&quot;https://www.pixiv.net/member.php?id=4846084&quot;&gt;アンミツ（QS）&lt;/a&gt;&lt;/p&gt;&lt;p&gt;本文始发于&lt;a href=&quot;https://saul-mirone.github.io/2017/11/21/ski-guide/&quot;&gt;我的博客&lt;/a&gt;，转载请注明作者。&lt;/p&gt;&lt;p&gt;什么是SKI组合子演算？&lt;/p&gt;&lt;blockquote&gt;SKI组合子演算是一个计算系统，它是无类型版本的Lambda演算的简约。这个系统声称在Lambda演算中所有运算都可以用三个组合子S、K和I来表达。&lt;br&gt;	--&lt;a href=&quot;https://en.wikipedia.org/wiki/SKI_combinator_calculus&quot;&gt;维基百科&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;通过&lt;a href=&quot;https://en.wikipedia.org/wiki/Combinatory_logic&quot;&gt;组合子演算&lt;/a&gt;，我们只需要几个预定义的组合子(S、K、I)互相apply，就可以达到&lt;a href=&quot;https://en.wikipedia.org/wiki/Turing_completeness&quot;&gt;图灵完备&lt;/a&gt;。&lt;/p&gt;&lt;h2&gt;定义&lt;/h2&gt;&lt;p&gt;所谓的SKI，一般来说可以这样定义：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;I x -&amp;gt; x&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;K x y -&amp;gt; x&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;S x y z -&amp;gt; x z (y z)&lt;/code&gt; &lt;/p&gt;&lt;h2&gt;推导&lt;/h2&gt;&lt;p&gt;让我们从一个简单的lambda开始，感受一下SKI组合子的威力。&lt;/p&gt;&lt;p&gt;首先是常用的compose函数。假设有：&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;compose = \g -&amp;gt; \f -&amp;gt; \x -&amp;gt; g (f x)&lt;/code&gt;&lt;/p&gt;&lt;p&gt;那么我们可以做如下转换：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;转化&lt;code class=&quot;inline&quot;&gt;g (f x)&lt;/code&gt;为&lt;code class=&quot;inline&quot;&gt;(K g x) (f x)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;由于&lt;code class=&quot;inline&quot;&gt;(K g x) (f x)&lt;/code&gt;满足 &lt;code class=&quot;inline&quot;&gt;x z (y z)&lt;/code&gt;的形式，所以可简化为&lt;code class=&quot;inline&quot;&gt;S (K g) f x&lt;/code&gt;&lt;/li&gt;&lt;li&gt;现在compose变成了&lt;code class=&quot;inline&quot;&gt;\g -&amp;gt; \f -&amp;gt; \x -&amp;gt; S (K g) f x&lt;/code&gt;，那么其实可以直接消去x变为&lt;code class=&quot;inline&quot;&gt;\g -&amp;gt; \f -&amp;gt; S (K g) f&lt;/code&gt;&lt;/li&gt;&lt;li&gt;同理可消去f，变为&lt;code class=&quot;inline&quot;&gt;\g -&amp;gt; S (K g)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;转化&lt;code class=&quot;inline&quot;&gt;S (K g)&lt;/code&gt;为&lt;code class=&quot;inline&quot;&gt;(K S g) (K g)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;与步骤2同理，简化为&lt;code class=&quot;inline&quot;&gt;S (K S) K g&lt;/code&gt;&lt;/li&gt;&lt;li&gt;于是得到&lt;code class=&quot;inline&quot;&gt;compose = S (K S) K&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;所有的lambda表达式都可以用这种方式，转化为SKI组合子。&lt;/p&gt;&lt;p&gt;总结一下：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;对于任意&lt;code class=&quot;inline&quot;&gt;f = \x -&amp;gt; x&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;f = I&lt;/code&gt;&lt;/li&gt;&lt;li&gt;对于任意&lt;code class=&quot;inline&quot;&gt;f = \x -&amp;gt; A&lt;/code&gt;且A与x无关, &lt;code class=&quot;inline&quot;&gt;f = K A&lt;/code&gt;&lt;/li&gt;&lt;li&gt;对于任意&lt;code class=&quot;inline&quot;&gt;f = \x -&amp;gt; A B&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;f = S (\x -&amp;gt; A) (\x -&amp;gt; B)&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;由于所有lambda表达式都可以转换为SKI组合子演算，所以递归、算数计算、布尔逻辑和数据结构这些自然也不在话下了。&lt;/p&gt;&lt;h2&gt;转化为SK&lt;/h2&gt;&lt;p&gt;一个有趣的事实：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;I
=&amp;gt; \x -&amp;gt; x
=&amp;gt; \x -&amp;gt; K x _
=&amp;gt; \x -&amp;gt; K x (K x)
=&amp;gt; \x -&amp;gt; S K K x
=&amp;gt; S K K&lt;/code&gt;&lt;p&gt;这说明了其实I组合子可以用SKK来表示，所以SKI组合子演算可以转化为SK组合子演算。&lt;/p&gt;&lt;h2&gt;动手试试&lt;/h2&gt;&lt;p&gt;看上去是不是很厉害的样子，来自己动手试试这道&lt;a href=&quot;https://www.codewars.com/kata/5a02dccf32b8b988120000da&quot;&gt;codewars题目&lt;/a&gt;吧。&lt;/p&gt;</description>
<author>mirone</author>
<guid isPermaLink="false">2017-11-21-31269072</guid>
<pubDate>Tue, 21 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>point-free转换指南</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-15-31069901.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;point-free转换指南&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/31069901&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-12b177788ee2bc152e6ceab68fae0674_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;题图的PixivID为：&lt;i&gt;pixiv-ID: 55550732，画师为&lt;/i&gt;&lt;a href=&quot;https://www.pixiv.net/member.php?id=408459&quot;&gt;純生文屋&lt;/a&gt;&lt;/p&gt;&lt;p&gt;本文始发于&lt;a href=&quot;https://saul-mirone.github.io/2017/11/15/point-free-guide/&quot;&gt;我的博客&lt;/a&gt;，转载请注明作者。&lt;/p&gt;&lt;p&gt;本文几乎是对一个&lt;a href=&quot;https://stackoverflow.com/questions/29596285/point-free-problems-in-haskell/29596461#29596461&quot;&gt;StackOverflow回答&lt;/a&gt;的翻译，欢迎有能力的同学去点个赞。&lt;/p&gt;&lt;p&gt;point-free是一种编程风格，简单的说，就是省略函数的参数。它的定义和内容不在本文讨论的范畴之中。理论上讲任何函数都可以被转换为point-free风格，本文讨论的内容就是如何将一个普通函数转换为point-free风格。&lt;/p&gt;&lt;p&gt;为了更简便的说明，本文代码使用Haskell编写，但是&lt;b&gt;读者就算不会Haskell也可以正常阅读&lt;/b&gt;。但是任何其它语言都可以通过几个工具函数来达到相同的效果。&lt;/p&gt;&lt;h2&gt;一个前提、五个函数&lt;/h2&gt;&lt;p&gt;一个函数要转换成point-free风格的函数，有一个前提和五个函数&lt;/p&gt;&lt;p&gt;前提：函数必须是curry的，也就是对于任何的&lt;/p&gt;&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;f x y = Z&lt;/code&gt; 有 &lt;code class=&quot;inline&quot;&gt;f = \x -&amp;gt; \y -&amp;gt; Z&lt;/code&gt;&lt;/p&gt;&lt;p&gt;对于函数式语言，这几乎是标配，而对于其它范式的语言，可能要借助一些工具库(例如js中的lodash)或者手写转换函数了。&lt;/p&gt;&lt;p&gt;还有五个帮助函数也是必要的，没有它们，转换之路会无比艰难：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;id :: a -&amp;gt; a
id x = x

const :: a -&amp;gt; (b -&amp;gt; a)
const x = \_ -&amp;gt; x

(.) :: (b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; c)
f . g = \x -&amp;gt; f (g x)
 
flip :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (b -&amp;gt; a -&amp;gt; c)
flip f = \y x -&amp;gt; f x y

(&amp;lt;*&amp;gt;) :: (a -&amp;gt; b -&amp;gt; c) -&amp;gt; (a -&amp;gt; b) -&amp;gt; (a -&amp;gt; c)
(&amp;lt;*&amp;gt;) f g x = f x (g x)&lt;/code&gt;&lt;h2&gt;转换分析&lt;/h2&gt;&lt;p&gt;函数大体都可以分为以下情况：&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; x&lt;/code&gt;：这种最简单，只要写为&lt;code class=&quot;inline&quot;&gt;id x&lt;/code&gt;就好了&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; A&lt;/code&gt;且A与x无关：则可以写为&lt;code class=&quot;inline&quot;&gt;const A&lt;/code&gt; &lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; A x&lt;/code&gt; 且A与x无关：则可以写为A&lt;/li&gt;&lt;li&gt;&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; A B&lt;/code&gt;：&lt;/li&gt;&lt;ol&gt;&lt;li&gt;x与A和B都有关，则可以写为&lt;code class=&quot;inline&quot;&gt;(\x -&amp;gt; A) &amp;lt;*&amp;gt; (\x -&amp;gt; B)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;x只与A有关，则写为 &lt;code class=&quot;inline&quot;&gt;flip (\x -&amp;gt; A) B&lt;/code&gt;&lt;/li&gt;&lt;li&gt;x只与B有关，则写为&lt;code class=&quot;inline&quot;&gt;A . (\x -&amp;gt; B)&lt;/code&gt;&lt;/li&gt;&lt;li&gt;x与AB都无关，emmmm…这函数你都能写出来，你是智障吗。&lt;/li&gt;&lt;/ol&gt;&lt;li&gt;当函数体内出现条件表达式：这种情况可以用一些特殊函数来帮忙处理，例如如果出现&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; if x == 1 then 0 else -1&lt;/code&gt;这种函数，我们可以用一个帮助函数例如&lt;code class=&quot;inline&quot;&gt;bool f t b = if b then t else f&lt;/code&gt;替换为&lt;code class=&quot;inline&quot;&gt;\x -&amp;gt; bool (-1) 0 (x == 1)&lt;/code&gt; &lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;举个栗子&lt;/h2&gt;&lt;p&gt;对于原函数：&lt;code class=&quot;inline&quot;&gt;f x y z = foo z (bar x y)&lt;/code&gt; ，要把它转化为point-free风格，如果刚接触point-free的人肯定一脸懵逼，那么我们就来看看按照我们的指引来进行转化的过程吧：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;f x y z = foo z (bar x y)
f x y = \z -&amp;gt; foo z (bar x y)
f x y = \z -&amp;gt; (foo z) (bar x y) --这就是curry函数的好处
f x y = flip (\z -&amp;gt; foo z) (bar x y) --使用规则4.2
f x y = flip foo (bar x y) --使用规则3
f x = \y -&amp;gt; flip foo (bar x y)
f x = \y -&amp;gt; (flip foo) (bar x y)
f x = flip foo . (\y -&amp;gt; bar x y) --使用规则4.3
f x = flip foo . (bar x)
f = \x -&amp;gt; flip foo . (bar x)
f = \x -&amp;gt; (.) (flip foo) (bar x) --在Haskell中，a+b == (+) a b
f = \x -&amp;gt; ((.) (flip foo)) (bar x) --别忘了curry
f = ((.) (flip foo)) . (\x -&amp;gt; bar x) --使用规则4.3
f = ((.) (flip foo)) . bar
f = (.) (flip foo) . bar&lt;/code&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;当然了，point-free并不是适合所有场景，如果point-free完可读性反而变差了，你可能就要思考是否有这个必要了。&lt;/p&gt;</description>
<author>mirone</author>
<guid isPermaLink="false">2017-11-15-31069901</guid>
<pubDate>Wed, 15 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Folding infinite list through F-algebra</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-08-30833827.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Folding infinite list through F-algebra&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30833827&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-6765c36a65c96091e2d1fb5522da91a0_r.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;嘛，在知乎写的第一篇文章，参考了很多现有文章的格式及表达思路www。主要目的还是讨论一些F-algebra的概念和锻炼自己的表达能力。起因是最近刷到codewars上一道题：&lt;a href=&quot;https://www.codewars.com/kata/folding-through-a-fixed-point&quot;&gt;Folding through a fixed point&lt;/a&gt;，其中涉及到一些以前接触过的F-algebra的概念，但题中并没有详细解释清楚F-algebra，评论区存在做完题但没明白到底发生了啥的评论。我也是在codewars上写了一个简单的解释，这里在不剧透题目的情况下搬运一些自己写的东西，并给出一个实际的例子：constructing, folding infinite list&lt;/p&gt;&lt;p&gt;注意：本文中存在一些伪代码，主要是类型签名用来说明类型。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;对范畴论的一个大概的认识会有很大帮助&lt;/li&gt;&lt;li&gt;Haskell的基础语法及Functor typeclass的使用&lt;/li&gt;&lt;li&gt;对交换图表的相关知识&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;什么是Algebra&lt;/h2&gt;&lt;p&gt;简单来说，Algebra可以理解为能以某种方式组织表达式，以及能以某种方式对表达式进行规约的结构。这里我们所关心的表达式是其中的一种：recursively defined的表达式。比如，在Haskell中我们可以通过如下语法来组织一个列表：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data List a = Nil | Cons a (List a)&lt;/code&gt;&lt;p&gt;接着，我们可以通过value constructor构造我们需要的列表，通过pattern matching以我们想要的方式对列表进行规约。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;list :: List String
list = Cons &quot;9&quot; $ Cons &quot;9&quot; $ Cons &quot;6&quot; $ Cons &quot;1&quot; $ Nil

stringify :: List String -&amp;gt; String
stringify Nil = &quot;&quot;
stringify (Cons x xs) = x ++ stringify xs

result :: String
result = stringify list&lt;/code&gt;&lt;h2&gt;非递归的定义我们的List&lt;/h2&gt;&lt;p&gt;我们可以将List中的递归定义提出来，增加一个Type constructor的参数：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data ListF a l = Nil | Cons a l&lt;/code&gt;&lt;p&gt;哪如何通过这个type来重新定义刚才的List呢？我们通过fixed point来实现，这里我们所选用的fixed point的定义least fixed point和greatest fixed point相等，且能直观的表现我们的意图：将非递归的type变成递归的。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;newtype Fix f = In (f (Fix f))&lt;/code&gt;&lt;p&gt;这样，我们可以重新定义我们的List：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type List a = Fix (ListF a)

list :: List String
list = In $ Cons &quot;9&quot; $ In $ Cons &quot;9&quot; $ In $ Cons &quot;6&quot; $ In $ Cons &quot;1&quot; $ In Nil&lt;/code&gt;&lt;h2&gt;一个F-Algebra的定义是什么&lt;/h2&gt;&lt;p&gt;不同代数结构会存在共有的特性，在猫论中，F-Algebra可以用来generalize algebraic structure，F-Algebra可以用来表示各种数据结构。具体的来说C是一个category，F: C → C是一个endofunctor，X是C中一个object，alg是C中F X → X的一个态射，那么F-Algebra就是一个(X, alg)的二元组。&lt;/p&gt;&lt;p&gt;对应到Haskell中则是在Hask范畴，f是一个Functor typeclass的instance，x是一个type，alg的类型则是：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;alg :: f x -&amp;gt; x&lt;/code&gt;&lt;h2&gt;一个F-Coalgebra的定义是什么&lt;/h2&gt;&lt;p&gt;既然名字里带co了，那么很容易想到是F-Algebra的dual。具体来说C是一个category，F: C → C是一个endofunctor，X是C中一个object，coalg是C中X → F X的一个态射，那么F-Coalgebra就是一个(X, coalg)的二元组。&lt;/p&gt;&lt;p&gt;对应到Haskell中则是在Hask范畴，f是一个Functor typeclass的instance，x是一个type，coalg的类型则是：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;coalg :: x -&amp;gt; f x&lt;/code&gt;&lt;h2&gt;理解Algebra间的态射&lt;/h2&gt;&lt;p&gt;根据不同的x的type，我们可以写出不同的algebra，猫论是一个研究不同东西间相同结构的理论，这里，我们要找出相同Functor间不同algebra的关系。&lt;/p&gt;&lt;p&gt;如果我们有以下两个type A和B，以及其algebra：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data A = A
newtype B = B A

mkA :: B -&amp;gt; A
mkA (B a) = a
mkB :: A -&amp;gt; B
mkB a = (B a)

algA :: F A -&amp;gt; A
algB :: F B -&amp;gt; B

coalgA :: A -&amp;gt; F A
coalgB :: B -&amp;gt; F B&lt;/code&gt;&lt;p&gt;那么我们有如下所示的态射关系，我们以Commutative Diagram表示：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\begin{equation} \tag{F-Algebra} \begin{CD} {F A} @&amp;gt;{fmap \ mkB}&amp;gt;&amp;gt; {F B} \\ @V{algA}VV @VV{algB}V \\ {A} @&amp;gt;{mkB}&amp;gt;&amp;gt; {B} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;equation&gt;\begin{equation} \tag{F-Coalgebra} \begin{CD} {F A} @&amp;lt;{fmap \ mkA}&amp;lt;&amp;lt; {F B} \\ @A{coalgA}AA @AA{coalgB}A \\ {A} @&amp;lt;{mkA}&amp;lt;&amp;lt; {B} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;/p&gt;&lt;h2&gt;Initial F-Algebra和Terminal F-Coalgebra&lt;/h2&gt;&lt;p&gt;Initial F-Algebra和Terminal F-Coalgebra是一类具有特殊性质的F-Algebra和F-Coalgebra。对于一个endofunctor F: C → C来说，存在从其Initial F-Algebra到其他所有F-Algebra的唯一态射，存在从其他所有F-Coalgebra到其Terminal F-Coalgebra的唯一态射。我们将其分别称之为&lt;i&gt;catamorphism和&lt;/i&gt;anamorphism。&lt;/p&gt;&lt;p&gt;这里，我们的不动点Fix的In :: f (Fix f) -&amp;gt; Fix f就是Initial F-Algebra（和Terminal F-Coalgebra），根据Lambek’s Lemma我们可以知道存在unIn :: Fix f -&amp;gt; f (Fix f)，我们也很容易将其写出来，存在非常简单的isomorphism：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;In :: f (Fix f) -&amp;gt; Fix f
unIn :: Fix f -&amp;gt; f (Fix f)

newtype Fix f = In (f (Fix f))
unIn (In x) = x&lt;/code&gt;&lt;p&gt;那么如果我们构造出g和cog：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;g :: Fix f -&amp;gt; x
cog :: x -&amp;gt; Fix f&lt;/code&gt;&lt;p&gt;我们就可以很方便的将一个用Fix表示的代数表达式规约成我们想要的形式（或者反过来），我们用Commutative Diagram表示出来：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\begin{equation} \tag{Initial F-Algebra} \begin{CD} {F (Fix \ F)} @&amp;gt;{fmap \ g}&amp;gt;&amp;gt; {F A} \\ @V{In}VV @VV{algA}V \\ {Fix \ F} @&amp;gt;{g}&amp;gt;&amp;gt; {A} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;equation&gt;\begin{equation} \tag{Terminal F-Coalgebra} \begin{CD} {F (Fix \ F)} @&amp;lt;{fmap \ cog}&amp;lt;&amp;lt; {F A} \\ @A{unIn}AA @AA{coalgA}A \\ {Fix \ F} @&amp;lt;{cog}&amp;lt;&amp;lt; {A} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;/p&gt;&lt;h2&gt;构造&lt;i&gt;catamorphism与&lt;/i&gt;anamorphism&lt;/h2&gt;&lt;p&gt;根据上面的Commutative Diagram，我们可以轻易发现，简单的将In和unIn交换，我们就能轻易从特定F-Algebra、F-Coalgebra构造出g和cog：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\begin{equation} \tag{Initial F-Algebra} \begin{CD} {F (Fix \ F)} @&amp;gt;{fmap \ g}&amp;gt;&amp;gt; {F A} \\ @A{unIn}AA @VV{algA}V \\ {Fix \ F} @&amp;gt;{g}&amp;gt;&amp;gt; {A} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;equation&gt;\begin{equation} \tag{Terminal F-Coalgebra} \begin{CD} {F (Fix \ F)} @&amp;lt;{fmap \ cog}&amp;lt;&amp;lt; {F A} \\ @V{In}VV @AA{coalgA}A \\ {Fix \ F} @&amp;lt;{cog}&amp;lt;&amp;lt; {A} \\ \end{CD} \end{equation}&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;我们将其用Haskell表示出来：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;cata :: Functor f =&amp;gt; (f x -&amp;gt; x) -&amp;gt; (Fix f -&amp;gt; x)
cata alg = alg . fmap (cata alg) . unIn

ana :: Functor f =&amp;gt; (x -&amp;gt; f x) -&amp;gt; (x -&amp;gt; Fix f)
ana coalg = In . fmap (ana coalg) . coalg&lt;/code&gt;&lt;h2&gt;Folding infinite list through F-algebra&lt;/h2&gt;&lt;p&gt;我们可以用F-Coalgebra来构造Infinite data structures，并使用F-algebra对其进行fold。例如我们的List：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data ListF a l = Nil | Cons a l&lt;/code&gt;&lt;p&gt;很容易将其Functor instance写出来：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;instance Functor (ListF a) where
    fmap f Nil = Nil
    fmap f (Cons a l) = Cons a (f l)&lt;/code&gt;&lt;p&gt;这里我们定义这样一个Coalgebra：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;coalg :: Int -&amp;gt; ListF Int Int
coalg x = Cons x (x + 1)&lt;/code&gt;&lt;p&gt;我们通过这个Coalgebra和Anamorphism定义一个Infinite的自增List：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;list :: Fix (ListF Int)
list = ana coalg 256&lt;/code&gt;&lt;p&gt;接着，我们定义一个可以从Infinite的List中规约出值的Algebra：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;alg :: ListF Int Int -&amp;gt; Int
alg Nil = 0
alg (Cons a b) = if a &amp;lt; 1024 then a + b else a&lt;/code&gt;&lt;p&gt;接着我们使用C&lt;i&gt;atamorphism和这个&lt;/i&gt;Algebra规约出我们表达式的值：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;result :: Int
result = cata alg list&lt;/code&gt;&lt;p&gt;这里跟foldr很相似，只要我们规约Infinite的List时某次没有使用Cons里b的的值，那么规约就能终止。&lt;/p&gt;&lt;h2&gt;结束&lt;/h2&gt;&lt;p&gt;很久没写过这种类型的文章了，难免出现码字错误或者表述不清。有什么问题评论区轻喷/w\&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>不可构造的雨轩菌</author>
<guid isPermaLink="false">2017-11-08-30833827</guid>
<pubDate>Wed, 08 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Agda 中的证明，从一点五到二</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-06-30790920.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Agda 中的证明，从一点五到二&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30790920&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic4.zhimg.com/v2-043f810573d217996a346e86be90677f_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最近突然忙了起来。这篇文章只是填一下上篇文章的坑。原文链接 &lt;a href=&quot;http://ice1000.org/2017/11/06/ProofInAgda3/&quot;&gt;Agda 中的证明，从一点五到二&lt;/a&gt;&lt;/p&gt;&lt;p&gt;上一篇说了很多只有一种情况的证明，这一篇说个有两种情况的。 到目前为止，按理说所有的字符都还能正常显示。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://ice1000.org/2017/11/02/ProofInAgda2/&quot;&gt;上一篇文章&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以及，由于 Agda 语言的特殊性，本文将继续使用 LaTeX 和代码块来共同展示代码。 代码块唯一的作用在于便于复制，主要的呈现途径为 LaTeX 。&lt;/p&gt;&lt;h2&gt;上一篇的习题&lt;/h2&gt;&lt;p&gt;上一篇文章我留下了一个没提供证明的命题，现在给出完整答案：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; {\land}{-}{\assoc}_0 : \forall \{P\ Q\ R\} \rightarrow ((P \land Q) \land R) \rightarrow (P \land (Q \land R)) \\ &amp;amp; {\land}{-}{\assoc}_0 \ ({\land}{-}{\intro}\ ({\land}{-}{\intro}\ p\ q)\ r) = {\land}{-}{\intro}\ p\ ({\land}{-}{\intro}\ q\ r) \\ &amp;amp; \\ &amp;amp; {\land}{-}{\assoc}_1 : \forall \{P\ Q\ R\} \rightarrow (P \land (Q \land R)) \rightarrow ((P \land Q) \land R) \\ &amp;amp; {\land}{-}{\assoc}_1 \ ({\land}{-}{\intro}\ p\ ({\land}{-}{\intro}\ q\ r)) = {\land}{-}{\intro}\ ({\land}{-}{\intro}\ p\ q)\ r \\ &amp;amp; \\ &amp;amp; {\land}{-}{\assoc} : \forall \{P\ Q\ R\} \rightarrow (P \land (Q \land R)) \Leftrightarrow ((P \land Q) \land R) \\ &amp;amp; {\land}{-}{\assoc} ={\land}{-}{\intro} \ {\land}{-}{\assoc}_1 \ {\land}{-}{\assoc}_0 \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-assoc₀ : ∀ {P Q R} → ((P ∧ Q) ∧ R) → (P ∧ (Q ∧ R))
∧-assoc₀ (∧-intro (∧-intro p q) r) = ∧-intro p (∧-intro q r)

∧-assoc₁ : ∀ {P Q R} → (P ∧ (Q ∧ R)) → ((P ∧ Q) ∧ R)
∧-assoc₁ (∧-intro p (∧-intro q r)) = ∧-intro (∧-intro p q) r

∧-assoc : ∀ {P Q R} → (P ∧ (Q ∧ R)) ⇔ ((P ∧ Q) ∧ R)
∧-assoc = ∧-intro ∧-assoc₁ ∧-assoc₀ &lt;/code&gt;&lt;p&gt;确实没什么好说的，所以才能说是即得易见平凡，仿照上例显然。&lt;/p&gt;&lt;h2&gt;或相关的证明&lt;/h2&gt;&lt;p&gt;上一篇我有个东西没讲完，就是 “或” 。 它和 “与” 相对，它只要求两个命题中的一个成立。&lt;/p&gt;&lt;p&gt;因此，它对应着两个不同的情况：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;p \rightarrow (p \lor q) \\ q \rightarrow (p \lor q)&lt;/equation&gt; &lt;/p&gt;&lt;h2&gt;定义 GADT&lt;/h2&gt;&lt;p&gt;把这个关系写成 GADT ，就是这样：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; \data\ \_{\lor}\_\ (P\ Q : \Set) : \Set \where \\ &amp;amp; \ \ {\lor}{-}{\intro}_0 : P \rightarrow P \lor Q \\ &amp;amp; \ \ {\lor}{-}{\intro}_1 : Q \rightarrow P \lor Q \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;data _∨_ (P Q : Set) : Set where
  ∨-intro₀ : P → P ∨ Q
  ∨-intro₁ : Q → P ∨ Q &lt;/code&gt;&lt;p&gt;这里我们遇到了一种和之前不一样的情况： 我们的 GADT 有了两种 instance 。 这意味着我们需要在证明的时候考虑两种不同的情况，分别针对这两种 instance 。&lt;/p&gt;&lt;h2&gt;证明一&lt;/h2&gt;&lt;p&gt;比如，我们可以证明一下这个命题：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;(p \rightarrow r) \land (q \rightarrow r) \land (p \lor q) \rightarrow r &lt;/equation&gt; &lt;/p&gt;&lt;p&gt;它的逻辑很简单，在 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 都能推出 &lt;code class=&quot;inline&quot;&gt;r&lt;/code&gt; 的时候， &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 只需要成立一个， &lt;code class=&quot;inline&quot;&gt;r&lt;/code&gt; 就成立。 这个命题写成 Agda 的类型，就是：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\lor}{-}{\elim} : \forall \{P\ Q\} \{R : \Set\} \rightarrow (P \rightarrow R) \rightarrow (Q \rightarrow R) \rightarrow (P \lor Q) \rightarrow R&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∨-elim : ∀ {P Q} {R : Set} → (P → R) → (Q → R) → (P ∨ Q) → R &lt;/code&gt;&lt;p&gt;我们在证明中，需要同时对 &lt;equation&gt;(P \lor Q)&lt;/equation&gt; 的两种可能的情况进行处理 （因为这个类型的东西既可以是通过 &lt;code class=&quot;inline&quot;&gt;P&lt;/code&gt; 构造的，也可以是通过 &lt;code class=&quot;inline&quot;&gt;Q&lt;/code&gt; 构造的）， 不然 Agda 的 exhaustiveness check 会报错的 （这也是为什么 &lt;code class=&quot;inline&quot;&gt;postulate&lt;/code&gt; 不被推荐使用）。&lt;/p&gt;&lt;p&gt;首先考虑 &lt;code class=&quot;inline&quot;&gt;P&lt;/code&gt; 成立的情况，我们有：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\lor}{-}{\elim}\pr \_ \ ({\lor}{-}{\elim}_0 \ p) = \pr p &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∨-elim pr _ (∨-intro₀ p) = pr p &lt;/code&gt;&lt;p&gt;然后考虑 &lt;code class=&quot;inline&quot;&gt;Q&lt;/code&gt; 成立的情况，我们有：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\lor}{-}{\elim}\ \_ \qr \ ({\lor}{-}{\elim}_1 \ q) = \qr q &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∨-elim _ qr (∨-intro₁ q) = qr q &lt;/code&gt;&lt;p&gt;放在一起，就是：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; {\lor}{-}{\elim} : \forall \{P\ Q\} \{R : \Set\} \rightarrow (P \rightarrow R) \rightarrow (Q \rightarrow R) \rightarrow (P \lor Q) \rightarrow R \\ &amp;amp; {\lor}{-}{\elim}\pr \_ \ ({\lor}{-}{\elim}_0 \ p) = \pr p \\ &amp;amp; {\lor}{-}{\elim}\ \_ \qr \ ({\lor}{-}{\elim}_1 \ q) = \qr q \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∨-elim : ∀ {P Q} {R : Set} → (P → R) → (Q → R) → (P ∨ Q) → R
∨-elim pr _ (∨-intro₀ p) = pr p
∨-elim _ qr (∨-intro₁ q) = qr q &lt;/code&gt;&lt;p&gt;这样，就 check 了。 十分简单。&lt;/p&gt;&lt;h2&gt;证明二&lt;/h2&gt;&lt;p&gt;和 &lt;equation&gt;\land&lt;/equation&gt; 一样， &lt;equation&gt;\lor&lt;/equation&gt; 也有交换律：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{pr}{pr} \DeclareMathOperator{qr}{qr} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; {\lor}{-}{\comm}&#39; : \forall \{P\ Q\} \rightarrow (P \lor Q) \rightarrow (Q \lor R) \\ &amp;amp; {\lor}{-}{\comm}&#39; \ ({\lor}{-}{\intro}_0 \ p) = {\lor}{-}{\intro}_1 \ p \\ &amp;amp; {\lor}{-}{\comm}&#39; \ ({\lor}{-}{\intro}_1 \ q) = {\lor}{-}{\intro}_0 \ q \\ \\ &amp;amp; {\lor}{-}{\comm} : \forall \{P\ Q\} \rightarrow (P \lor Q) \Leftrightarrow (Q \lor R) \\ &amp;amp; {\lor}{-}{\comm} = {\land}{-}{\intro} \ {\lor}{-}{\comm}&#39; \ {\lor}{-}{\comm}&#39; \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∨-comm′ : ∀ {P Q} → (P ∨ Q) → (Q ∨ P)
∨-comm′ (∨-intro₀ p) = ∨-intro₁ p
∨-comm′ (∨-intro₁ q) = ∨-intro₀ q

∨-comm : ∀ {P Q} → (P ∨ Q) ⇔ (Q ∨ P)
∨-comm = ∧-intro ∨-comm′ ∨-comm′ &lt;/code&gt;&lt;h2&gt;结束&lt;/h2&gt;&lt;p&gt;这么快就没了？&lt;/p&gt;&lt;p&gt;其实只是填一下上一篇留下的坑。&lt;/p&gt;&lt;p&gt;是的，我说完了。&lt;/p&gt;</description>
<author>大笨蛋千里冰封</author>
<guid isPermaLink="false">2017-11-06-30790920</guid>
<pubDate>Mon, 06 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Agda 中的证明，从一到一点五</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-05-30749528.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Agda 中的证明，从一到一点五&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30749528&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-367c5bb1a32bb3ddc98041b0b5435fa1_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;终于写完了，还请各位聚聚多多包涵哈。原文在这里&lt;a href=&quot;http://ice1000.org/2017/11/02/ProofInAgda2/&quot;&gt;Agda 中的证明，从一到一点五&lt;/a&gt;&lt;/p&gt;&lt;p&gt;上一篇我们说到了一个只有一步的证明，这一篇我们来看一个稍微复杂点的，组合命题的例子。 到目前为止，按理说所有的字符都还能正常显示。&lt;/p&gt;&lt;p&gt;为什么是一点五？看完你就知道啦。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://127.0.0.1:4000/2017/11/01/ProofInAgda/&quot;&gt;上一篇文章&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以及，由于 Agda 语言的特殊性，本文将继续使用 LaTeX 和代码块来共同展示代码。 代码块唯一的作用在于便于复制，主要的呈现途径为 LaTeX 。 （其实是因为我的手机显示不出来很多字符，我又要自己看自己写的东西）&lt;/p&gt;&lt;h2&gt;关于复合命题&lt;/h2&gt;&lt;p&gt;这里修正一个概念。&lt;/p&gt;&lt;p&gt;前文说的 &quot;条件&quot; ，即前文一直强调的 &quot;类型则命题&quot; 中命题的最基本组成元素（好像 Wikipedia 上也称之为 “命题变元” ，反正我对这个名称不负责，就是用来表示命题 &lt;equation&gt;p \rightarrow q&lt;/equation&gt; 中的 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 的东西）其实也是一种命题，而我之前称为命题的东西则是 &quot;复合命题&quot; 。&lt;/p&gt;&lt;p&gt;下文将使用 &quot;命题&quot; 统称他们。&lt;/p&gt;&lt;h2&gt;介绍符号&lt;/h2&gt;&lt;p&gt;都是初中数学里面的，并且是只需要小学数学就可以看懂的符号。&lt;/p&gt;&lt;h2&gt;与和或&lt;/h2&gt;&lt;p&gt;我们知道，门电路里面都有与门和或门，对应逻辑上的与和或。 与的符号是：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\land&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;，或的符号是：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\lor&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;。 比如， &lt;equation&gt;p \land q \rightarrow r&lt;/equation&gt; 表示 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 都必须成立， &lt;code class=&quot;inline&quot;&gt;r&lt;/code&gt; 才成立。 而 &lt;equation&gt;p \lor q \rightarrow r&lt;/equation&gt; 表示 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 中任意成立一个， &lt;code class=&quot;inline&quot;&gt;r&lt;/code&gt; 就成立。&lt;/p&gt;&lt;h2&gt;充要条件&lt;/h2&gt;&lt;p&gt;我们知道，如果两个条件 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 能使 &lt;equation&gt;p \rightarrow q&lt;/equation&gt; 和 &lt;equation&gt;q \rightarrow p&lt;/equation&gt; 同时成立，我们称他们互为充要条件，使用：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\Leftrightarrow&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;表示，比如 &lt;equation&gt;p \Leftrightarrow q&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;我们将在接下来的代码里面使用这些符号。&lt;/p&gt;&lt;h2&gt;定义 GADT&lt;/h2&gt;&lt;p&gt;首先定义 &lt;equation&gt;\land&lt;/equation&gt; 对应的 GADT ：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; \data\ \_{\land}\_\ (P\ Q : \Set) : \Set \where \\ &amp;amp; \ \ {\land}{-}{\intro} : P \rightarrow Q \rightarrow (P \land Q) \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;data _∧_ (P Q : Set) : Set where
  ∧-intro : P → Q → (P ∧ Q) &lt;/code&gt;&lt;p&gt;这个命题是两个其他命题的组合，它拿到两个命题变成一个新命题。这也体现在 Agda 代码中， &lt;equation&gt;\_{\land}\_&lt;/equation&gt; 这个类型拿到两个 &lt;code class=&quot;inline&quot;&gt;Set&lt;/code&gt; 作为 &lt;a href=&quot;http://people.inf.elte.hu/divip/AgdaTutorial/Sets.Parametric.html#1&quot;&gt;类型 _∧_ 的参数&lt;/a&gt;， 返回一个新类型。 对应的类型构造器我们称之为 &lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\intro} &lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;有了这个类型，我们首先可以做一些很简单的证明。&lt;/p&gt;&lt;h2&gt;例〇：充要条件&lt;/h2&gt;&lt;p&gt;比如，根据充要条件 &lt;equation&gt;(p \rightarrow q) \land (q \rightarrow p)&lt;/equation&gt; 的定义，我们可以把它表达成一个函数：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; \_{\Leftrightarrow}\_ : (P\ Q : \Set) \rightarrow \Set \\ &amp;amp; p \Leftrightarrow q = (p \rightarrow q) \land (q \rightarrow p) \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_⇔_ : (P Q : Set) → Set
p ⇔ q = (p → q) ∧ (q → p) &lt;/code&gt;&lt;p&gt;这里我们在函数体（证明）里面使用了 &lt;equation&gt;\rightarrow&lt;/equation&gt; ，这样的话 &lt;equation&gt; (p \rightarrow q) &lt;/equation&gt; 就是一个类型为 &lt;equation&gt;\DeclareMathOperator{Set}{Set} \Set _1&lt;/equation&gt; 的东西。 因此，这实际上是一个 “命题组合” ，有点 “高阶函数” 感觉（顺带一提，这个名词也是我为了便于理解自己编的，不知道有没有其他人在用 （顺带一提，类型的阶（顺带一提， Agda 中表示类型的阶的类型正好是 &lt;code class=&quot;inline&quot;&gt;Level&lt;/code&gt; ，中文意思就有阶的意思， 因此这个说法可以说是很通用了） 在 dependent type 里面已经变得很模糊了，因此这个 “高阶” 的比喻是不太恰当的，这里就拿 Haskell 之类的简单语言的概念将就一下））。&lt;/p&gt;&lt;p&gt;再根据前文已经讲过的：&lt;/p&gt;&lt;blockquote&gt;只要有 &lt;equation&gt;p \rightarrow q&lt;/equation&gt; 这个函数成立，那么就证明了 “ &lt;equation&gt;p \rightarrow q&lt;/equation&gt; “ 这个命题&lt;/blockquote&gt;&lt;p&gt;这个函数的作用便变得很清晰了。 不理解没关系，下面会用到这个东西，然后你或许能从它的应用看懂它的意义。&lt;/p&gt;&lt;p&gt;另外，看到没有？函数体（证明）（下文不再进行这样的强调，感觉很辣鸡） 和定义 &lt;equation&gt;(p \rightarrow q) \land (q \rightarrow p) &lt;/equation&gt; 写起来都是完全一样的。 这里可以体现一些 Agda 语言的优势，就是因为 Unicode 语法的存在，它可以把代码写的很接近数学语言。&lt;/p&gt;&lt;p&gt;不过这并不代表 Agda 就只能用于学术，毕竟类型安全的社区和人气火爆的社区结合起来才是最好的， Idris 都用强大的 ffi 和官方强推的 &lt;code class=&quot;inline&quot;&gt;Control.ST&lt;/code&gt; 了，为什么 Agda 不能写成 imperative language 呢。&lt;/p&gt;&lt;h2&gt;例一：定义&lt;/h2&gt;&lt;p&gt;比如，在 &lt;equation&gt;p \land q&lt;/equation&gt; 成立的时候， &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; 和 &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 分别成立（就是 &lt;equation&gt;\land&lt;/equation&gt; 的定义啦，很简单的）。 用数学语言表达的话，就是（几乎就是废话）：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;p \land q \rightarrow p \\ p \land q \rightarrow q&lt;/equation&gt; &lt;/p&gt;&lt;p&gt;写成代码的话，就是（这里关于这个证明讲的比较略，是因为下文有个更详细的讲解， 已经完全覆盖了这个证明所需要用到的知识，这个证明放在前面只是因为它本身很简单，用 Haskell 知识即可理解， 如果读者看不懂这个证明可以先看后面的，不过我觉得应该都看得懂，因为它太简单了）：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} \begin{align*} &amp;amp; \proof _3 : \forall \{P\ Q\} \rightarrow (P \land Q) \rightarrow P \\ &amp;amp; \proof _3\ ({\land}{-}{\intro}\ p\ q) = p \\ \\ &amp;amp; \proof _4 : \forall \{P\ Q\} \rightarrow (P \land Q) \rightarrow Q \\ &amp;amp; \proof _4\ ({\land}{-}{\intro}\ p\ q) = q \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;proof₃ : ∀ {P Q} → (P ∧ Q) → P
proof₃ (∧-intro p q) = p

proof₄ : ∀ {P Q} → (P ∧ Q) → Q
proof₄ (∧-intro p q) = q &lt;/code&gt;&lt;h2&gt;例二(详)：交换律&lt;/h2&gt;&lt;p&gt;然后还有一个很简单的例子——交换律（ Commutative Law ）。 用数学语言表达的话，就是（几乎也是废话）：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;(P \land Q) \Leftrightarrow (Q \land P) &lt;/equation&gt; &lt;/p&gt;&lt;p&gt;这个命题写成 Agda 代码，就是这样的类型（我们称之为  &lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm}&lt;/equation&gt; ）：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm} : \forall \{P\ Q\} \rightarrow (P \land Q) \Leftrightarrow (Q \land P) &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-comm : ∀ {P Q} → (P ∧ Q) ⇔ (Q ∧ P) &lt;/code&gt;&lt;p&gt;这里我们就已经使用到之前的定义—— &lt;equation&gt;\Leftrightarrow&lt;/equation&gt; 啦。&lt;/p&gt;&lt;p&gt;如何证明它呢？&lt;/p&gt;&lt;p&gt;首先，我们的证明需要返回一个由 &lt;equation&gt;\Leftrightarrow&lt;/equation&gt; 组合的两个类型（命题）。 由于这个组合类型是一个由 &lt;equation&gt;\land&lt;/equation&gt; 组合而成的两个类型，我们可以先把类型构造器写上，然后两个参数留白：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm} = {\land}{-}{\intro}\ ?\ ? &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;∧-comm = ∧-intro ? ?
&lt;/code&gt;&lt;p&gt;我们发现，在 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 两个变量可以互相交换的情况下， 这两个参数的类型（复合命题）都是 &lt;equation&gt; (p \land q) \rightarrow (q \land p)&lt;/equation&gt; 。&lt;/p&gt;&lt;p&gt;因此，为了代码复用，我们不妨把这两部分提取出来，作为一个单独的命题去证明它。 这个命题写成 Agda 代码，就是：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm}&#39; : \forall \{P\ Q\} \rightarrow (P \land Q) \rightarrow (Q \land P) &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-comm′ : ∀ {P Q} → (P ∧ Q) → (Q ∧ P) &lt;/code&gt;&lt;p&gt;它的第一个显式参数（隐式参数就自动传递了，我们不用管）是 &lt;equation&gt;(P \land Q)&lt;/equation&gt; ，我们可以使用模式匹配将它拆开：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm}&#39;\ ({\land}{-}{\intro}\ p\ q) =\ ? &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-comm′ (∧-intro p q) = ? &lt;/code&gt;&lt;p&gt;然后我们把 &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;q&lt;/code&gt; 换个顺序，重新使用类型构造器把它们组合起来：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} {\land}{-}{\comm}&#39;\ ({\land}{-}{\intro}\ p\ q) = ({\land}{-}{\intro}\ q\ p) &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-comm′ (∧-intro p q) = (∧-intro q p) &lt;/code&gt;&lt;p&gt;然后再把这个命题填入刚才的 ∧−comm∧−comm 中：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} \DeclareMathOperator{elim}{elim} {\land}{-}{\comm} = {\land}{-}{\intro}\ {\land}{-}{\comm}&#39;\ {\land}{-}{\comm}&#39; &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-comm = ∧-intro ∧-comm′ ∧-comm′ &lt;/code&gt;&lt;p&gt;然后我们就可以喊 Q.E.D. 啦。&lt;/p&gt;&lt;h2&gt;例三：结合律&lt;/h2&gt;&lt;p&gt;这个结合律（ Associative Law ）的例子其实已经不是例子了（因为我不想详细讲 （因为思路和交换律差不多）），我就只给出类型签名就可以了。&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{where}{where} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{intro}{intro} \DeclareMathOperator{comm}{comm} \DeclareMathOperator{assoc}{assoc} {\land}{-}{\assoc} : \forall \{P\ Q\ R\} \rightarrow (P \land (Q \land R)) \Leftrightarrow ((P \land Q) \land R) &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;∧-assoc : ∀ {P Q R} → (P ∧ (Q ∧ R)) ⇔ ((P ∧ Q) ∧ R) &lt;/code&gt;&lt;p&gt;为什么我只给类型签名呢？因为这个证明啊，&lt;/p&gt;&lt;blockquote&gt;即得易见平凡，仿照上例显然。留作习题答案略，读者自证不难。&lt;/blockquote&gt;&lt;h2&gt;为什么是一点五&lt;/h2&gt;&lt;p&gt;因为原计划是把 &lt;equation&gt;\land&lt;/equation&gt; 和 &lt;equation&gt;\lor&lt;/equation&gt; 放在一起讲的，但是我发现到目前为止的证明在模式匹配上都只有一个分支， 到了 &lt;equation&gt;\lor&lt;/equation&gt; 就有两个了，因此关于它和另外几个有两个分支的证明就单独再开一篇吧 （其实是因为这篇写长了，我写博客会控制篇幅的） 。&lt;/p&gt;&lt;p&gt;我说完了。&lt;/p&gt;</description>
<author>大笨蛋千里冰封</author>
<guid isPermaLink="false">2017-11-05-30749528</guid>
<pubDate>Sun, 05 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Agda 中的证明，从零到一</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-11-02-30686586.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Agda 中的证明，从零到一&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30686586&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-461e72ecf40a21b6804d43e7201d21de_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;最近在学 Agda ，感觉摸到了定理证明的门，希望各路大神不吝赐教。这是一个系列，这篇文章讲的太基础是因为它是第一篇哈。原文链接：&lt;a href=&quot;http://ice1000.org/2017/11/01/ProofInAgda/&quot;&gt;Agda 中的证明，从零到一&lt;/a&gt;&lt;/p&gt;&lt;p&gt;类型则命题，程序则证明。这句话表达了定理证明的一个很重要的思想。&lt;/p&gt;&lt;p&gt;我一开始就没有搞懂这句话在说什么。 在我自认为搞懂的时候，我把我以前没有搞懂的原因归结为我看的教程太垃圾了。&lt;/p&gt;&lt;p&gt;一开始我理解这个问题的同时，我以为我也理解了之前一个 Haskell 关于 &lt;code class=&quot;inline&quot;&gt;IO Monad&lt;/code&gt; 的问题，但实际上不是我想的那样。 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/30686586/h%3Ccode%3Ettps://h%3C/code%3Eackage.haskell.org/package/base-4.10.0.0/docs/src/GHC.Base.html#line-1173&quot;&gt;Haskell 的 IO Monad 的实现&lt;/a&gt; 比我想象的要复杂一些，因此本文不谈 Haskell 。&lt;/p&gt;&lt;h2&gt;前置知识&lt;/h2&gt;&lt;p&gt;这是一篇面向略懂 dependent type 的人的定理证明教程，然后你要看得懂类 Haskell 的语法。 因为我在学这个的时候就是只会点 Haskell ，然后用过 GADT 和 type family 模拟过 dependent type 。&lt;/p&gt;&lt;p&gt;给出一些参考资料：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://learn%3Ci%3Eyouahaskell.com/cha%3C/i%3Epters&quot;&gt;一个比较简单的 Haskell 入门教程 Learn you a Haskell&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/67043774/answer/249019401&quot;&gt;虎哥介绍的 GADT&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/singletons&quot;&gt;介绍 GADT 的 CodeWars Kata: Singletons&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.codewars.com/kata/scott-encoding&quot;&gt;介绍 GADT 的 CodeWars Kata: Scott Encoding&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;声明在前面&lt;/h2&gt;&lt;p&gt;由于 Agda 语言的特殊性，本文将使用 LaTeX 和代码块来共同展示代码。 前者是为了保证字符的正确显示，后者是为了方便读者复制代码。&lt;/p&gt;&lt;p&gt;本文不讲 Agda 基本语法和 Emacs 的使用。可能以后会有另外的文章。&lt;/p&gt;&lt;p&gt;本文主要内容是帮助一个没接触过定理证明但是接触过 dependent type 的人（这就是我接触定理证明之前的状态）理解一个非常非常简单的定理证明的例子。&lt;/p&gt;&lt;h2&gt;如何理解定理证明&lt;/h2&gt;&lt;p&gt;首先，我们已经知道，我们这是要用类型表达命题，类型对应的实现来证明这个命题的正确性。&lt;/p&gt;&lt;p&gt;命题中的基本元素一般是值的类型(而且很多时候都是代数数据类型)，也就是 &lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} p \rightarrow q&lt;/equation&gt; 的那个 &lt;equation&gt;p&lt;/equation&gt; 或者 &lt;equation&gt;q&lt;/equation&gt; 。 而这个 &lt;equation&gt;\rightarrow&lt;/equation&gt; 对应的就是 “函数” 这一概念，它组合了两个类型，表达了 “推出” 这一逻辑概念。&lt;/p&gt;&lt;p&gt;比如，我实现了一个这样的类型的函数：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;p \rightarrow q&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;p → q &lt;/code&gt;&lt;p&gt;那么这个函数的实现就是&lt;/p&gt;&lt;blockquote&gt;如果 p 成立，则 q 成立&lt;/blockquote&gt;&lt;p&gt;，或者说，&lt;/p&gt;&lt;blockquote&gt;&lt;equation&gt;p \rightarrow q&lt;/equation&gt; &lt;/blockquote&gt;&lt;p&gt;这个命题的证明。&lt;/p&gt;&lt;p&gt;再比如，我实现了一个这样的类型的函数：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;p \rightarrow q \rightarrow r &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;p → q → r &lt;/code&gt;&lt;p&gt;那么这个函数的实现就是&lt;/p&gt;&lt;blockquote&gt;如果 p 成立，那么 “如果 q 成立，那么 r 成立” 这一命题成立&lt;/blockquote&gt;&lt;p&gt;，或者说，&lt;/p&gt;&lt;blockquote&gt;&lt;equation&gt;p \rightarrow ( q \rightarrow r )&lt;/equation&gt; &lt;/blockquote&gt;&lt;p&gt;这个命题的证明。&lt;/p&gt;&lt;p&gt;其实我们原本想表达的意思是&lt;/p&gt;&lt;blockquote&gt;&lt;equation&gt; p\ \land \ q\rightarrow r &lt;/equation&gt; &lt;/blockquote&gt;&lt;p&gt;但是这个 &lt;equation&gt;\land&lt;/equation&gt; 关系暂时没讲所以先就这样。&lt;/p&gt;&lt;p&gt;这就是 “类型则命题，程序则证明” 的含义。&lt;/p&gt;&lt;p&gt;在 Agda 中，上面的代码应该写成这样：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \proof : \{p\ q\ r : \Set\} \rightarrow p \rightarrow q \rightarrow r &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;proof : {p q r : Set} → p → q → r &lt;/code&gt;&lt;p&gt;下面我们看一些实例。&lt;/p&gt;&lt;h2&gt;refl 与相等性&lt;/h2&gt;&lt;p&gt;之所以我没有再学习 Idris 就是因为那些教程没说 &lt;code class=&quot;inline&quot;&gt;Refl&lt;/code&gt; 是啥 (Idris 叫 &lt;code class=&quot;inline&quot;&gt;Refl&lt;/code&gt; ， Agda 叫 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt;) 就直接在代码里面用了，我看的时候就一脸蒙蔽，还以为是我智商太低没看懂他 implicit 的东西。 但是好在我看了一坨很友好的 Agda 代码后民白了。&lt;/p&gt;&lt;p&gt;首先，我们可以定义这样一个用来表示相等关系的 GADT ，它对于任何一个 Level 的任何一个实例都成立。 这里我们用了 Universal Polymorphism 表达这个 “对于任何一个 Level “ 的概念。&lt;/p&gt;&lt;p&gt;然后我们使用 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt; 这个类型构造器表达 “这个相等关系成立” 这一事实。&lt;/p&gt;&lt;p&gt;我们用 &lt;equation&gt;\equiv&lt;/equation&gt; 表示他（标准库的定义在 &lt;code class=&quot;inline&quot;&gt;&lt;a href=&quot;http://agda.readthedocs.io/en/v2.5.3/language/built-ins.html#equality&quot;&gt;Agda.Builtin.Equality&lt;/a&gt;&lt;/code&gt; 中）：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \begin{align*} &amp;amp; \data\ \_{\equiv}\_\ \{a\} \{A : \Set a\} (x : A) : A \rightarrow \Set a\where \\ &amp;amp;\ \ \refl : x \equiv x \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;data _≡_ {a} {A : Set a} (x : A) : A → Set a where
  refl : x ≡ x &lt;/code&gt;&lt;p&gt;如果你看不懂这个类型签名也没有关系，只需要接受”这个 GADT 只有一个叫 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt; 的类型构造器”这一事实就好了。&lt;/p&gt;&lt;p&gt;然后我们可以用它进行一些证明。比如我们来证明相等性的传递性，也就是&lt;/p&gt;&lt;blockquote&gt;如果 a &lt;equation&gt;\equiv&lt;/equation&gt; b 并且 b &lt;equation&gt;\equiv&lt;/equation&gt; c ，那么 a &lt;equation&gt;\equiv&lt;/equation&gt; c&lt;/blockquote&gt;&lt;p&gt;。然后我们来看看这个命题对应的类型：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \_{\leftrightarrows}\_ : \{A : \Set\} \{a\ b\ c : A\} \rightarrow a \equiv b \rightarrow b \equiv c \rightarrow a \equiv c &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_⇆_ : {A : Set} {a b c : A} → a ≡ b → b ≡ c → a ≡ c &lt;/code&gt;&lt;p&gt;那么我们要怎么实现它，也就是证明它呢？&lt;/p&gt;&lt;p&gt;我一开始写下了这样的东西：&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \_{\leftrightarrows}\_\ ab\ bc = ? &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_⇆_ ab bc = ? &lt;/code&gt;&lt;p&gt;然后我就不知道该怎么办了。&lt;/p&gt;&lt;p&gt;事实上，这个原本就很简单的证明被我想复杂了。 因为这个定理是不证则明的，那么我们要如何表达，如何通过 &lt;code class=&quot;inline&quot;&gt;ab&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;bc&lt;/code&gt; 这两个模式匹配出来的结果进行变换得到这个不证则明的定理呢？&lt;/p&gt;&lt;p&gt;首先这个模式匹配的参数就不应该这样通配地用 &lt;code class=&quot;inline&quot;&gt;ab&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;bc&lt;/code&gt; 来表达。 我们应该把这两个相等关系 (他们的本质是 GADT) 给模式匹配出来。&lt;/p&gt;&lt;p&gt;由于直接写 &lt;code class=&quot;inline&quot;&gt;ab&lt;/code&gt;, &lt;code class=&quot;inline&quot;&gt;bc&lt;/code&gt; 什么都得不出来，我于是尝试将 &lt;code class=&quot;inline&quot;&gt;ab&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;bc&lt;/code&gt; 用模式匹配消耗掉，然后 Agda 直接在右边给我自动填入了 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt; ，然后好像就 Q.E.D 了：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \_{\leftrightarrows}\_\ \refl\ \refl =\refl &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;_⇆_ refl refl = refl -- 编译通过！ &lt;/code&gt;&lt;p&gt;这是为什么呢？我们来分别看下这两种写法的含义。&lt;/p&gt;&lt;h2&gt;使用 ab bc&lt;/h2&gt;&lt;p&gt;这样的话实际上是把 &lt;equation&gt;a \equiv b&lt;/equation&gt; 和 &lt;equation&gt; b \equiv c&lt;/equation&gt; 两个条件当成了”变量”而不是作为”条件”。 也就是说，当使用 &lt;code class=&quot;inline&quot;&gt;abbc&lt;/code&gt; 时，右边就需要”通过 &lt;equation&gt;a \equiv b&lt;/equation&gt; 和 &lt;equation&gt;b \equiv c&lt;/equation&gt; 这两个条件，再对这两个条件套用一些变换，得出 &lt;equation&gt;a \equiv c&lt;/equation&gt; ”。&lt;/p&gt;&lt;p&gt;在这个时候，编译器并没有把 &lt;equation&gt;a \equiv b&lt;/equation&gt; 和 &lt;equation&gt;b \equiv c &lt;/equation&gt; 当成既成条件，而是当成了 “变量” 。&lt;/p&gt;&lt;p&gt;这就回到了我们原本的需求，我们原本就是需要写出一个 &lt;equation&gt;a \equiv b\ \land\ b \equiv c \rightarrow a \equiv c&lt;/equation&gt; 的变换。&lt;/p&gt;&lt;p&gt;如果要用变换强行实现的话，可以使用 &lt;code class=&quot;inline&quot;&gt;with&lt;/code&gt; 语句（就是 Agda 的 &lt;code class=&quot;inline&quot;&gt;case of&lt;/code&gt;）把这两个变量模式匹配出来，然后直接得证。 这里给出一个代码实现。&lt;/p&gt;&lt;p&gt;&lt;equation&gt; \begin{eqnarray} \_{\leftrightarrows}_1\_\ ab\ bc \with ab\ &amp;amp;|&amp;amp;bc \\ ... \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ |\ \ \refl\ &amp;amp;|&amp;amp;\refl = \refl \end{eqnarray}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_⇆₁_ ab bc with ab   | bc
...           | refl | refl = refl &lt;/code&gt;&lt;p&gt;这种方法和下面的做法是等价的。&lt;/p&gt;&lt;p&gt;如果你没有看懂这一坨，可以尝试继续读下去，说不定看完下面那坨你就懂了。&lt;/p&gt;&lt;h2&gt;使用 refl&lt;/h2&gt;&lt;p&gt;由于 &lt;equation&gt;a \equiv b&lt;/equation&gt; 已经是一个条件了，我们直接把它的值取出来。 这时，右边的代码就 &lt;b&gt;已经是建立在&lt;/b&gt; &lt;equation&gt;a \equiv b&lt;/equation&gt; &lt;b&gt;和&lt;/b&gt; &lt;equation&gt;b \equiv c&lt;/equation&gt; &lt;b&gt;这两个既成条件下&lt;/b&gt; 的了，因此这时 Agda 已经认为 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;c&lt;/code&gt; 三者相等了。&lt;/p&gt;&lt;p&gt;利用这一点，我们直接使用 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt; 是没有问题的。&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\_{\leftrightarrows}_0\_\ \refl\ \refl = \refl &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;_⇆₀_ refl refl = refl &lt;/code&gt;&lt;h2&gt;顺带一提&lt;/h2&gt;&lt;p&gt;当然我们也可以这样写，这是一个语法糖：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \refl {\leftrightarrows}_0\refl = \refl &lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;refl ⇆₀ refl = refl&lt;/code&gt;&lt;p&gt;之前那个比较 trivial 的模式匹配也可以这样写：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect}\begin{eqnarray} ab\ {\leftrightarrows}_1\ ab \with ab\ &amp;amp;|&amp;amp;bc \\ ... \ \ \ \ \ \ \ \ \ \ \ \ \ |\ \ \refl\ &amp;amp;|&amp;amp;\refl = \refl \end{eqnarray}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;ab ⇆₁ bc with ab   | bc
...         | refl | refl = refl &lt;/code&gt;&lt;h2&gt;另一个例子&lt;/h2&gt;&lt;p&gt;现在你肯定有点感觉了，但是这个例子太 trivial 你又感觉自己有点没懂， 那么我们再来看看这个稍微复杂点的例子帮你加深一下理解。&lt;/p&gt;&lt;p&gt;首先：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \forall\ \{ a \}\ \{ A : \Set a \} &lt;/equation&gt; &lt;/p&gt;&lt;p&gt;表示 Universal Polymorphism 。然后考虑一个函数，我们有：&lt;/p&gt;&lt;p&gt;&lt;equation&gt;\DeclareMathOperator{Set}{Set} \DeclareMathOperator{refl}{refl} \DeclareMathOperator{proof}{proof} \DeclareMathOperator{data}{data} \DeclareMathOperator{where}{where} \DeclareMathOperator{with}{with} \DeclareMathOperator{Vect}{Vect} \begin{align*} &amp;amp; \ggg : \forall\ \{a\ b\}\ \{A : \Set a\}\ \{B : \Set b\} \{m\ n\} \{f : A \rightarrow B\} \rightarrow m \equiv n \rightarrow f\ m \equiv f\ n \\ &amp;amp; \ggg \refl = \refl \end{align*}&lt;/equation&gt; &lt;/p&gt;&lt;code lang=&quot;agda&quot;&gt;⋙ : ∀ {a b} {A : Set a} {B : Set b} {m n} {f : A → B} → m ≡ n → f m ≡ f n
⋙ refl = refl &lt;/code&gt;&lt;p&gt;和上面一样，在建立了 &lt;equation&gt;m \equiv n&lt;/equation&gt; 的基础上，可以直接用 &lt;code class=&quot;inline&quot;&gt;refl&lt;/code&gt; 表达他们对于同一个函数应用的结果相等。&lt;/p&gt;&lt;p&gt;我是在 &lt;a href=&quot;https://stackoverflow.com/questions/27091668/refl-in-agda-explaining-congruence-property&quot;&gt;这个 StackOverflow 问题&lt;/a&gt; 里看到这个代码的，唯一的回答里面还有更多的解释。&lt;/p&gt;&lt;p&gt;这个我就暂时不作过多讲解了，以后再说。&lt;/p&gt;&lt;h2&gt;结束&lt;/h2&gt;&lt;p&gt;这个证明太简单了，只有一步，没有什么实际意义，仅用于入门理解。 下一篇文章我们将会进行一个稍微复杂点的关于与或关系的证明。&lt;/p&gt;&lt;p&gt;我说完了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;执壶的代码块高亮竟然支持 Agda ，感动中国简直&lt;/p&gt;</description>
<author>大笨蛋千里冰封</author>
<guid isPermaLink="false">2017-11-02-30686586</guid>
<pubDate>Thu, 02 Nov 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Lens：从入门到入门</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-10-29-30544410.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Lens：从入门到入门&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30544410&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic2.zhimg.com/v2-aaf2eb05bd1a9cdd7418bb083208767d_r.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;h2&gt;概览&lt;/h2&gt;&lt;p&gt;Haskell 语言中操作一个复杂的数据结构往往会成为一个问题。&lt;/p&gt;&lt;p&gt;例如我们用 Haskell 做一个RPG游戏，有下面的定义：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;data Hero = Hero {
  heroLevel :: Int, weapon :: Weapon
}

data Weapon = Weapon {
  basicAttack :: Int, weaponLevel :: Int, magicGem :: Gem
}
data Gem = Gem {
  gemLevel :: Int,
  gemName :: String
} 
setHeroLevel :: Hero -&amp;gt; Int -&amp;gt; Hero
setWeapon    :: Weapon -&amp;gt; Hero -&amp;gt; Hero
-- and so on. &lt;/code&gt;&lt;p&gt;对于简单的从深层结构中提取出一个值仍然是可接受的：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;gemLevel.magicGem.weapon $ hero
-- Or
hero &amp;amp; (weapon&amp;gt;&amp;gt;&amp;gt;magicGem&amp;gt;&amp;gt;&amp;gt;gemLevel)&lt;/code&gt;&lt;p&gt;但修改内层数据（并返回一个新的对象）则显得过于繁杂：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;hero&#39; = hero {
    weapon = (weapon hero) {
        magicGem = (magicGem.weapon $ hero){
            gemName = &quot;WTF&quot; }}}&lt;/code&gt;&lt;p&gt;可以看到，这里仅仅三层嵌套，一个修改的操作就已经及其复杂了。&lt;/p&gt;&lt;p&gt;为了解决这个问题 Haskell 语言中有一种被称为「Lens」的工具，可是实现下面这样的写法：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;view (weaponLens.magicGemLens.gemLevelLens) hero
hero&#39;  = set (weaponLens.magicGemLens.gemNameLens) &quot;Gem&quot; hero
hero&#39;&#39; = over (weaponLens.magicGemLens.gemLevelLens) (+1) hero

-- 中缀版本
hero .^ weaponLens.magicGemLens.gemLevelLens 
hero&#39;  = hero &amp;amp; weaponLens.magicGemLens.gemNameLens .~ &quot;Gem&quot; 
hero&#39;&#39; = hero &amp;amp; weaponLens.magicGemLens.gemLevelLens) %~ (+1)&lt;/code&gt;&lt;p&gt;这里的代码已经非常接近于普通的命令式语言中的写法了，非常自然、易用。&lt;/p&gt;&lt;p&gt;普通的命令式语言中用 &lt;code class=&quot;inline&quot;&gt;.&lt;/code&gt; 从一个结构中提取它的一个子域，而这里我们在 Haskell 中通过 Lens 实现了类似的效果。同时我们注意到，这里的&lt;code class=&quot;inline&quot;&gt;.&lt;/code&gt; 不是凭空出现的，而是我们熟悉的 Haskell 中的函数复合。即 Lens 完成上面这些复杂操作的一个基本思路是复合。&lt;/p&gt;&lt;h2&gt;简版 Lens   &lt;/h2&gt;&lt;p&gt;实际上，如果我们已经有了这些对象对应的 getter 和 setter 函数，那么我们不难将他们之间互相复合形成操作深层数据的新的 getter 和 setter。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type L a b = (a -&amp;gt; b, b -&amp;gt; a -&amp;gt; a)

(.&amp;gt;) :: L a b -&amp;gt; L b c -&amp;gt; L a c
(g1, s1) .&amp;gt; (g2, s2) = (g2 . g1, \c a -&amp;gt; s1 (s2 c (g1 a)) a)

viewL :: L a b -&amp;gt; a -&amp;gt; b
viewL (g, _) = g

setL :: L a b -&amp;gt; b -&amp;gt; a -&amp;gt; a
setL (_, s) = s

overL :: L a b -&amp;gt; (b -&amp;gt; b) -&amp;gt; a -&amp;gt; a 
overL (g, s) f a = s (f $ g a) a&lt;/code&gt;&lt;p&gt;我们直接将一个 getter 与 setter 包装成二元组。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponL   = (weapon, setWeapon)
gemLevelL = (gemLevel, setGemLevel) &lt;/code&gt;&lt;p&gt;这种情况下，我们定义的“简版 Lens ”的使用与前文演示的 Lens 是极其相似的：&lt;/p&gt;&lt;code lang=&quot;text&quot;&gt;viewL (weaponL.&amp;gt;magicGemL.&amp;gt;gemLevelL) hero
hero&#39; = setL (weaponL.&amp;gt;magicGemL.&amp;gt;gemLevelL) 2 hero&lt;/code&gt;&lt;p&gt;我们的实现仍然借助了复合的思想，但是需要我们自己来实现针对 getter 和 setter 的复合，而前文演示的却是真正的函数复合。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;h2&gt;实现 Lens 的准备工作&lt;/h2&gt;&lt;p&gt;我们已经注意到文章开头的 Lens 有几个特点&lt;/p&gt;&lt;ul&gt;&lt;li&gt;是普通的函数类型，可以互相复合；&lt;/li&gt;&lt;li&gt;与对象类型&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt; 和域类型 &lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt; 相关；&lt;/li&gt;&lt;li&gt;可以用来实现看似相反的两个操作 get 和 set。&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;下面我们尝试找出这个类型&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens b a = (???  ) -&amp;gt; (???)&lt;/code&gt;&lt;p&gt;考虑它的复合特点，按照结构的嵌套顺序，从前向后依次是从内向外：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;aL :: Lens b a
cL :: Lens a c
aL.cL :: Lens b c&lt;/code&gt;&lt;p&gt;要实现这样的复合特性，应当是&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type SomeType a = ...

aL :: SomeType a -&amp;gt; SomeType b
cL :: SomeType c -&amp;gt; SoemType a
aL.cL :: SomeType c -&amp;gt; SomeType b&lt;/code&gt;&lt;p&gt;即上面的第一个 (???) 与&lt;code class=&quot;inline&quot;&gt;a&lt;/code&gt;有关，第二个与&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;有关。&lt;/p&gt;&lt;p&gt;同时，&lt;code class=&quot;inline&quot;&gt;Lens b a&lt;/code&gt;一定会接受一个&lt;code class=&quot;inline&quot;&gt;b&lt;/code&gt;类型的参数作为要操作的主体对象，我们可以进一步写成&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens b a = (???) -&amp;gt; (b -&amp;gt; ???)&lt;/code&gt;&lt;p&gt;而上面的复合特性要求前后是两个类似的类型&lt;code class=&quot;inline&quot;&gt;SomeType&lt;/code&gt;，我们进一步改写为&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens b a = (a -&amp;gt; ???) -&amp;gt; (b -&amp;gt; ???)&lt;/code&gt;&lt;p&gt;我们可以猜测到，&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt; &lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt; 等函数调用&lt;code class=&quot;inline&quot;&gt;Lens&lt;/code&gt;，传递进一个函数&lt;code class=&quot;inline&quot;&gt;(a -&amp;gt; ???)&lt;/code&gt;来实现了不同的操作。&lt;/p&gt;&lt;h2&gt;View Lens 的实现&lt;/h2&gt;&lt;p&gt;我们先尝试写出一个特定类型的 Lens ，来只支持&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;操作，根据上文的分析，&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;函数的定义应该形如下：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view :: VLens b a -&amp;gt; b -&amp;gt; a
view lens b = lens ??? b&lt;/code&gt;&lt;p&gt;考虑我们之前的例子&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponVLens   :: (Weapon -&amp;gt; ???) -&amp;gt; (Hero -&amp;gt; ???)
magicGemVLens :: (Gem -&amp;gt; ???)    -&amp;gt; (Weapon -&amp;gt; ???)
gemLevelVLens :: (Int -&amp;gt; ???)    -&amp;gt; (Gem -&amp;gt; ???)&lt;/code&gt;&lt;p&gt;如果我们想要获得英雄的武器上的宝石的宝石等级，那么我们想要的可能是这样的东西：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponVLens.magicGemVLens.gemLevelVLens :: (Int -&amp;gt; Int) -&amp;gt; (Hero -&amp;gt; Int)&lt;/code&gt;&lt;p&gt;这样，&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;函数便可以对这个复合的&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;传入某个函数，再传入我们的英雄，就可以得到宝石等级了。为了让这样的复合成为可能，上面的所有 ??? 都必须是&lt;code class=&quot;inline&quot;&gt;Int&lt;/code&gt;。我们可以想象到那个代表&lt;code class=&quot;inline&quot;&gt;GemLevel&lt;/code&gt;的&lt;code class=&quot;inline&quot;&gt;Int&lt;/code&gt;在函数间传递的效果。&lt;/p&gt;&lt;p&gt;同理，如果我们只想得到武器上的宝石的话，我们需要的是这样的东西：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponVLens.magicGemVLens :: (Gem -&amp;gt; Gem) -&amp;gt; (Hero -&amp;gt; Gem)&lt;/code&gt;&lt;p&gt;这时候这些&lt;code class=&quot;inline&quot;&gt;???&lt;/code&gt;又成为了&lt;code class=&quot;inline&quot;&gt;Gem&lt;/code&gt;。&lt;/p&gt;&lt;p&gt;由此可见，在&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的场合下，这里的类型&lt;code class=&quot;inline&quot;&gt;???&lt;/code&gt;随着提取的东西不同而变化，并且等于我们要提取的东西的类型。这样&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;的类型定义便得到了：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type VLens b a = forall c. (a -&amp;gt; c) -&amp;gt; (b -&amp;gt; c)&lt;/code&gt;&lt;p&gt;所有的&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;在复合时都接受内层的一个提取操作，并返回一个嵌套了的提取操作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponVLens  :: VLens Hero Weapon
weaponVLens f = \h -&amp;gt; f (weapon h)

magicGemVLens :: VLens Weapon Gem
magicGemVLens f = \w -&amp;gt; f (magicGem w)

gemLevelVLens :: VLens Gem Int
gemLevelVLens f = \g -&amp;gt; f (gemLevel g)&lt;/code&gt;&lt;img src=&quot;https://pic1.zhimg.com/v2-eb3ff4069ec471c1c69250a6355a85a1_r.jpg&quot; data-caption=&quot;&quot; data-rawwidth=&quot;503&quot; data-rawheight=&quot;417&quot;&gt;&lt;p&gt;而最终传入我们要操作的外层对象之后，则用相仿的顺序，一层层地完成了提取操作，直到最内层，这时我们只需要使用&lt;code class=&quot;inline&quot;&gt;id&lt;/code&gt;函数使其原样返回即可。&lt;/p&gt;&lt;p&gt;由此，&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;函数的定义便可以得到了。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;viewV vlens b = vlens id b&lt;/code&gt;&lt;h2&gt;Over Lens 的实现&lt;/h2&gt;&lt;p&gt;再次考虑我们的例子&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponOLens   :: (Weapon -&amp;gt; ???) -&amp;gt; (Hero -&amp;gt; ???)
magicGemOLens :: (Gem -&amp;gt; ???)    -&amp;gt; (Weapon -&amp;gt; ???)
gemNameOLens  :: (Int -&amp;gt; ???)    -&amp;gt; (Gem -&amp;gt; ???)&lt;/code&gt;&lt;p&gt;现在我们希望对一个对象的某个域进行修改，并返回修改过了的对象。那么后面的 ??? 则应该与和它紧靠着的类型相同，而为了使这些&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;可以互相复合，前面的 ??? 应该与紧靠着的前面类型相同。例如：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponOLens.magicGemOLens :: (Gem -&amp;gt; Gem) -&amp;gt; (Hero -&amp;gt; Hero)&lt;/code&gt;&lt;p&gt;可以看到 &lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;的类型比较简单&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type OLens b a =  (a -&amp;gt; a) -&amp;gt; (b -&amp;gt; b)&lt;/code&gt;&lt;p&gt;观察一下便可以得到，第一个参数&lt;code class=&quot;inline&quot;&gt;(a -&amp;gt; a)&lt;/code&gt;便是我们对域进行操作的更新函数了。此时&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;函数不需要再做其他多余的事情，只需要将&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;原样返回。而各个&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;的定义也只不过是产生一个新的修改函数，这个修改函数将自己管辖的域修改为已经被修改过了的内层对象。而最内层则会使用用户传入的修改函数f来完成相应的操作。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponOLens ::  OLens Hero Weapon
weaponOLens f = \h -&amp;gt; (`setWeapon` h) $ f (weapon h)

magicGemOLens :: OLens Weapon Gem
magicGemOLens f = \w -&amp;gt; (`setMagicGem` w) $ f (magicGem w)

gemLevelOLens :: OLens Gem Int
gemLevelOLens f = \g -&amp;gt; (`setGemLevel` g) $ f (gemLevel g)&lt;/code&gt;&lt;p&gt;这样，当最终传入需要处理的外层对象时，&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;便会一层层地完成修改的工作。&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;对于&lt;code class=&quot;inline&quot;&gt;set&lt;/code&gt;而言，只不过是一种特殊的&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;setO vlens s = vlens (const s)&lt;/code&gt;&lt;h2&gt;最终实现 Lens&lt;/h2&gt;&lt;p&gt;现在，我们已经分别实现了&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;，而且发现他们之间有相似之处。实际上他们都是从一个相同的&lt;code class=&quot;inline&quot;&gt;(a -&amp;gt; ???) -&amp;gt; (b -&amp;gt; ???)&lt;/code&gt; 经过我们一系列对其性质的分析得到的。我们的最终目的是通过单一的&lt;code class=&quot;inline&quot;&gt;Lens&lt;/code&gt;类型，来实现&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;和&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;这样不同的行为，即需要某种多态。而下面的类型却无法为这种多态提供帮助。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens b a -&amp;gt; forall c d. (a -&amp;gt; c) -&amp;gt; (b -&amp;gt; d)&lt;/code&gt;&lt;p&gt;我们需要某种类型，我们可以对其中的内容进行操作，并且这种操作的行为随使用者的需求而可以多态变化。符合这样特点的，正是我们熟悉的 Functor 。所以我们便可以这样做了：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type Lens b a = Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; (b -&amp;gt; f b)&lt;/code&gt;&lt;p&gt;这个类型定义非常类似前面的&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;，同时这里的f具有任意性，又可以满足&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;的需求。而实际上，如果这里的&lt;code class=&quot;inline&quot;&gt;f&lt;/code&gt;是 Identity Functor 的话，这个类型所表达的与&lt;code class=&quot;inline&quot;&gt;OLens&lt;/code&gt;毫无区别。我们只需要对原有&lt;code class=&quot;inline&quot;&gt;over&lt;/code&gt;进行一层 Identity Functor 的包装就保证了其语义不变：&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;over lens f = runIdentity . lens (Identity . f)&lt;/code&gt;&lt;p&gt;对于&lt;code class=&quot;inline&quot;&gt;VLens&lt;/code&gt;类型&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponOLens ::  (a -&amp;gt; a) -&amp;gt; (b -&amp;gt; b)
weaponOLens f h = (`setWeapon` h) $ f (weapon h)&lt;/code&gt;&lt;p&gt;我们也仅需要对调用的修改本层次域的函数进行升格，上下结构保持了极好的相似性。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;weaponLens ::  Functor f =&amp;gt; (a -&amp;gt; f a) -&amp;gt; (b -&amp;gt; f b)
weaponLens f h = (`setWeapon` h) &amp;lt;$&amp;gt; f (weapon h)&lt;/code&gt;&lt;p&gt;那么我们剩余的问题就在于如何利用 Functor 提供的多态能力来实现&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的语义了。&lt;/p&gt;&lt;p&gt;我们观察一下先前的&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;实现&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;type VLens b a = forall c. (a -&amp;gt; c) -&amp;gt; (b -&amp;gt; c)
viewV vlens b = vlens id b&lt;/code&gt;&lt;p&gt;我们发现&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的实现有如下特点：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;对象的内容完全没有被改变&lt;/li&gt;&lt;li&gt;每一层的作用是返回内层的内容&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;我们只要找到一个Functor符合上面的特点就可以实现&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;，而 Const Functor 恰好符合我们的需求。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;newtype Const a b = Const {getConst :: a}
instance Functor (Const a) where
  fmap f c = c&lt;/code&gt;&lt;p&gt;Const Functor 的&lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt;并不改变值，实际上，其中根本没有值。一个 Const Functor 在创建之后，经历过多次&lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt;可能其类型发生变化，但getConst所取出的内容永远不会变化。&lt;/p&gt;&lt;p&gt;考虑下面的&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;定义，最内层的值被应用到&lt;code class=&quot;inline&quot;&gt;Const&lt;/code&gt;构建函数上。之后经历过若干次&lt;code class=&quot;inline&quot;&gt;fmap&lt;/code&gt;，最后&lt;code class=&quot;inline&quot;&gt;getConst&lt;/code&gt;取得的仍是原来的值，于是便实现了&lt;code class=&quot;inline&quot;&gt;view&lt;/code&gt;的行为。&lt;/p&gt;&lt;code lang=&quot;haskell&quot;&gt;view :: Lens b a -&amp;gt; b -&amp;gt; a
view lens b = getConst $ lens Const b&lt;/code&gt;&lt;p&gt;到这里为止，我们便实现了文章开头所演示的 Lens 的功能。&lt;/p&gt;&lt;p&gt;附上在Zju Lambda报告的Slides：&lt;a href=&quot;https://github.com/zju-lambda/slides/blob/master/The%20Overview%20of%20Lens.pdf&quot;&gt;The Overview of Lens&lt;/a&gt;&lt;/p&gt;</description>
<author>孙浩然</author>
<guid isPermaLink="false">2017-10-29-30544410</guid>
<pubDate>Sun, 29 Oct 2017 00:00:00 +0800</pubDate>
</item>
<item>
<title>Dafny与程序验证</title>
<link>https://henix.github.io/feeds/zhuanlan.marisa/2017-10-21-30321583.htm</link>
<description>&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Dafny与程序验证&lt;/title&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/30321583&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;title-image&quot;&gt;&lt;img src=&quot;https://pic3.zhimg.com/v2-8f49af88768b20c6808b564c74a43abe_r.png&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;p&gt;B大以前写过一个&lt;a href=&quot;https://zhuanlan.zhihu.com/p/25568785&quot;&gt;怎样写出没有 bug 的程序：程序证明的简单例子&lt;/a&gt; ，是用Idris写的，我也来写一个，不过方法不太一样。&lt;/p&gt;&lt;p&gt;Dafny是MSR开发的程序设计语言，它混合了OOP和FP编程范式，并且自带程序验证功能，可以通过霍尔逻辑证明程序正确性。&lt;/p&gt;&lt;p&gt;它的语法非常简单，看起来就像C++，Scala和Haskell的混合。&lt;/p&gt;&lt;ul&gt;&lt;li&gt;变量(scala风格，只是没有val)&lt;/li&gt;&lt;/ul&gt;&lt;code lang=&quot;scala&quot;&gt;var x:Tree;
var y:nat := 0;&lt;/code&gt;&lt;ul&gt;&lt;li&gt;ADT(Haskell风格)&lt;/li&gt;&lt;/ul&gt;&lt;code lang=&quot;scala&quot;&gt;datatype Tree = Empty | Node(left:Tree,value:real,right:Tree)
datatype List&amp;lt;T&amp;gt; = Nil | Cons(head: T, tail: List&amp;lt;T&amp;gt;)
Cons(5,Nil).Cons? &amp;amp;&amp;amp; Cons(5, Nil).head == 5&lt;/code&gt;&lt;ul&gt;&lt;li&gt;Methed/Lemma(命令式风格的函数)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;expr表示表达式，col表示集合&lt;/p&gt;&lt;p&gt;modifies用来标记函数的副作用，requires是前置命题，ensures是后置命题，decreses用来证明递归函数可终止。&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;method/lemma Abs(x: int) returns (y: int)
    modifies &amp;lt;col&amp;gt;
    requires &amp;lt;expr&amp;gt;
    ensures &amp;lt;expr&amp;gt;
    decreases &amp;lt;expr&amp;gt;
{
    if x &amp;lt; 0 { return -x;}
    else {return x;}
}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;Function/Predicate(函数式风格的函数)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;reads用来标记函数捕获的外部变量&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;function abs(x: int):int
    requires &amp;lt;expr&amp;gt;
    ensures &amp;lt;expr&amp;gt;
    reads &amp;lt;col&amp;gt;
    decreases &amp;lt;expr&amp;gt;
{
    if x &amp;lt; 0 then -x else x
}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;Assert用来下断言，只不过这个断言不是运行期的，而是编译期的，支持forall和exist量词以及基本的逻辑运算符。把Assert改为Assume，可以用来假定某些命题成立。&lt;/li&gt;&lt;/ul&gt;&lt;code lang=&quot;scala&quot;&gt;assert forall x :: P(x) ==&amp;gt; Q(x)
assert forall(i | 0 &amp;lt;= i&amp;lt; n - m) { b[i] := a[m + i];}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;模式匹配(Scala风格，match的位置略有差异)&lt;/li&gt;&lt;/ul&gt;&lt;code lang=&quot;scala&quot;&gt;match t
	case Empty =&amp;gt; …
	case Node(l:Empty,v,r) =&amp;gt; …&lt;/code&gt;&lt;ul&gt;&lt;li&gt;循环&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;可用invariant标记循环不变量&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;var i:=0
while i&amp;lt;n
	invariant i&amp;lt;=n
	decreases n-i
{}&lt;/code&gt;&lt;ul&gt;&lt;li&gt;支持C++类的写法，支持Lambda表达式，支持Trait，支持yield惰性流，有复杂的模块系统，支持泛型类和高阶类型（都是用&amp;lt;&amp;gt;表达）&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;以上就是Dafny常用的语法，还有一些不常用的语法可以参考&lt;a href=&quot;https://github.com/Microsoft/dafny/blob/master/Docs/DafnyRef/out/DafnyRef.pdf&quot;&gt;DafnyRef&lt;/a&gt;&lt;/p&gt;&lt;p&gt;一起来看一个稍微复杂一点的例子吧！写一个二叉搜索树的插入函数&lt;/p&gt;&lt;p&gt;定义二叉树&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;datatype Tree = Empty | Node(left:Tree,value:real,right:Tree)&lt;/code&gt;&lt;p&gt;在类里定义变量&lt;/p&gt;&lt;code lang=&quot;cpp&quot;&gt;class BST
{
    var tree:Tree;&lt;/code&gt;&lt;p&gt;定义in_tree和is_ordered函数，分别表示某个元素在树内和树符合二叉搜索树的条件&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;predicate method is_intree(t:Tree,x:real)
{
    match t
        case Empty =&amp;gt; false
        case Node(l,v,r) =&amp;gt; x==v || is_intree(l,x) || is_intree(r,x)
}
predicate is_ordered(t:Tree)
{
    match t
        case Empty =&amp;gt; true
        case Node(l,v,r) =&amp;gt; is_ordered(l) &amp;amp;&amp;amp; is_ordered(r) &amp;amp;&amp;amp;
            (forall x::is_intree(l,x) ==&amp;gt; x&amp;lt;v) &amp;amp;&amp;amp;
            (forall y::is_intree(r,y) ==&amp;gt; y&amp;gt;=v)
}&lt;/code&gt;&lt;p&gt;定义函数insert_into_left和insert_into_right&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;protected function method insert_into_left(t:Tree,x:real):Tree
    requires t!=Empty
    requires is_ordered(t)
    ensures is_ordered(insert_into_left(t,x))
{
    match t.left
        case Empty =&amp;gt; Node(Empty,x,Empty)
        case Node(l,v,r) =&amp;gt;
            if x&amp;gt;=v then
                insert_into_right(t.left,x)
            else
                insert_into_left(t.left,x)
}

protected function method insert_into_right(t:Tree,x:real):Tree
    requires t!=Empty
    requires is_ordered(t)
    ensures is_ordered(insert_into_right(t,x))
{
    match t.right
        case Empty =&amp;gt; Node(Empty,x,Empty)
        case Node(l,v,r) =&amp;gt;
            if x&amp;gt;=v then
                insert_into_right(t.right,x)
            else
                insert_into_left(t.right,x)
}
&lt;/code&gt;&lt;p&gt;以上全是pure function，最后，我们回到oop的世界，定义dirty的类成员函数&lt;/p&gt;&lt;code lang=&quot;scala&quot;&gt;method insert(x:real)
    requires is_ordered(tree)
    modifies this
    ensures is_ordered(tree)
{
    match tree
        case Empty =&amp;gt; {tree:=Node(Empty,x,Empty);}
        case Node(l,v,r) =&amp;gt; 
        {
            if x&amp;gt;=v
            {
                tree:=insert_into_right(tree,x);
            }
            else
            {
                tree:=insert_into_left(tree,x);
            }
        }
}&lt;/code&gt;&lt;p&gt;编译的时候，编译器会帮你验证你写的那些requires,ensures,assert是否满足，如果不满足，它会告诉你哪些命题无法证明。经过验证之后，你可以选择将Dafny代码编译为C#或编译成dll被其他.Net程序调用。&lt;/p&gt;&lt;p&gt;以上只是一个简单介绍，具体代码在&lt;a href=&quot;https://github.com/NiceKingWei/algorithm/blob/master/dafny/bst.dfy&quot;&gt;bst.dfy&lt;/a&gt;&lt;/p&gt;&lt;p&gt;我的slides &lt;a href=&quot;https://github.com/zju-lambda/slides/blob/master/Verification%20in%20Dafny.pdf&quot;&gt;Verification in Dafny&lt;/a&gt;&lt;/p&gt;&lt;p&gt;关于Dafny的更多精彩内容， 可以关注Dafny的项目主页，里面有一些学习资源 &lt;a href=&quot;https://www.microsoft.com/en-us/research/project/dafny-a-language-and-program-verifier-for-functional-correctness/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fprojects%2Fdafny%2Freference.aspx&quot;&gt;MSR:Dafny&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;/p&gt;</description>
<author>魏王雅望非常</author>
<guid isPermaLink="false">2017-10-21-30321583</guid>
<pubDate>Sat, 21 Oct 2017 00:00:00 +0800</pubDate>
</item>
</channel>
</rss>
